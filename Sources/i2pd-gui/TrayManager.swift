import SwiftUI
import AppKit

// MARK: - Tray Manager Singleton  
class TrayManager: NSObject, ObservableObject {
    static let shared = TrayManager()
    private var statusBarItem: NSStatusItem?
    private var appDelegate: AppDelegate?
    
    // –°—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    private var statusItem: NSMenuItem?
    private var startItem: NSMenuItem?
    private var stopItem: NSMenuItem?
    private var restartItem: NSMenuItem?
    
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ–Ω–∞
    private var isRestarting = false
    
    private override init() {
        super.init()
        setupStatusBar()
        
        // –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–ª–µ–≥–∞—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        appDelegate = AppDelegate()
        NSApp.delegate = appDelegate
    }
    
    private func setupStatusBar() {
        print("üîßüîßüîß –°–û–ó–î–ê–ù–ò–ï –¢–†–ï–Ø –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø üîßüîßüîß")
        statusBarItem = NSStatusBar.system.statusItem(withLength: NSStatusItem.variableLength)
        
        print("üîß StatusBar —Å–æ–∑–¥–∞–Ω: \(String(describing: statusBarItem))")
        
        if let statusBarItem = statusBarItem {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∏–∫–æ–Ω–∫—É —Ç—Ä–µ—è –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–∞–∫ fallback
            var image: NSImage?
            
            // –¢–µ–∞—Ç—Ä–∞–ª—å–Ω—ã–µ –º–∞—Å–∫–∏ –∏–∑ SF Symbols 7 - —Å–∏–º–≤–æ–ª–∏—á–Ω–æ –¥–ª—è I2P (–∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å/—Ç—Ä–∞–≥–µ–¥–∏—è)
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç—É—Ä–Ω—É—é –∏–∫–æ–Ω–∫—É (–¥–µ–º–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
            image = NSImage(systemSymbolName: "theatermasks", accessibilityDescription: "I2P Daemon")
            print("üé≠ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ–∞—Ç—Ä–∞–ª—å–Ω—ã–µ –º–∞—Å–∫–∏ –¥–ª—è —Ç—Ä–µ—è (–∫–æ–Ω—Ç—É—Ä–Ω–∞—è –∏–∫–æ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
            if let image = image {
                image.size = NSSize(width: 18, height: 18)
                print("üìè –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: 18x18 –ø–∏–∫—Å–µ–ª–µ–π")
            }
            
            statusBarItem.button?.image = image
            
            let menu = NSMenu()
            
            // –°—Ç–∞—Ç—É—Å
            statusItem = NSMenuItem(title: L("–°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤"), action: #selector(checkStatus), keyEquivalent: "")
            statusItem?.target = self
            menu.addItem(statusItem!)
            menu.addItem(NSMenuItem.separator())
            
            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ daemon - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            let startAction = #selector(TrayManager.startDaemon)
            print("üîß –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è start: \(String(describing: startAction))")
            
            startItem = NSMenuItem(title: L("–ó–∞–ø—É—Å—Ç–∏—Ç—å daemon"), action: startAction, keyEquivalent: "")
            startItem?.target = self
            startItem?.tag = 1
            print("üîß startItem —Å–æ–∑–¥–∞–Ω —Å target: \(String(describing: startItem?.target)), action: \(String(describing: startItem?.action))")
            menu.addItem(startItem!)
            
            stopItem = NSMenuItem(title: L("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å daemon"), action: #selector(stopDaemon), keyEquivalent: "")
            stopItem?.target = self
            stopItem?.tag = 2
            print("üîß stopItem —Å–æ–∑–¥–∞–Ω —Å target: \(String(describing: stopItem?.target)), action: \(String(describing: stopItem?.action))")
            menu.addItem(stopItem!)
            
            restartItem = NSMenuItem(title: L("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å daemon"), action: #selector(restartDaemon), keyEquivalent: "")
            restartItem?.target = self
            restartItem?.tag = 3
            print("üîß restartItem —Å–æ–∑–¥–∞–Ω —Å target: \(String(describing: restartItem?.target)), action: \(String(describing: restartItem?.action))")
            menu.addItem(restartItem!)
            menu.addItem(NSMenuItem.separator())
            
            // –§—É–Ω–∫—Ü–∏–∏
            let settingsItem = NSMenuItem(title: L("–ù–∞—Å—Ç—Ä–æ–π–∫–∏"), action: #selector(openSettings), keyEquivalent: ",")
            settingsItem.target = self
            print("üîß –°–æ–∑–¥–∞–Ω settingsItem —Å target: \(String(describing: settingsItem.target)), action: \(String(describing: settingsItem.action))")
            menu.addItem(settingsItem)
            
            let toolsItem = NSMenuItem(title: L("–£—Ç–∏–ª–∏—Ç—ã"), action: #selector(openTools), keyEquivalent: "t")
            toolsItem.target = self
            menu.addItem(toolsItem)
            
            let webItem = NSMenuItem(title: L("–í–µ–±-–∫–æ–Ω—Å–æ–ª—å"), action: #selector(openWebConsole), keyEquivalent: "")
            webItem.target = self
            menu.addItem(webItem)
            
            let showItem = NSMenuItem(title: L("–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ"), action: #selector(showMainWindow), keyEquivalent: "")
            showItem.target = self
            menu.addItem(showItem)
            menu.addItem(NSMenuItem.separator())
            
            let hideItem = NSMenuItem(title: L("–°–≤–µ—Ä–Ω—É—Ç—å –≤ —Ç—Ä–µ–π"), action: #selector(hideMainWindow), keyEquivalent: "")
            hideItem.target = self
            menu.addItem(hideItem)
            
            let quitItem = NSMenuItem(title: L("–í—ã–π—Ç–∏"), action: #selector(quitApplication), keyEquivalent: "")
            quitItem.target = self
            menu.addItem(quitItem)
            
            statusBarItem.menu = menu
            print("‚úÖ‚úÖ‚úÖ –°–¢–ê–¢–£–° –ë–ê–† –ü–û–õ–ù–û–°–¢–¨–Æ –°–û–ó–î–ê–ù –ò –ù–ê–°–¢–†–û–ï–ù! ‚úÖ‚úÖ‚úÖ")
            print("üîß –ú–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: \(String(describing: statusBarItem.menu))")
            print("üîß –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é: \(menu.items.count)")
            print("üîß Target startItem: \(String(describing: startItem?.target))")
            print("üîß Action startItem: \(String(describing: startItem?.action))")
        } else {
            print("‚ùå‚ùå‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø STATUS BAR! ‚ùå‚ùå‚ùå")
        }
    }
    
    // MARK: - –û–±—ä–µ–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –º–µ–Ω—é
    
    @objc func checkStatus() {
        print("üìäüìäüìä –ú–ï–¢–û–î checkStatus –í–´–ó–í–ê–ù –ò–ó –¢–†–ï–Ø! üìäüìäüìä")
        updateStatusText("üìä –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
        print("üìä –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: üìä –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
    }
    
    
    @objc public func startDaemon() {
        print("üöÄ ========== –ó–ê–ü–£–°–ö DAEMON –ò–ó –¢–†–ï–Ø! ==========")
        updateStatusText("üöÄ –ó–∞–ø—É—Å–∫ daemon –∏–∑ —Ç—Ä–µ—è...")
        
        // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –∫ I2pdManager —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        NotificationCenter.default.post(name: NSNotification.Name("DaemonStartRequest"), object: nil)
        
        // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
        DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
            NotificationCenter.default.post(name: NSNotification.Name("StatusUpdated"), object: nil)
            self.updateStatusText("üéØ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≥–ª–∞–≤–Ω—ã–º –æ–∫–Ω–æ–º")
        }
    }
    
    @objc public func stopDaemon() {
        print("‚èπÔ∏è –û–°–¢–ê–ù–û–í–ö–ê DAEMON –∏–∑ —Ç—Ä–µ—è!")
        updateStatusText("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ daemon –∏–∑ —Ç—Ä–µ—è...")
        
        // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∫ I2pdManager —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        NotificationCenter.default.post(name: NSNotification.Name("DaemonStopRequest"), object: nil)
        
        // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
        DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
            NotificationCenter.default.post(name: NSNotification.Name("StatusUpdated"), object: nil)
            self.updateStatusText("üéØ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≥–ª–∞–≤–Ω—ã–º –æ–∫–Ω–æ–º")
        }
    }
    
    private func checkIfStillRunning() {
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ª–∏ daemon...")
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –∏ –≤ I2pdManager
        let checkCommand = "ps aux | grep \"i2pd.*daemon\" | grep -v \"grep\" | wc -l | tr -d ' '"
        
        let checkProcess = Process()
        checkProcess.executableURL = URL(fileURLWithPath: "/bin/bash")
        checkProcess.arguments = ["-c", checkCommand]
        
        let pipe = Pipe()
        checkProcess.standardOutput = pipe
        
        do {
            try checkProcess.run()
            checkProcess.waitUntilExit()
            
            let data = pipe.fileHandleForReading.readDataToEndOfFile()
            let output = String(data: data, encoding: .utf8) ?? "0"
            let count = Int(output.trimmingCharacters(in: .whitespacesAndNewlines)) ?? 0
            
            if count > 0 {
                print("‚ö†Ô∏è Daemon –≤—Å—ë –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–∏–º–µ–Ω—è–µ–º –∂—ë—Å—Ç–∫—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É...")
                forceStopDaemon()
            } else {
                print("‚úÖ Daemon —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                updateStatusText("‚úÖ Daemon –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                NotificationCenter.default.post(name: NSNotification.Name("DaemonStopped"), object: nil)
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é —Ç—Ä–µ—è
                updateMenuState(isRunning: false)
                DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
                    NotificationCenter.default.post(name: NSNotification.Name("StatusUpdated"), object: nil)
                }
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: \(error)")
            forceStopDaemon()
        }
    }
    
    private func forceStopDaemon() {
        print("üí• –ü—Ä–∏–º–µ–Ω—è–µ–º –∂—ë—Å—Ç–∫—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É...")
        updateStatusText("üí• –ñ—ë—Å—Ç–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞...")
        
        // –ë–ï–ó–û–ü–ê–°–ù–û: —É–±–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å --daemon, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ i2pd
        let forceCommand = "pkill -KILL -f 'i2pd.*--daemon' 2>/dev/null || true"
        
        let forceProcess = Process()
        forceProcess.executableURL = URL(fileURLWithPath: "/bin/bash")
        forceProcess.arguments = ["-c", forceCommand]
        
        do {
            try forceProcess.run()
            updateStatusText("‚úÖ Daemon –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ")
            print("‚úÖ –ñ—ë—Å—Ç–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            
            NotificationCenter.default.post(name: NSNotification.Name("DaemonStopped"), object: nil)
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é —Ç—Ä–µ—è
            updateMenuState(isRunning: false)
            DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
                NotificationCenter.default.post(name: NSNotification.Name("StatusUpdated"), object: nil)
            }
        } catch {
            updateStatusText("‚ùå –û—à–∏–±–∫–∞ –∂—ë—Å—Ç–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            print("‚ùå –û—à–∏–±–∫–∞ –∂—ë—Å—Ç–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: \(error)")
            NotificationCenter.default.post(name: NSNotification.Name("DaemonError"), object: nil)
        }
    }
    
    @objc public func restartDaemon() {
        print("üîÑ –ü–ï–†–ï–ó–ê–ü–£–°–ö DAEMON –∏–∑ —Ç—Ä–µ—è!")
        updateStatusText("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ daemon...")
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        isRestarting = true
        updateMenuState(isRunning: false) // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é —Å —Ñ–ª–∞–≥–æ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –¥–µ–º–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
        
        // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∫ I2pdManager —á–µ—Ä–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        NotificationCenter.default.post(name: NSNotification.Name("DaemonRestartRequest"), object: nil)
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
        DispatchQueue.main.asyncAfter(deadline: .now() + 5) {
            self.isRestarting = false
            self.updateMenuState(isRunning: true) // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –¥–µ–º–æ–Ω –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        }
    }
    
    @objc func openSettings() {
        print("‚öôÔ∏è –û–¢–ö–†–´–¢–ò–ï –ù–ê–°–¢–†–û–ï–ö –∏–∑ —Ç—Ä–µ—è!")
        print("üìã –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω: \(NSApplication.shared.windows.count)")
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        showMainWindow()
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.8) {
            print("üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ OpenSettings...")
            NotificationCenter.default.post(name: NSNotification.Name("OpenSettings"), object: nil)
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ OpenSettings –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        }
        
        updateStatusText("‚öôÔ∏è –û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
        print("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
    }
    
    @objc func openTools() {
        print("üîß –û–¢–ö–†–´–¢–ò–ï –£–¢–ò–õ–ò–¢ –∏–∑ —Ç—Ä–µ—è!")
        print("üìã –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω: \(NSApplication.shared.windows.count)")
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        showMainWindow()
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —É—Ç–∏–ª–∏—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.8) {
            print("üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ OpenTools...")
            NotificationCenter.default.post(name: NSNotification.Name("OpenTools"), object: nil)
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ OpenTools –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        }
        
        updateStatusText("üîß –û—Ç–∫—Ä—ã—Ç–∏–µ —É—Ç–∏–ª–∏—Ç...")
        print("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ —Å —É—Ç–∏–ª–∏—Ç–∞–º–∏")
    }
    
    @objc func openWebConsole() {
        print("üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–µ–±-–∫–æ–Ω—Å–æ–ª—å...")
        if let url = URL(string: "http://127.0.0.1:7070") {
            NSWorkspace.shared.open(url)
            updateStatusText("üåê –í–µ–±-–∫–æ–Ω—Å–æ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞")
        } else {
            updateStatusText("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–∫–æ–Ω—Å–æ–ª–∏")
        }
    }
    
    @objc func showMainWindow() {
        print("‚öôÔ∏è –ü–û–ö–ê–ó –û–ö–ù–ê –∏–∑ —Ç—Ä–µ—è!")
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–∏—Ç–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        for window in NSApplication.shared.windows {
            window.makeKeyAndOrderFront(nil)
            // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –æ–∫–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–µ–ª–µ–≥–∞—Ç
            if window.delegate === nil || !(window.delegate is WindowCloseDelegate) {
                window.delegate = WindowCloseDelegate.shared
            }
        }
        NSApplication.shared.activate(ignoringOtherApps: true)
        self.updateStatusText("‚öôÔ∏è –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ")
        print("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ")
    }
    
    @objc func hideMainWindow() {
        print("‚ùå –°–í–û–†–ê–ß–ò–í–ê–ù–ò–ï –í –¢–†–ï–ô –∏–∑ —Ç—Ä–µ—è!")
        for window in NSApplication.shared.windows {
            window.orderOut(nil)
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ accessory —Ä–µ–∂–∏–º –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞
        let hideFromDock = UserDefaults.standard.bool(forKey: "hideFromDock")
        if hideFromDock {
            NSApplication.shared.setActivationPolicy(.accessory)
        }
        
        updateStatusText("üì± –°–≤–µ—Ä–Ω—É—Ç–æ –≤ —Ç—Ä–µ–π")
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ –≤ —Ç—Ä–µ–π")
    }
    
    @objc public func quitApplication() {
        print("üö™üö™üö™ –ü–õ–ê–í–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø! –§–£–ù–ö–¶–ò–Ø –í–´–ó–í–ê–ù–ê! üö™üö™üö™")
        print("üì¢ –í—Ä–µ–º—è –≤—ã–∑–æ–≤–∞: \(Date())")
        updateStatusText("üö™ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–º–æ–Ω–∞ –∏ –≤—ã—Ö–æ–¥...")
        
        // –°–ò–ù–•–†–û–ù–ù–ê–Ø –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–º–æ–Ω–∞ - –±–µ–∑ async –æ–ø–µ—Ä–∞—Ü–∏–π
        print("üîç –ò—â–µ–º –¥–µ–º–æ–Ω –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        let findAndKillCommand = """
        DEMON_PID=$(ps aux | grep "i2pd.*daemon" | grep -v grep | awk '{print $2}' | head -1)
        if [ -n "$DEMON_PID" ]; then
            echo "‚úÖ –ù–∞–π–¥–µ–Ω –¥–µ–º–æ–Ω —Å PID: $DEMON_PID"
            kill -s INT $DEMON_PID 2>/dev/null
            echo "‚úÖ –î–µ–º–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"
            sleep 0.5
        else
            echo "‚ÑπÔ∏è –î–µ–º–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
        """
        
        let killProcess = Process()
        killProcess.executableURL = URL(fileURLWithPath: "/bin/bash")
        killProcess.arguments = ["-c", findAndKillCommand]
        
        do {
            print("üíÄ –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –¥–µ–º–æ–Ω–∞...")
            try killProcess.run()
            killProcess.waitUntilExit()
            print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ–∫–Ω–∞ (–≤–∫–ª—é—á–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏) –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
            print("üö™ –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ–∫–Ω–∞ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º...")
            for window in NSApplication.shared.windows {
                window.close()
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            WindowCloseDelegate.isSettingsOpen = false
            
            // –î–∞—ë–º –≤—Ä–µ–º—è –æ–∫–Ω–∞–º –∑–∞–∫—Ä—ã—Ç—å—Å—è, –∑–∞—Ç–µ–º –∑–∞–≤–µ—Ä—à–∞–µ–º
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                print("üö™ –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
                NSApplication.shared.terminate(nil)
            }
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–µ–º–æ–Ω–∞: \(error)")
            
            // –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ–∫–Ω–∞
            for window in NSApplication.shared.windows {
                window.close()
            }
            WindowCloseDelegate.isSettingsOpen = false
            
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                NSApplication.shared.terminate(nil)
            }
        }
    }
    
    private func updateStatusText(_ text: String) {
        statusItem?.title = text
        print("üì± –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ—è: \(text)")
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Ç—Ä–µ—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–º–æ–Ω–∞
    private func updateTrayIcon(isRunning: Bool) {
        guard let statusBarItem = statusBarItem else { return }
        
        let symbolName = isRunning ? "theatermasks.fill" : "theatermasks"
        if let image = NSImage(systemSymbolName: symbolName, accessibilityDescription: "I2P Daemon") {
            image.size = NSSize(width: 18, height: 18)
            statusBarItem.button?.image = image
            print("üé≠ –ò–∫–æ–Ω–∫–∞ —Ç—Ä–µ—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: \(isRunning ? "–∞–∫—Ç–∏–≤–Ω–∞ (fill)" : "–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞")")
        }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–µ–º–æ–Ω–∞
    func updateMenuState(isRunning: Bool) {
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Ç—Ä–µ—è
            self.updateTrayIcon(isRunning: isRunning)
            
            if isRunning {
                // –î–µ–º–æ–Ω –∑–∞–ø—É—â–µ–Ω - –≥–∞–ª–æ—á–∫–∞ –Ω–∞ "–ó–∞–ø—É—Å—Ç–∏—Ç—å daemon" (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
                self.startItem?.title = "‚úì " + L("–ó–∞–ø—É—Å—Ç–∏—Ç—å daemon") // –ì–∞–ª–æ—á–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –∑–∞–ø—É—â–µ–Ω
                self.stopItem?.title = L("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å daemon")
                self.restartItem?.title = L("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å daemon") // –ë–µ–∑ –≥–∞–ª–æ—á–∫–∏ –∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è
                self.statusItem?.title = L("–°—Ç–∞—Ç—É—Å: –ó–∞–ø—É—â–µ–Ω")
            } else {
                // –î–µ–º–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –≥–∞–ª–æ—á–∫–∞ –Ω–∞ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å daemon" (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
                self.startItem?.title = L("–ó–∞–ø—É—Å—Ç–∏—Ç—å daemon")
                self.stopItem?.title = "‚úì " + L("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å daemon") // –ì–∞–ª–æ—á–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                self.restartItem?.title = L("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å daemon") // –ë–µ–∑ –≥–∞–ª–æ—á–∫–∏ –∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è
                self.statusItem?.title = L("–°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            }
            
            // –ï—Å–ª–∏ –∏–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–æ—á–∫—É –Ω–∞ "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å daemon"
            if self.isRestarting {
                self.restartItem?.title = "‚úì " + L("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å daemon") // –ì–∞–ª–æ—á–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
                self.statusItem?.title = L("–°—Ç–∞—Ç—É—Å: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
            }
            
            print("üè∑Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é —Ç—Ä–µ—è: –¥–µ–º–æ–Ω \(isRunning ? "–∑–∞–ø—É—â–µ–Ω" : "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"), –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫: \(self.isRestarting)")
        }
    }
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–ª–∞–≥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∏–∑–≤–Ω–µ
    func setRestarting(_ restarting: Bool) {
        isRestarting = restarting
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–º–æ–Ω–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    func checkInitialDaemonStatus() {
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–µ–º–æ–Ω–∞ –¥–ª—è —Ç—Ä–µ—è...")
        let checkProcess = Process()
        checkProcess.executableURL = URL(fileURLWithPath: "/bin/bash")
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ –∏ –≤ I2pdManager.checkDaemonStatus()
        checkProcess.arguments = ["-c", "ps aux | grep \"i2pd.*daemon\" | grep -v \"grep\" | wc -l | tr -d ' '"]
        
        let pipe = Pipe()
        checkProcess.standardOutput = pipe
        
        do {
            try checkProcess.run()
            checkProcess.waitUntilExit()
            
            let data = pipe.fileHandleForReading.readDataToEndOfFile()
            let output = String(data: data, encoding: .utf8) ?? "0"
            let count = Int(output.trimmingCharacters(in: .whitespacesAndNewlines)) ?? 0
            
            let isRunning = count > 0
            print("üé≠ –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–µ–º–æ–Ω–∞: \(isRunning ? "–∑–∞–ø—É—â–µ–Ω" : "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω") (–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: \(count))")
            
            DispatchQueue.main.async { [weak self] in
                self?.updateMenuState(isRunning: isRunning)
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞: \(error)")
        }
    }
}

