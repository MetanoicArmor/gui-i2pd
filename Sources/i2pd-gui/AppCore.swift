import SwiftUI
import Foundation
import AppKit

// MARK: - Window Close Delegate –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
class WindowCloseDelegate: NSObject, NSWindowDelegate {
    static let shared = WindowCloseDelegate()
    
    func windowShouldClose(_ sender: NSWindow) -> Bool {
        print("üö™ –û–∫–Ω–æ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—å—Å—è - –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–ª–∞–≤–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ!")
        
        // –í—ã–∑—ã–≤–∞–µ–º –ø–ª–∞–≤–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ —Ç—Ä–µ–π
        TrayManager.shared.quitApplication()
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        return false
    }
}

// MARK: - App Delegate –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class AppDelegate: NSObject, NSApplicationDelegate, NSWindowDelegate {
    
    override init() {
        super.init()
        setupGlobalQuitHandler()
    }
    
    private func setupGlobalQuitHandler() {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        NSApplication.shared.windows.first?.delegate = self
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è NSApp
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(applicationWillTerminate(_:)),
            name: NSApplication.willTerminateNotification,
            object: nil
        )
    }
    
    @objc func applicationWillTerminate(_ notification: Notification) {
        print("üö™üö™üö™ AppDelegate.applicationWillTerminate –í–´–ó–í–ê–ù! üö™üö™üö™")
        
        // –í—ã–∑—ã–≤–∞–µ–º –°–ò–ù–•–†–û–ù–ù–£–Æ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –¥–µ–º–æ–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ recursion)
        let findAndKillCommand = """
        DEMON_PID=$(ps aux | grep "i2pd.*daemon" | grep -v grep | awk '{print $2}' | head -1)
        if [ -n "$DEMON_PID" ]; then
            echo "‚úÖ –ù–∞–π–¥–µ–Ω –¥–µ–º–æ–Ω —Å PID: $DEMON_PID"
            kill -s INT $DEMON_PID 2>/dev/null
            echo "‚úÖ –î–µ–º–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ AppDelegate"
            sleep 0.3
        else
            echo "‚ÑπÔ∏è –î–µ–º–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
        """
        
        let killProcess = Process()
        killProcess.executableURL = URL(fileURLWithPath: "/bin/bash")
        killProcess.arguments = ["-c", findAndKillCommand]
        
        do {
            print("üíÄ AppDelegate: –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –¥–µ–º–æ–Ω–∞...")
            try killProcess.run()
            killProcess.waitUntilExit()
            print("‚úÖ AppDelegate: –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        } catch {
            print("‚ùå AppDelegate: –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–µ–º–æ–Ω–∞: \(error)")
        }
        
        print("üö™ AppDelegate –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")
    }
}

// MARK: - Tray Manager Singleton  
class TrayManager: NSObject, ObservableObject {
    static let shared = TrayManager()
    private var statusBarItem: NSStatusItem?
    private var appDelegate: AppDelegate?
    
    // –°—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    private var statusItem: NSMenuItem?
    private var startItem: NSMenuItem?
    private var stopItem: NSMenuItem?
    
    private override init() {
        super.init()
        setupStatusBar()
        
        // –°–æ–∑–¥–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–ª–µ–≥–∞—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        appDelegate = AppDelegate()
        NSApp.delegate = appDelegate
    }
    
    private func setupStatusBar() {
        statusBarItem = NSStatusBar.system.statusItem(withLength: NSStatusItem.variableLength)
        
        if let statusBarItem = statusBarItem {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∏–∫–æ–Ω–∫—É —Ç—Ä–µ—è –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—É—é –∫–∞–∫ fallback
            var image: NSImage?
            
            // –¢–µ–∞—Ç—Ä–∞–ª—å–Ω—ã–µ –º–∞—Å–∫–∏ –∏–∑ SF Symbols 7 - —Å–∏–º–≤–æ–ª–∏—á–Ω–æ –¥–ª—è I2P (–∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å/—Ç—Ä–∞–≥–µ–¥–∏—è)
            image = NSImage(systemSymbolName: "theatermasks.fill", accessibilityDescription: "I2P Daemon")
            print("üé≠ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ–∞—Ç—Ä–∞–ª—å–Ω—ã–µ –º–∞—Å–∫–∏ –¥–ª—è —Ç—Ä–µ—è")
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
            if let image = image {
                image.size = NSSize(width: 18, height: 18)
                print("üìè –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: 18x18 –ø–∏–∫—Å–µ–ª–µ–π")
            }
            
            statusBarItem.button?.image = image
            
            let menu = NSMenu()
            
            // –°—Ç–∞—Ç—É—Å
            statusItem = NSMenuItem(title: "–°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤", action: #selector(checkStatus), keyEquivalent: "")
            statusItem?.target = self
            menu.addItem(statusItem!)
            menu.addItem(NSMenuItem.separator())
            
            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ daemon - —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            let startAction = #selector(TrayManager.startDaemon)
            print("üîß –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è start: \(String(describing: startAction))")
            
            startItem = NSMenuItem(title: "–ó–∞–ø—É—Å—Ç–∏—Ç—å daemon", action: startAction, keyEquivalent: "")
            startItem?.target = self
            startItem?.tag = 1
            print("üîß startItem —Å–æ–∑–¥–∞–Ω —Å target: \(String(describing: startItem?.target)), action: \(String(describing: startItem?.action))")
            menu.addItem(startItem!)
            
            stopItem = NSMenuItem(title: "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å daemon", action: #selector(stopDaemon), keyEquivalent: "")
            stopItem?.target = self
            stopItem?.tag = 2
            print("üîß stopItem —Å–æ–∑–¥–∞–Ω —Å target: \(String(describing: stopItem?.target)), action: \(String(describing: stopItem?.action))")
            menu.addItem(stopItem!)
            
            let restartItem = NSMenuItem(title: "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å daemon", action: #selector(restartDaemon), keyEquivalent: "")
            restartItem.target = self
            restartItem.tag = 3
            print("üîß restartItem —Å–æ–∑–¥–∞–Ω —Å target: \(String(describing: restartItem.target)), action: \(String(describing: restartItem.action))")
            menu.addItem(restartItem)
            menu.addItem(NSMenuItem.separator())
            
            // –§—É–Ω–∫—Ü–∏–∏
            let settingsItem = NSMenuItem(title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", action: #selector(openSettings), keyEquivalent: ",")
            settingsItem.target = self
            print("üîß –°–æ–∑–¥–∞–Ω settingsItem —Å target: \(String(describing: settingsItem.target)), action: \(String(describing: settingsItem.action))")
            menu.addItem(settingsItem)
            
            let webItem = NSMenuItem(title: "–í–µ–±-–∫–æ–Ω—Å–æ–ª—å", action: #selector(openWebConsole), keyEquivalent: "")
            webItem.target = self
            menu.addItem(webItem)
            
            let showItem = NSMenuItem(title: "–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ", action: #selector(showMainWindow), keyEquivalent: "")
            showItem.target = self
            menu.addItem(showItem)
            menu.addItem(NSMenuItem.separator())
            
            let hideItem = NSMenuItem(title: "–°–≤–µ—Ä–Ω—É—Ç—å –≤ —Ç—Ä–µ–π", action: #selector(hideMainWindow), keyEquivalent: "")
            hideItem.target = self
            menu.addItem(hideItem)
            
            let quitItem = NSMenuItem(title: "–í—ã–π—Ç–∏", action: #selector(quitApplication), keyEquivalent: "")
            quitItem.target = self
            menu.addItem(quitItem)
            
            statusBarItem.menu = menu
            print("‚úÖ –°—Ç–∞—Ç—É—Å –±–∞—Ä —Å–æ–∑–¥–∞–Ω")
        }
    }
    
    // MARK: - –û–±—ä–µ–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –º–µ–Ω—é
    
    @objc private func checkStatus() {
        print("üìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è...")
        updateStatusText("üìä –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
    }
    
    
    @objc public func startDaemon() {
        print("üöÄ ========== –ó–ê–ü–£–°–ö DAEMON –ò–ó –¢–†–ï–Ø! ==========")
        updateStatusText("üöÄ –ó–∞–ø—É—Å–∫ daemon –∏–∑ —Ç—Ä–µ—è...")
        
        // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –∫ I2pdManager —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        NotificationCenter.default.post(name: NSNotification.Name("DaemonStartRequest"), object: nil)
        
        // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
        DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
            NotificationCenter.default.post(name: NSNotification.Name("StatusUpdated"), object: nil)
            self.updateStatusText("üéØ –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≥–ª–∞–≤–Ω—ã–º –æ–∫–Ω–æ–º")
        }
    }
    
    @objc public func stopDaemon() {
        print("‚èπÔ∏è –û–°–¢–ê–ù–û–í–ö–ê DAEMON –∏–∑ —Ç—Ä–µ—è!")
        updateStatusText("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ daemon –∏–∑ —Ç—Ä–µ—è...")
        
        // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫—É –∫ I2pdManager —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        NotificationCenter.default.post(name: NSNotification.Name("DaemonStopRequest"), object: nil)
        
        // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
        DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
            NotificationCenter.default.post(name: NSNotification.Name("StatusUpdated"), object: nil)
            self.updateStatusText("üéØ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≥–ª–∞–≤–Ω—ã–º –æ–∫–Ω–æ–º")
        }
    }
    
    private func checkIfStillRunning() {
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ª–∏ daemon...")
        let checkCommand = "pgrep -x i2pd | wc -l"
        
        let checkProcess = Process()
        checkProcess.executableURL = URL(fileURLWithPath: "/bin/bash")
        checkProcess.arguments = ["-c", checkCommand]
        
        let pipe = Pipe()
        checkProcess.standardOutput = pipe
        
        do {
            try checkProcess.run()
            checkProcess.waitUntilExit()
            
            let data = pipe.fileHandleForReading.readDataToEndOfFile()
            let output = String(data: data, encoding: .utf8) ?? "0"
            let count = Int(output.trimmingCharacters(in: .whitespacesAndNewlines)) ?? 0
            
            if count > 0 {
                print("‚ö†Ô∏è Daemon –≤—Å—ë –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–∏–º–µ–Ω—è–µ–º –∂—ë—Å—Ç–∫—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É...")
                forceStopDaemon()
            } else {
                print("‚úÖ Daemon —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                updateStatusText("‚úÖ Daemon –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                NotificationCenter.default.post(name: NSNotification.Name("DaemonStopped"), object: nil)
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é —Ç—Ä–µ—è
                updateMenuState(isRunning: false)
                DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
                    NotificationCenter.default.post(name: NSNotification.Name("StatusUpdated"), object: nil)
                }
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: \(error)")
            forceStopDaemon()
        }
    }
    
    private func forceStopDaemon() {
        print("üí• –ü—Ä–∏–º–µ–Ω—è–µ–º –∂—ë—Å—Ç–∫—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É...")
        updateStatusText("üí• –ñ—ë—Å—Ç–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞...")
        
        let forceCommand = "pkill -KILL i2pd 2>/dev/null || killall -KILL i2pd 2>/dev/null || true"
        
        let forceProcess = Process()
        forceProcess.executableURL = URL(fileURLWithPath: "/bin/bash")
        forceProcess.arguments = ["-c", forceCommand]
        
        do {
            try forceProcess.run()
            updateStatusText("‚úÖ Daemon –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ")
            print("‚úÖ –ñ—ë—Å—Ç–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            
            NotificationCenter.default.post(name: NSNotification.Name("DaemonStopped"), object: nil)
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é —Ç—Ä–µ—è
            updateMenuState(isRunning: false)
            DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
                NotificationCenter.default.post(name: NSNotification.Name("StatusUpdated"), object: nil)
            }
        } catch {
            updateStatusText("‚ùå –û—à–∏–±–∫–∞ –∂—ë—Å—Ç–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            print("‚ùå –û—à–∏–±–∫–∞ –∂—ë—Å—Ç–∫–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: \(error)")
            NotificationCenter.default.post(name: NSNotification.Name("DaemonError"), object: nil)
        }
    }
    
    @objc public func restartDaemon() {
        print("üîÑ –ü–ï–†–ï–ó–ê–ü–£–°–ö DAEMON –∏–∑ —Ç—Ä–µ—è!")
        updateStatusText("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ daemon...")
        stopDaemon()
        DispatchQueue.main.asyncAfter(deadline: .now() + 3) {
            self.startDaemon()
        }
    }
    
    @objc private func openSettings() {
        print("‚öôÔ∏è –û–¢–ö–†–´–¢–ò–ï –ù–ê–°–¢–†–û–ï–ö –∏–∑ —Ç—Ä–µ—è!")
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
        showMainWindow()
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –≥–ª–∞–≤–Ω–æ–º –æ–∫–Ω–µ
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            NotificationCenter.default.post(name: NSNotification.Name("OpenSettings"), object: nil)
        }
        
        updateStatusText("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–∫—Ä—ã—Ç—ã")
        print("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
    }
    
    // –ú–µ—Ç–æ–¥ showSimpleSettingsWindow —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    
    private func openConfigFolder() {
        print("üìÅ –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        let configPath = NSHomeDirectory() + "/.i2pd"
        let url = URL(fileURLWithPath: configPath)
        
        if FileManager.default.fileExists(atPath: configPath) {
            NSWorkspace.shared.open(url)
            updateStatusText("üìÅ –ü–∞–ø–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∞")
        } else {
            try? FileManager.default.createDirectory(at: url, withIntermediateDirectories: true)
            NSWorkspace.shared.open(url)
            updateStatusText("üìÅ –ü–∞–ø–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∞")
        }
    }
    
    @objc func openWebConsole() {
        print("üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–µ–±-–∫–æ–Ω—Å–æ–ª—å...")
        if let url = URL(string: "http://127.0.0.1:7070") {
            NSWorkspace.shared.open(url)
            updateStatusText("üåê –í–µ–±-–∫–æ–Ω—Å–æ–ª—å –æ—Ç–∫—Ä—ã—Ç–∞")
        }
    }
    
    private func showSettingsWindow() {
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
            let alert = NSAlert()
            alert.messageText = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ I2P GUI"
            alert.informativeText = """
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
            
            üé® –¢–µ–º–Ω–∞—è —Ç–µ–º–∞: –í–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            üìÅ –ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ~/.i2pd/
            üåê –í–µ–±-–∫–æ–Ω—Å–æ–ª—å: http://127.0.0.1:7070
            üîß –ë–∏–Ω–∞—Ä–Ω–∏–∫ i2pd: –í—Å—Ç—Ä–æ–µ–Ω –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            
            –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä:
            ~/.i2pd/i2pd.conf
            
            üìÅ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            """
            
            alert.addButton(withTitle: "üìÅ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            alert.addButton(withTitle: "üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–∫–æ–Ω—Å–æ–ª—å") 
            alert.addButton(withTitle: "‚ùå –ó–∞–∫—Ä—ã—Ç—å")
            
            let response = alert.runModal()
            
            switch response {
            case .alertFirstButtonReturn:
                self.openConfigFolder()
            case .alertSecondButtonReturn:
                self.openWebConsole()
            default:
                break
            }
        }
        
        updateStatusText("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞–∑–∞–Ω—ã")
    }
    
    // –£–±—Ä–∞–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è –±–ª–æ–∫
    
    @objc func showMainWindow() {
        print("‚öôÔ∏è –ü–û–ö–ê–ó –û–ö–ù–ê –∏–∑ —Ç—Ä–µ—è!")
        for window in NSApplication.shared.windows {
            window.makeKeyAndOrderFront(nil)
        }
        NSApplication.shared.activate(ignoringOtherApps: true)
        updateStatusText("‚öôÔ∏è –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã—Ç–æ")
        print("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∫–∞–∑–∞–Ω–æ")
    }
    
    @objc func hideMainWindow() {
        print("‚ùå –°–í–û–†–ê–ß–ò–í–ê–ù–ò–ï –í –¢–†–ï–ô –∏–∑ —Ç—Ä–µ—è!")
        for window in NSApplication.shared.windows {
            window.orderOut(nil)
        }
        updateStatusText("üì± –°–≤–µ—Ä–Ω—É—Ç–æ –≤ —Ç—Ä–µ–π")
        print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ –≤ —Ç—Ä–µ–π")
    }
    
    @objc public func quitApplication() {
        print("üö™üö™üö™ –ü–õ–ê–í–ù–û–ï –ó–ê–ö–†–´–¢–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø! –§–£–ù–ö–¶–ò–Ø –í–´–ó–í–ê–ù–ê! üö™üö™üö™")
        print("üì¢ –í—Ä–µ–º—è –≤—ã–∑–æ–≤–∞: \(Date())")
        updateStatusText("üö™ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–º–æ–Ω–∞ –∏ –≤—ã—Ö–æ–¥...")
        
        // –°–ò–ù–•–†–û–ù–ù–ê–Ø –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–º–æ–Ω–∞ - –±–µ–∑ async –æ–ø–µ—Ä–∞—Ü–∏–π
        print("üîç –ò—â–µ–º –¥–µ–º–æ–Ω –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        let findAndKillCommand = """
        DEMON_PID=$(ps aux | grep "i2pd.*daemon" | grep -v grep | awk '{print $2}' | head -1)
        if [ -n "$DEMON_PID" ]; then
            echo "‚úÖ –ù–∞–π–¥–µ–Ω –¥–µ–º–æ–Ω —Å PID: $DEMON_PID"
            kill -s INT $DEMON_PID 2>/dev/null
            echo "‚úÖ –î–µ–º–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"
            sleep 0.5
        else
            echo "‚ÑπÔ∏è –î–µ–º–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
        """
        
        let killProcess = Process()
        killProcess.executableURL = URL(fileURLWithPath: "/bin/bash")
        killProcess.arguments = ["-c", findAndKillCommand]
        
        do {
            print("üíÄ –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –¥–µ–º–æ–Ω–∞...")
            try killProcess.run()
            killProcess.waitUntilExit()
            print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
            // –¢–µ–ø–µ—Ä—å –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            print("üö™ –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...")
            NSApplication.shared.terminate(nil)
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–µ–º–æ–Ω–∞: \(error)")
            NSApplication.shared.terminate(nil)
        }
    }
    
    private func updateStatusText(_ text: String) {
        statusItem?.title = text
        print("üì± –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ—è: \(text)")
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–µ–º–æ–Ω–∞
    func updateMenuState(isRunning: Bool) {
        DispatchQueue.main.async { [weak self] in
            guard let self = self else { return }
            
            if isRunning {
                // –î–µ–º–æ–Ω –∑–∞–ø—É—â–µ–Ω
                self.startItem?.title = "‚úì –ó–∞–ø—É—Å—Ç–∏—Ç—å daemon" // –î–æ–±–∞–≤–ª—è–µ–º –≥–∞–ª–æ—á–∫—É
                self.stopItem?.title = "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å daemon"
                self.statusItem?.title = "–°—Ç–∞—Ç—É—Å: –ó–∞–ø—É—â–µ–Ω"
            } else {
                // –î–µ–º–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                self.startItem?.title = "–ó–∞–ø—É—Å—Ç–∏—Ç—å daemon"
                self.stopItem?.title = "‚úì –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å daemon" // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
                self.statusItem?.title = "–°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            }
            
            print("üè∑Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é —Ç—Ä–µ—è: –¥–µ–º–æ–Ω \(isRunning ? "–∑–∞–ø—É—â–µ–Ω" : "–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")")
        }
    }
}

// MARK: - Menu Target Helper
class MenuTarget: NSObject {
    private let action: () -> Void
    
    init(action: @escaping () -> Void) {
        self.action = action
        super.init()
    }
    
    @objc func performAction() {
        print("üéØ MenuTarget.performAction –≤—ã–∑–≤–∞–Ω!")
        action()
    }
}

// MARK: - App Entry Point
@main
struct I2pdGUIApp: App {
    @AppStorage("darkMode") private var darkMode = true
    @State private var showingSettings = false
    
    init() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ UserDefaults –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if UserDefaults.standard.object(forKey: "darkMode") == nil {
            UserDefaults.standard.set(true, forKey: "darkMode")
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Ç—Ä–µ—è
        _ = TrayManager.shared
    }
    
    var body: some Scene {
        WindowGroup {
            ContentView()
        }
        .windowStyle(.hiddenTitleBar)
        .defaultSize(width: 800, height: 1000)
        .windowResizability(.contentMinSize)
        .handlesExternalEvents(matching: ["quit"])
        
        // Settings —É–±—Ä–∞–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º NSAlert –∏–∑ —Ç—Ä–µ—è
        
        .commands {
            CommandGroup(after: .windowArrangement) {
                Button("–°–≤–µ—Ä–Ω—É—Ç—å –≤ —Ç—Ä–µ–π (‚åòH)") {
                    TrayManager.shared.hideMainWindow()
                }
                .keyboardShortcut("h", modifiers: [.command])
                
                Button("–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ") {
                    TrayManager.shared.showMainWindow()
                }
                .keyboardShortcut("w", modifiers: [.command])
                
                Button("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ (‚åò,)") {
                    NotificationCenter.default.post(name: NSNotification.Name("OpenSettings"), object: nil)
                }
                .keyboardShortcut(",", modifiers: [.command])
            }
            
        }
    }
}

// MARK: - –£–±—Ä–∞–Ω–∞ SettingsWindowView (–∏—Å–ø–æ–ª—å–∑—É–µ–º NSAlert –≤–º–µ—Å—Ç–æ –Ω–µ—ë)

// MARK: - Main Content View
struct ContentView: View {
    @StateObject private var i2pdManager = I2pdManager()
    @State private var showingSettings = false
    
    
    var body: some View {
        VStack(spacing: 16) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–æ–ø—É—â–µ–Ω –Ω–∏–∂–µ)
            Text("I2P Daemon GUI")
                .font(.title)
                .fontWeight(.semibold)
                .foregroundColor(.primary)
                .lineLimit(1)
                .minimumScaleFactor(0.8)
                .padding(.top, 8)
            
            // –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
            StatusCard(
                isRunning: i2pdManager.isRunning,
                uptime: i2pdManager.uptime,
                peers: i2pdManager.peerCount
            )
            .padding(.horizontal, 8)
            
            // –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å–µ—Ç–µ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –≤—Å–µ–≥–¥–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞
            VStack(spacing: 2) {
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
                HStack {
                    Image(systemName: "chart.bar.fill")
                        .font(.system(size: 16, weight: .medium))
                        .foregroundColor(.orange)
                    Text("üìä –°–µ—Ç–µ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                        .font(.headline)
                        .fontWeight(.semibold)
                    Spacer()
                    Button("‚öôÔ∏è") {
                        showingSettings = true
                    }
                    .buttonStyle(.borderless)
                    .help("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
                    
                    Button("üîÑ") {
                        i2pdManager.getExtendedStats()
                    }
                    .disabled(!i2pdManager.isRunning)
                    .buttonStyle(.borderless)
                    .help("–û–±–Ω–æ–≤–∏—Ç—å")
                }
                .padding(.horizontal, 20)
                .padding(.vertical, 8)
                .background(Color(NSColor.controlBackgroundColor))
                .cornerRadius(12)
                
                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ - –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞
                HStack(spacing: 16) {
                    HStack(spacing: 6) {
                        Image(systemName: "arrow.down.circle.fill")
                            .foregroundColor(.green)
                            .font(.caption)
                        Text("–ü–æ–ª—É—á–µ–Ω–æ: \(i2pdManager.receivedBytes)")
                            .font(.caption)
                    }
                    
                    HStack(spacing: 6) {
                        Image(systemName: "arrow.up.circle.fill")
                            .foregroundColor(.blue)
                            .font(.caption)
                        Text("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: \(i2pdManager.sentBytes)")
                            .font(.caption)
                    }
                    
                    Spacer()
                    
                    HStack(spacing: 6) {
                        Image(systemName: "lock.fill")
                            .foregroundColor(.purple)
                            .font(.caption)
                        Text("–¢—É–Ω–Ω–µ–ª–∏: \(i2pdManager.activeTunnels)")
                            .font(.caption)
                    }
                    
                    HStack(spacing: 6) {
                        Image(systemName: "wifi")
                            .foregroundColor(.orange)
                            .font(.caption)
                        Text("–†–æ—É—Ç–µ—Ä—ã: \(i2pdManager.peerCount)")
                            .font(.caption)
                    }
                }
                .padding(.horizontal, 20)
                .padding(.vertical, 4)
            }
            .padding(.horizontal, 8)
            
            // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            ControlButtons(
                i2pdManager: i2pdManager,
                showingSettings: $showingSettings,
            )
            .padding(.horizontal, 8)
            
            // –°–µ–∫—Ü–∏—è –ª–æ–≥–æ–≤ - –≤—Å–µ–≥–¥–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞
            VStack(spacing: 2) {
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
                HStack {
                    Image(systemName: "doc.text")
                        .font(.system(size: 16, weight: .medium))
                        .foregroundColor(.blue)
                    Text("üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã")
                        .font(.headline)
                        .fontWeight(.semibold)
                    Spacer()
                    if !i2pdManager.logs.isEmpty {
                        Button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å") {
                            i2pdManager.clearLogs()
                        }
                        .buttonStyle(.bordered)
                        .controlSize(.small)
                    }
                }
                .padding(.horizontal, 20)
                .padding(.vertical, 8)
                .background(Color(NSColor.controlBackgroundColor))
                .cornerRadius(12)
                
                // –õ–æ–≥–∏ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ
                ScrollView {
                    VStack(alignment: .leading, spacing: 3) {
                        ForEach(i2pdManager.logs.prefix(30), id: \.id) { log in
                            HStack(spacing: 8) {
                                Text(log.timestamp.formatted(.dateTime.hour().minute().second()))
                                    .font(.caption2)
                                    .foregroundColor(.secondary)
                                    .frame(width: 50, alignment: .leading)
                                
                                Text(log.level.rawValue)
                                    .font(.caption2)
                                    .padding(.horizontal, 4)
                                    .padding(.vertical, 1)
                                    .background(log.level == .error ? Color.red : (log.level == .warn ? Color.orange : Color.blue))
                                    .foregroundColor(.white)
                                    .cornerRadius(2)
                                    .frame(width: 60, alignment: .center)
                                
                                Text(log.message)
                                    .font(.caption2)
                                    .frame(maxWidth: .infinity, alignment: .leading)
                                    .lineLimit(nil)
                                    .multilineTextAlignment(.leading)
                            }
                            .padding(.horizontal, 20)
                            .padding(.vertical, 1)
                        }
                        
                        if i2pdManager.logs.isEmpty {
                    VStack(spacing: 8) {
                        Image(systemName: "doc.text")
                                    .font(.system(size: 24))
                            .foregroundColor(.secondary)
                                Text("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                                Text("–õ–æ–≥–∏ –ø–æ—è–≤—è—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–µ–º–æ–Ω–∞")
                                    .font(.caption)
                            .foregroundColor(.secondary)
                    }
                    .frame(maxWidth: .infinity)
                    .padding(.vertical, 40)
                }
                    }
                }
                .frame(minHeight: 250, maxHeight: 400) // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –ª–æ–≥–æ–≤ –¥–ª—è –±–æ–ª—å—à–∏—Ö —ç–∫—Ä–∞–Ω–æ–≤
            }
            .padding(.horizontal, 20) // –ë–æ–ª—å—à–µ –º–µ—Å—Ç–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏
            
            // –í–µ—Ä—Å–∏—è –¥–µ–º–æ–Ω–∞ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
            Text("i2pd v2.58.0")
                .font(.system(size: 9))
                .foregroundColor(.primary.opacity(0.7))
                .frame(maxWidth: .infinity, alignment: .trailing)
                .padding(.trailing, 12)
                .padding(.bottom, 8)
        }
        .frame(minWidth: 650, maxWidth: .infinity, minHeight: 600, maxHeight: .infinity)
        .frame(maxWidth: 950) // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
        .onAppear {
            i2pdManager.checkStatus()
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                applyTheme()
                i2pdManager.getExtendedStats()
            }
        }
        .sheet(isPresented: $showingSettings) {
            SettingsView(i2pdManager: i2pdManager)
        }
        .onReceive(NotificationCenter.default.publisher(for: NSNotification.Name("OpenSettings"))) { _ in
            showingSettings = true
        }
        .onReceive(NotificationCenter.default.publisher(for: NSNotification.Name("CloseSettings"))) { _ in
            showingSettings = false
        }
        .onReceive(NotificationCenter.default.publisher(for: NSNotification.Name("DaemonStartRequest"))) { _ in
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ–Ω–∞ –∏–∑ —Ç—Ä–µ—è
            print("üöÄ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∑–∞–ø—É—Å–∫–∞ –¥–µ–º–æ–Ω–∞ –∏–∑ —Ç—Ä–µ—è")
            if !i2pdManager.isRunning {
                i2pdManager.startDaemon()
            }
        }
        .onReceive(NotificationCenter.default.publisher(for: NSNotification.Name("DaemonStopRequest"))) { _ in
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–µ–º–æ–Ω–∞ –∏–∑ —Ç—Ä–µ—è
            print("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–µ–º–æ–Ω–∞ –∏–∑ —Ç—Ä–µ—è")
            if i2pdManager.isRunning {
                i2pdManager.stopDaemon()
            }
        }
        .onReceive(NotificationCenter.default.publisher(for: NSNotification.Name("NSApplicationWillTerminate"))) { _ in
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–º–æ–Ω –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ I2pdManager
            if i2pdManager.isRunning {
                i2pdManager.stopDaemon()
            }
        }
        .overlay {
            if i2pdManager.isLoading {
                HStack {
                    ProgressView()
                        .scaleEffect(0.6)
                    Text("–ó–∞–≥—Ä—É–∑–∫–∞...")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
                .padding(.horizontal, 12)
                .padding(.vertical, 6)
                .background(Color(NSColor.windowBackgroundColor))
                .cornerRadius(8)
                .shadow(radius: 2)
                .padding(.bottom, 20)
            }
        }
    }
    
    private func applyTheme() {
        let isDarkMode = UserDefaults.standard.bool(forKey: "darkMode")
        if isDarkMode {
            NSApp.appearance = NSAppearance(named: .darkAqua)
        } else {
            NSApp.appearance = NSAppearance(named: .aqua)
        }
    }
    
}

// MARK: - About View
struct AboutView: View {
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
        VStack(spacing: 20) {
            // –ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            Image(systemName: "network")
                .font(.system(size: 64))
                .foregroundColor(.blue)
            
            Text("I2P Daemon GUI")
                .font(.largeTitle)
                .fontWeight(.bold)
                .lineLimit(1)
                .minimumScaleFactor(0.8)
            
            Text("–í–µ—Ä—Å–∏—è 2.58.0")
                .font(.headline)
                .foregroundColor(.secondary)
                .lineLimit(1)
                .minimumScaleFactor(0.9)
            
            VStack(spacing: 8) {
                Text("–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π GUI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è I2P Daemon")
                    .multilineTextAlignment(.center)
                Text("‚Ä¢ –†–∞–¥–∏–∫–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ daemon")
                Text("‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
                Text("‚Ä¢ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –±–∏–Ω–∞—Ä–Ω–∏–∫ i2pd 2.58.0")
                Text("‚Ä¢ –ü–æ–¥–≤–∏–∂–Ω–æ–µ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–µ –æ–∫–Ω–æ")
                Text("‚Ä¢ –¢—ë–º–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
            }
            .font(.body)
            .multilineTextAlignment(.center)
            
            Divider()
            
            VStack(spacing: 2) {
                Text("–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∞ SwiftUI")
                    .font(.caption)
                Text("Swift 5.7+ ‚Ä¢ macOS 14.0+")
                    .font(.caption2)
                    .foregroundColor(.secondary)
            }
            
            HStack(spacing: 20) {
                Link("GitHub Repository", destination: URL(string: "https://github.com/MetanoicArmor/gui-i2pd")!)
                Link("I2P Official", destination: URL(string: "https://geti2p.net/")!)
            }
            .font(.caption)
            
            Button("–ó–∞–∫—Ä—ã—Ç—å") {
                dismiss()
            }
            .buttonStyle(.bordered)
            .padding(.top)
        }
        .padding(30)
        .frame(maxWidth: 400)
    }
}


// MARK: - Settings View
struct SettingsView: View {
    @ObservedObject var i2pdManager: I2pdManager
    @Environment(\.dismiss) private var dismiss
    @AppStorage("daemonPort") private var daemonPort = 4444
    @AppStorage("socksPort") private var socksPort = 4447
    @State private var displayDaemonPort = 4444
    @State private var displaySocksPort = 4447
    
    init(i2pdManager: I2pdManager) {
        self.i2pdManager = i2pdManager
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ä—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ view
        _displayDaemonPort = State(initialValue: Self.loadDaemonPortFromConfig())
        _displaySocksPort = State(initialValue: Self.loadSocksPortFromConfig())
    }
    
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    static private func loadDaemonPortFromConfig() -> Int {
        return Self.loadPortFromConfigForSection("httpproxy") ?? 4444
    }
    
    static private func loadSocksPortFromConfig() -> Int {
        return Self.loadPortFromConfigForSection("socksproxy") ?? 4447
    }
    
    static private func loadPortFromConfigForSection(_ sectionName: String) -> Int? {
        let homeDir = FileManager.default.homeDirectoryForCurrentUser
        let configPath = homeDir.appendingPathComponent(".i2pd/i2pd.conf")
        
        guard FileManager.default.fileExists(atPath: configPath.path) else {
            print("‚ö†Ô∏è i2pd.conf –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–µ–∫—Ü–∏–∏ \(sectionName)")
            return nil
        }
        
        do {
            let configContent = try String(contentsOf: configPath)
            let lines = configContent.components(separatedBy: .newlines)
            
            var currentSection = ""
            
            for line in lines {
                let trimmedLine = line.trimmingCharacters(in: .whitespaces)
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ–∫—Ü–∏—é
                if trimmedLine.hasPrefix("[") && trimmedLine.hasSuffix("]") {
                    currentSection = trimmedLine.lowercased()
                }
                
                // –ò—â–µ–º –ø–æ—Ä—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Å–µ–∫—Ü–∏–∏
                if (trimmedLine.contains(" port = ") || trimmedLine.contains("# port = ")) && currentSection.contains(sectionName) {
                    return Self.extractPortFromLineStatic(trimmedLine)
                }
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è —Å–µ–∫—Ü–∏–∏ \(sectionName): \(error)")
        }
        
        return nil
    }
    
    static private func extractPortFromLineStatic(_ line: String) -> Int? {
        // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "port = 4444" –∏–ª–∏ "# port = 4444" –∏–ª–∏ "port = 4444 #–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        let cleanLine = line.trimmingCharacters(in: .whitespaces)
        
        // –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª # –∏–∑ –Ω–∞—á–∞–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        let processedLine = cleanLine.hasPrefix("#") ? String(cleanLine.dropFirst()).trimmingCharacters(in: .whitespaces) : cleanLine
        
        let components = processedLine.components(separatedBy: "port =")
        
        if components.count > 1 {
            let portPart = components[1].trimmingCharacters(in: .whitespaces)
            // –ë–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–±–µ–ª–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
            let portValue = portPart.components(separatedBy: .whitespaces).first ?? portPart
            return Int(portValue.trimmingCharacters(in: .whitespaces))
        }
        return nil
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ (–¥–ª—è .onAppear)
    private func loadPortsFromConfig() {
        let homeDir = FileManager.default.homeDirectoryForCurrentUser
        let configPath = homeDir.appendingPathComponent(".i2pd/i2pd.conf")
        
        guard FileManager.default.fileExists(atPath: configPath.path) else {
            print("‚ö†Ô∏è i2pd.conf –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return
        }
        
        do {
            let configContent = try String(contentsOf: configPath)
            let lines = configContent.components(separatedBy: .newlines)
            
            var currentSection = ""
            
            for line in lines {
                let trimmedLine = line.trimmingCharacters(in: .whitespaces)
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ–∫—Ü–∏—é
                if trimmedLine.hasPrefix("[") && trimmedLine.hasSuffix("]") {
                    currentSection = trimmedLine.lowercased()
                }
                
                // –ò—â–µ–º –ø–æ—Ä—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–µ–∫—Ü–∏—è—Ö (–∫–∞–∫ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, —Ç–∞–∫ –∏ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
                if trimmedLine.contains(" port = ") || trimmedLine.contains("# port = ") {
                    if currentSection.contains("httpproxy") {
                        if let portValue = extractPortFromLine(trimmedLine) {
                            displayDaemonPort = portValue
                            print("‚úÖ HTTP –ø–æ—Ä—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: \(displayDaemonPort)")
                        }
                    } else if currentSection.contains("socksproxy") {
                        if let portValue = extractPortFromLine(trimmedLine) {
                            displaySocksPort = portValue
                            print("‚úÖ SOCKS –ø–æ—Ä—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: \(displaySocksPort)")
                        }
                    }
                }
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: \(error)")
        }
    }
    
    private func extractPortFromLine(_ line: String) -> Int? {
        // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ "port = 4444" –∏–ª–∏ "# port = 4444" –∏–ª–∏ "port = 4444 #–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
        let cleanLine = line.trimmingCharacters(in: .whitespaces)
        
        // –£–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª # –∏–∑ –Ω–∞—á–∞–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
        let processedLine = cleanLine.hasPrefix("#") ? String(cleanLine.dropFirst()).trimmingCharacters(in: .whitespaces) : cleanLine
        
        let components = processedLine.components(separatedBy: "port =")
        
        if components.count > 1 {
            let portPart = components[1].trimmingCharacters(in: .whitespaces)
            // –ë–µ—Ä–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–±–µ–ª–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)
            let portValue = portPart.components(separatedBy: .whitespaces).first ?? portPart
            return Int(portValue.trimmingCharacters(in: .whitespaces))
        }
        return nil
    }
    @AppStorage("autoStart") private var autoStart = false
    @AppStorage("darkMode") private var darkMode = true
    @AppStorage("notificationsEnabled") private var notificationsEnabled = false
    @AppStorage("autoRefresh") private var autoRefresh = true
    @AppStorage("autoLogCleanup") private var autoLogCleanup = false
    @AppStorage("addressBookAutoUpdate") private var addressBookAutoUpdate = true
    @AppStorage("addressBookInterval") private var addressBookInterval = 720 // –º–∏–Ω—É—Ç—ã
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
    @State private var isResetting = false
    @State private var showingResetAlert = false
    
    var body: some View {
        VStack(spacing: 0) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            HStack {
                Text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
                    .font(.largeTitle)
                    .fontWeight(.bold)
                    .lineLimit(1)
                    .minimumScaleFactor(0.8)
                
                Spacer()
                
                Button("–ì–æ—Ç–æ–≤–æ") {
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
                    NotificationCenter.default.post(name: NSNotification.Name("CloseSettings"), object: nil)
                    dismiss()
                }
                .buttonStyle(.borderedProminent)
                .keyboardShortcut(.return, modifiers: [.command])
                
                Button("–û—Ç–º–µ–Ω–∞") {
                    dismiss()
                }
                .buttonStyle(.bordered)
                .keyboardShortcut(.escape)
            }
            .padding(16)
            .background(Color(NSColor.windowBackgroundColor))
            
            Divider()
            
            ScrollView {
                VStack(spacing: 12) {
                    // –°–µ—Ç–µ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
                    SettingsSection(title: "üåê –°–µ—Ç–µ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", icon: "globe") {
                        VStack(spacing: 12) {
                            // –ü–æ—Ä—Ç HTTP –ø—Ä–æ–∫—Å–∏ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
                            HStack(spacing: 12) {
                                Text("–ü–æ—Ä—Ç HTTP –ø—Ä–æ–∫—Å–∏")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 220, alignment: .leading)
                                
                                Text("\(displayDaemonPort)")
                                    .font(.system(.body, design: .monospaced, weight: .medium))
                                    .foregroundColor(.secondary)
                                    .frame(width: 180, alignment: .leading)
                                    .padding(.vertical, 8)
                                    .padding(.horizontal, 12)
                                    .background(Color(NSColor.controlBackgroundColor))
                                    .cornerRadius(6)
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                            
                            // –ü–æ—Ä—Ç SOCKS5 –ø—Ä–æ–∫—Å–∏ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
                            HStack(spacing: 12) {
                                Text("–ü–æ—Ä—Ç SOCKS5 –ø—Ä–æ–∫—Å–∏")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 220, alignment: .leading)
                                
                                Text("\(displaySocksPort)")
                                    .font(.system(.body, design: .monospaced, weight: .medium))
                                    .foregroundColor(.secondary)
                                    .frame(width: 180, alignment: .leading)
                                    .padding(.vertical, 8)
                                    .padding(.horizontal, 12)
                                    .background(Color(NSColor.controlBackgroundColor))
                                    .cornerRadius(6)
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                            
                        }
                    }
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
                    SettingsSection(title: "üíª –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", icon: "laptop") {
                        VStack(spacing: 12) {
                            HStack(spacing: 12) {
                                Text("–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ daemon")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 250, alignment: .leading)
                                
                            HStack {
                                Spacer()
                                    Toggle("", isOn: $autoStart)
                                        .labelsHidden()
                                }
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                            
                            HStack(spacing: 12) {
                                Text("–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 250, alignment: .leading)
                                
                            HStack {
                                Spacer()
                                    Toggle("", isOn: $notificationsEnabled)
                                        .labelsHidden()
                            }
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                        }
                    }
                    
                    // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    SettingsSection(title: "üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å", icon: "paintpalette") {
                        VStack(spacing: 12) {
                            VStack(alignment: .leading, spacing: 8) {
                                Text("–¢–µ–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(maxWidth: .infinity, alignment: .leading)
                                Picker("–¢–µ–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", selection: $darkMode) {
                                    Text("–°–≤–µ—Ç–ª–∞—è").tag(false)
                                    Text("–¢—ë–º–Ω–∞—è").tag(true)
                                }
                                .pickerStyle(.segmented)
                                .frame(maxWidth: .infinity)
                                .onChange(of: darkMode) { _, newValue in
                                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                                    DispatchQueue.main.async {
                                        if newValue {
                                            NSApp.appearance = NSAppearance(named: .darkAqua)
                                        } else {
                                            NSApp.appearance = NSAppearance(named: .aqua)
                                        }
                                    }
                                }
                            }
                            
                        }
                    }
                    
                    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                    SettingsSection(title: "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", icon: "chart.bar") {
                        VStack(spacing: 12) {
                            HStack(spacing: 12) {
                                Text("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 250, alignment: .leading)
                                
                            HStack {
                                Spacer()
                                    Toggle("", isOn: $autoRefresh)
                                    .labelsHidden()
                                    .onChange(of: autoRefresh) { 
                                        // –£–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–ø–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                                        if autoRefresh {
                                            i2pdManager.enableAutoRefresh()
                                        } else {
                                            i2pdManager.disableAutoRefresh()
                                        }
                                    }
                                }
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                            
                            HStack(spacing: 12) {
                                Text("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 250, alignment: .leading)
                                
                            HStack {
                                Spacer()
                                    Toggle("", isOn: $autoLogCleanup)
                                    .labelsHidden()
                                    .onChange(of: autoLogCleanup) { 
                                        // –£–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–æ–π –ª–æ–≥–æ–≤
                                        if autoLogCleanup {
                                            i2pdManager.enableAutoLogCleanup()
                                        } else {
                                            i2pdManager.disableAutoLogCleanup()
                                        }
                                    }
                            }
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                        }
                    }
                    
                    // –î–∞–Ω–Ω—ã–µ
                    SettingsSection(title: "üìÅ –î–∞–Ω–Ω—ã–µ", icon: "folder") {
                        VStack(spacing: 12) {
                            VStack(alignment: .leading, spacing: 8) {
                                Text("–ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º")
                                    .font(.subheadline)
                                    .fontWeight(.medium)
                                    .frame(maxWidth: .infinity, alignment: .leading)
                                HStack {
                                    Text("~/.i2pd")
                                        .foregroundColor(.secondary)
                                        .font(.system(.caption, design: .monospaced))
                                        .frame(maxWidth: .infinity, alignment: .leading)
                                    Button("–ò–∑–º–µ–Ω–∏—Ç—å") {
                                        selectDataDirectory()
                                    }
                                    .buttonStyle(.borderless)
                                    .controlSize(.small)
                                }
                            }
                            
                            Divider()
                            
                            VStack(spacing: 12) {
                                Button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à") {
                                    clearDataCache()
                                }
                                .foregroundColor(.red)
                                .buttonStyle(.borderless)
                                .frame(maxWidth: .infinity, alignment: .leading)
                                
                                Button("üìä –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤") {
                                    exportLogs()
                                }
                                .foregroundColor(.blue)
                                .buttonStyle(.borderless)
                                .frame(maxWidth: .infinity, alignment: .leading)
                            }
                        }
                    }
                    
                    // –î–µ–π—Å—Ç–≤–∏—è
                    SettingsSection(title: "üîÑ –î–µ–π—Å—Ç–≤–∏—è", icon: "gear") {
                        VStack(spacing: 12) {
                            HStack(spacing: 12) {
                                Button("üîß –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏") {
                                    showingResetAlert = true
                                }
                                .foregroundColor(.orange)
                                .buttonStyle(.borderless)
                                .frame(minWidth: 180, alignment: .leading)
                                .disabled(isResetting)
                                
                                Spacer()
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                            .alert("–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫", isPresented: $showingResetAlert) {
                                Button("–°–±—Ä–æ—Å–∏—Ç—å", role: .destructive) {
                                    resetSettings()
                                }
                                Button("–û—Ç–º–µ–Ω–∏—Ç—å", role: .cancel) {}
                            } message: {
                                Text("–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –í—ã —É–≤–µ—Ä–µ–Ω—ã?")
                            }
                            
                            HStack(spacing: 12) {
                                Button("üìä –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") {
                                    i2pdManager.getExtendedStats()
                                }
                                .disabled(!i2pdManager.isRunning)
                                .buttonStyle(.borderless)
                                .frame(minWidth: 180, alignment: .leading)
                                
                                Spacer()
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                        }
                    }
                    
                    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ —Ñ–∞–π–ª—ã
                    SettingsSection(title: "üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", icon: "doc.text") {
                        VStack(spacing: 12) {
                            HStack(spacing: 12) {
                                Text("–ö–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 200, alignment: .leading)
                                
                                Button("üìÅ –û—Ç–∫—Ä—ã—Ç—å") {
                                    openConfigFile()
                                }
                                .buttonStyle(.borderless)
                                
                                Spacer()
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                            
                            HStack(spacing: 12) {
                                Text("–ü–∞–ø–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 200, alignment: .leading)
                                
                                Button("üìÇ –û—Ç–∫—Ä—ã—Ç—å") {
                                    openLogsDirectory() // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏ –∫–∞–∫ –ø–∞–ø–∫—É –¥–∞–Ω–Ω—ã—Ö
                                }
                                .buttonStyle(.borderless)
                                
                                Spacer()
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                            
                            HStack(spacing: 12) {
                                Text("–ñ—É—Ä–Ω–∞–ª—ã")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 200, alignment: .leading)
                                
                                Button("üìã –û—Ç–∫—Ä—ã—Ç—å") {
                                    openLogsDirectory()
                                }
                                .buttonStyle(.borderless)
                                
                                Spacer()
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                        }
                    }
                    
                    // –¢—É–Ω–Ω–µ–ª–∏
                    SettingsSection(title: "üöá –¢—É–Ω–Ω–µ–ª–∏", icon: "tunnel.fill") {
                        VStack(spacing: 12) {
                            HStack(spacing: 12) {
                                Text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É–Ω–Ω–µ–ª—è–º–∏")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 200, alignment: .leading)
                                
                                Button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å") {
                                    openTunnelManager()
                                }
                                .buttonStyle(.borderless)
                                .disabled(!i2pdManager.isRunning)
                                
                                Spacer()
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                            
                            HStack(spacing: 12) {
                                Text("–ü—Ä–∏–º–µ—Ä —Ç—É–Ω–Ω–µ–ª–µ–π")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 200, alignment: .leading)
                                
                                Button("üìù –ü–æ–∫–∞–∑–∞—Ç—å") {
                                    showTunnelExamples()
                                }
                                .buttonStyle(.borderless)
                                
                                Spacer()
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                        }
                    }
                    
                    // Address Book
                    SettingsSection(title: "üìñ Address Book", icon: "book.fill") {
                        VStack(spacing: 12) {
                            HStack(spacing: 12) {
                                Text("–ü–æ–¥–ø–∏—Å–∫–∏ adressbook")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 220, alignment: .leading)
                                
                                Button("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å") {
                                    openAddressBookSubscriptions()
                                }
                                .buttonStyle(.borderless)
                                
                                Spacer()
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                            
                            HStack(spacing: 12) {
                                Text("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 180, alignment: .leading)
                                
                                Toggle("", isOn: $addressBookAutoUpdate)
                                    .labelsHidden()
                                
                                Spacer()
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                            
                            HStack(spacing: 12) {
                                Text("–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 200, alignment: .leading)
                                
                                Picker("–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", selection: $addressBookInterval) {
                                    Text("–ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤").tag(360)
                                    Text("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ").tag(720)
                                    Text("–ö–∞–∂–¥—ã–µ 3 –¥–Ω—è").tag(2160)
                                    Text("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ").tag(5040)
                                }
                                .pickerStyle(.menu)
                                .frame(width: 200)
                                
                                Spacer()
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                            .disabled(!addressBookAutoUpdate)
                            
                            Divider()
                            
                            VStack(alignment: .leading, spacing: 8) {
                                Text("–¢–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                
                                Text("‚Ä¢ reg.i2p - –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–µ—Å—Ç—Ä –∞–¥—Ä–µ—Å–æ–≤")
                                    .font(.system(.caption, design: .default))
                                    .foregroundColor(.secondary)
                                Text("‚Ä¢ identiguy.i2p - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
                                    .font(.system(.caption, design: .default))
                                    .foregroundColor(.secondary)
                                Text("‚Ä¢ stats.i2p - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏")
                                    .font(.system(.caption, design: .default))
                                    .foregroundColor(.secondary)
                                Text("‚Ä¢ i2p-projekt.i2p - –ü—Ä–æ–µ–∫—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")
                                    .font(.system(.caption, design: .default))
                                    .foregroundColor(.secondary)
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                        }
                    }
                    
                    // –í–µ–±-–∫–æ–Ω—Å–æ–ª—å
                    SettingsSection(title: "üåê –í–µ–±-–∫–æ–Ω—Å–æ–ª—å", icon: "globe") {
                        VStack(spacing: 12) {
                            HStack(spacing: 12) {
                                Text("–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 200, alignment: .leading)
                                
                                Button("üåê –û—Ç–∫—Ä—ã—Ç—å") {
                                    openWebConsole()
                                }
                                .buttonStyle(.borderless)
                                .disabled(!i2pdManager.isRunning)
                                
                                Spacer()
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                            
                            HStack(spacing: 12) {
                                Text("–ü–æ—Ä—Ç: 7070")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.secondary)
                                    .frame(minWidth: 200, alignment: .leading)
                                
                                Button("üîó –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å URL") {
                                    copyWebConsoleURL()
                                }
                                .buttonStyle(.borderless)
                                
                                Spacer()
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                            
                        }
                    }
                    
                    // –ü—Ä–æ—Å—Ç–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ GitHub
                    HStack {
                        Spacer()
                        Text("GitHub: https://github.com/MetanoicArmor/gui-i2pd")
                            .font(.caption)
                            .foregroundColor(.secondary)
                        Spacer()
                    }
                    .padding(.top, 8)
                }
                .padding(.horizontal, 8)
                .padding(.vertical, 16)
            }
        }
        .frame(minWidth: 750, maxWidth: .infinity, minHeight: 500, maxHeight: .infinity)
        .onAppear {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            print("üîÑ SettingsView opened - loading ports from config...")
            loadPortsFromConfig()
        }
        .onReceive(NotificationCenter.default.publisher(for: .init("NSWindowDidResignKey"))) { _ in
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        }
    }
    
    private func saveSettings() {
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ UserDefaults (—É–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ @AppStorage)
        i2pdManager.logExportComplete("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ
        DispatchQueue.main.async {
            if darkMode {
                NSApp.appearance = NSAppearance(named: .darkAqua)
            } else {
                NSApp.appearance = NSAppearance(named: .aqua)
            }
        }
    }
    
    private func selectDataDirectory() {
        let panel = NSOpenPanel()
        panel.allowsMultipleSelection = false
        panel.canChooseFiles = false
        panel.canChooseDirectories = true
        panel.canCreateDirectories = true
        panel.prompt = "–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É –¥–∞–Ω–Ω—ã—Ö"
        
        if panel.runModal() == .OK, let url = panel.url {
            i2pdManager.logExportComplete("üìÅ –í—ã–±—Ä–∞–Ω –ø—É—Ç—å –¥–∞–Ω–Ω—ã—Ö: \(url.path)")
        }
    }
    
    private func clearDataCache() {
        let alert = NSAlert()
        alert.messageText = "–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"
        alert.informativeText = "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."
        alert.addButton(withTitle: "–û—á–∏—Å—Ç–∏—Ç—å")
        alert.addButton(withTitle: "–û—Ç–º–µ–Ω–∏—Ç—å")
        
        if alert.runModal() == .alertFirstButtonReturn {
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞
            i2pdManager.logExportComplete("üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω")
        }
    }
    
    private func exportLogs() {
        let logsContent = i2pdManager.logs.map { log in
            "[\(log.timestamp.formatted())] \(log.level.rawValue): \(log.message)"
        }.joined(separator: "\n")
        
        let panel = NSSavePanel()
        panel.allowedContentTypes = [.text]
        panel.nameFieldStringValue = "i2p-logs-\(Date().formatted(.iso8601)).txt"
        
        if panel.runModal() == .OK, let url = panel.url {
            try? logsContent.write(to: url, atomically: true, encoding: .utf8)
            i2pdManager.logExportComplete("üìÑ –õ–æ–≥–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: \(url.path)")
        }
    }
    
    private func resetSettings() {
        isResetting = true
        
        DispatchQueue.main.async {
            // –°–±—Ä–æ—Å –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            autoStart = false
            notificationsEnabled = false
            autoRefresh = true
            autoLogCleanup = false
            darkMode = true
            addressBookAutoUpdate = true
            addressBookInterval = 720
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—ë–º–Ω—É—é —Ç–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ
            NSApp.appearance = NSAppearance(named: .darkAqua)
            
            i2pdManager.logExportComplete("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.5) {
                isResetting = false
            }
        }
    }
    
    private func openConfigFile() {
        let homeDir = FileManager.default.homeDirectoryForCurrentUser
        let configPath = homeDir.appendingPathComponent(".i2pd/i2pd.conf")
        
        if FileManager.default.fileExists(atPath: configPath.path) {
            NSWorkspace.shared.open(configPath)
        } else {
            // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            createDefaultConfigFile(at: configPath)
        }
        
        i2pdManager.logExportComplete("üìÅ –û—Ç–∫—Ä—ã—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª")
    }
    
    private func createDefaultConfigFile(at path: URL) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –∏–∑ bundle –≤–º–µ—Å—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ
        let bundle = Bundle.main
        let resourcesPath = "Contents/Resources"
        
        if let configURL = bundle.url(forResource: "i2pd", withExtension: "conf", subdirectory: resourcesPath) {
            do {
                try FileManager.default.createDirectory(at: path.deletingLastPathComponent(), withIntermediateDirectories: true)
                try FileManager.default.copyItem(at: configURL, to: path)
                NSWorkspace.shared.open(path)
                i2pdManager.logExportComplete("‚úÖ –ü–æ–ª–Ω—ã–π i2pd.conf —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑ –±–∞–Ω–¥–ª–∞")
            } catch {
                print("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞: \(error)")
                // Fallback –∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º—É –∫–æ–Ω—Ñ–∏–≥—É
                createSimplifiedConfig(at: path)
            }
        } else {
            // Fallback –∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º—É –∫–æ–Ω—Ñ–∏–≥—É –µ—Å–ª–∏ –ø–æ–ª–Ω—ã–π –Ω–µ –Ω–∞–π–¥–µ–Ω
            createSimplifiedConfig(at: path)
        }
    }
    
    private func createSimplifiedConfig(at path: URL) {
        let defaultConfig = """
## Configuration file for I2P Router
## Generated by I2P-GUI (simplified fallback)

[general]
## Daemon mode
daemon = true

[http]
## Web Console settings
enabled = true
address = 127.0.0.1
port = 7070
auth = false

[httpproxy]
## HTTP Proxy settings
enabled = true
address = 127.0.0.1
port = 4444

[socksproxy]
## SOCKS Proxy settings
enabled = true
address = 127.0.0.1
port = 4447

[i2pcontrol]
## I2PControl settings
enabled = true
address = 127.0.0.1
port = 7650
"""
        
        do {
            try FileManager.default.createDirectory(at: path.deletingLastPathComponent(), withIntermediateDirectories: true)
            try defaultConfig.write(to: path, atomically: true, encoding: .utf8)
            NSWorkspace.shared.open(path)
            i2pdManager.logExportComplete("‚ö†Ô∏è –°–æ–∑–¥–∞–Ω —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π i2pd.conf")
        } catch {
            print("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: \(error)")
        }
    }
    
    
    private func openLogsDirectory() {
        let homeDir = FileManager.default.homeDirectoryForCurrentUser
        let logsDir = homeDir.appendingPathComponent(".i2pd")
        
        if FileManager.default.fileExists(atPath: logsDir.path) {
            NSWorkspace.shared.open(logsDir)
        } else {
            // –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤
            NSWorkspace.shared.open(homeDir)
        }
        
        i2pdManager.logExportComplete("üìã –û—Ç–∫—Ä—ã—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤")
    }
    
    private func openTunnelManager() {
        let homeDir = FileManager.default.homeDirectoryForCurrentUser
        let tunnelsConf = homeDir.appendingPathComponent(".i2pd/tunnels.conf")
        
        if !FileManager.default.fileExists(atPath: tunnelsConf.path) {
            // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ç—É–Ω–Ω–µ–ª–µ–π
            createDefaultTunnelsFile(at: tunnelsConf)
        }
        
        NSWorkspace.shared.open(tunnelsConf)
        i2pdManager.logExportComplete("üöá –û—Ç–∫—Ä—ã—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —Ç—É–Ω–Ω–µ–ª–µ–π")
    }
    
    private func createDefaultTunnelsFile(at path: URL) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π tunnels.conf –∏–∑ bundle –≤–º–µ—Å—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ
        let bundle = Bundle.main
        let resourcesPath = "Contents/Resources"
        
        if let tunnelsURL = bundle.url(forResource: "tunnels", withExtension: "conf", subdirectory: resourcesPath) {
            do {
                try FileManager.default.createDirectory(at: path.deletingLastPathComponent(), withIntermediateDirectories: true)
                try FileManager.default.copyItem(at: tunnelsURL, to: path)
                i2pdManager.logExportComplete("‚úÖ –ü–æ–ª–Ω—ã–π tunnels.conf —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑ –±–∞–Ω–¥–ª–∞")
            } catch {
                print("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ tunnels.conf: \(error)")
                // Fallback –∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
                createSimplifiedTunnelsFile(at: path)
            }
        } else {
            // Fallback –∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –µ—Å–ª–∏ –ø–æ–ª–Ω—ã–π –Ω–µ –Ω–∞–π–¥–µ–Ω
            createSimplifiedTunnelsFile(at: path)
        }
    }
    
    private func createSimplifiedTunnelsFile(at path: URL) {
        let defaultTunnels = """
## –¢—É–Ω–Ω–µ–ª–∏ I2P
## –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à–∏ —Ç—É–Ω–Ω–µ–ª–∏ (simplified fallback)

[IRC-ILITA]
type = client
address = 127.0.0.1
port = 6668
destination = irc.ilita.i2p
destinationport = 6667
keys = irc-keys.dat

#[SOCKS-Proxy]
#type = server
#address = 127.0.0.1
#port = 7650
#keys = server-keys.dat
#inbound.length = 3
#outbound.length = 3

#[HTTP-Proxy]
#type = server
#address = 127.0.0.1
#port = 8080
#keys = http-keys.dat
#inbound.length = 3
#outbound.length = 3
"""
        
        do {
            try FileManager.default.createDirectory(at: path.deletingLastPathComponent(), withIntermediateDirectories: true)
            try defaultTunnels.write(to: path, atomically: true, encoding: .utf8)
            i2pdManager.logExportComplete("‚ö†Ô∏è –°–æ–∑–¥–∞–Ω —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π tunnels.conf")
        } catch {
            print("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Ç—É–Ω–Ω–µ–ª–µ–π: \(error)")
        }
    }
    
    private func showTunnelExamples() {
        let examplesText = """
–ü—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç—É–Ω–Ω–µ–ª–µ–π:

üèÉ‚Äç‚ôÇÔ∏è CLIENT –¢–£–ù–ù–ï–õ–¨ (–≤—Ö–æ–¥—è—â–∏–π):
[IRC-ILITA]
type = client
address = 127.0.0.1
port = 6668
destination = irc.ilita.i2p
destinationport = 6667
keys = irc-keys.dat

üè™ SERVER –¢–£–ù–ù–ï–õ–¨ (–∏—Å—Ö–æ–¥—è—â–∏–π):
[My-Server]
type = server
address = 127.0.0.1
port = 8080
keys = server-keys.dat
inbound.length = 3
outbound.length = 3

üåê HTTP –ü–†–û–ö–°–ò:
[HTTP-Proxy]
type = server
address = 127.0.0.1
port = 8888
keys = http-keys.dat
inbound.length = 3
outbound.length = 3

üß¶ SOCKS –ü–†–û–ö–°–ò:
[SOCKS-Proxy]
type = server
address = 127.0.0.1
port = 4447
keys = socks-keys.dat
inbound.length = 3
outbound.length = 3

üì° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ SOCKS5:
–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ I2P —Å–µ—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
- –ê–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏: 127.0.0.1:4447
- –¢–∏–ø: SOCKS5
- –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: (–æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º)
- –ü–∞—Ä–æ–ª—å: (–æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º)
"""
        
        let alert = NSAlert()
        alert.messageText = "–ü—Ä–∏–º–µ—Ä—ã —Ç—É–Ω–Ω–µ–ª–µ–π"
        alert.informativeText = examplesText
        alert.addButton(withTitle: "OK")
        alert.runModal()
    }
    
    private func openWebConsole() {
        guard i2pdManager.isRunning else { return }
        
        let url = "http://127.0.0.1:7070"
        if let webURL = URL(string: url) {
            NSWorkspace.shared.open(webURL)
            i2pdManager.logExportComplete("üåê –û—Ç–∫—Ä—ã—Ç–∞ –≤–µ–±-–∫–æ–Ω—Å–æ–ª—å")
        }
    }
    
    private func copyWebConsoleURL() {
        let url = "http://127.0.0.1:7070"
        
        let pasteboard = NSPasteboard.general
        pasteboard.clearContents()
        pasteboard.setString(url, forType: .string)
        
        i2pdManager.logExportComplete("üîó URL –≤–µ–±-–∫–æ–Ω—Å–æ–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
    }
    
    private func openAddressBookSubscriptions() {
        let homeDir = FileManager.default.homeDirectoryForCurrentUser
        let subscriptionsPath = homeDir.appendingPathComponent(".i2pd/subscriptions.txt")
        
        if FileManager.default.fileExists(atPath: subscriptionsPath.path) {
            NSWorkspace.shared.open(subscriptionsPath)
        } else {
            // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –∏–∑ bundle
            createDefaultSubscriptionsFile(at: subscriptionsPath)
        }
        
        i2pdManager.logExportComplete("üìñ –û—Ç–∫—Ä—ã—Ç —Ñ–∞–π–ª –ø–æ–¥–ø–∏—Å–æ–∫ address book")
    }
    
    private func createDefaultSubscriptionsFile(at path: URL) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π subscriptions.txt –∏–∑ bundle –≤–º–µ—Å—Ç–æ –ø—É—Å—Ç–æ–≥–æ
        let bundle = Bundle.main
        let resourcesPath = "Contents/Resources"
        
        if let subscriptionsURL = bundle.url(forResource: "subscriptions", withExtension: "txt", subdirectory: resourcesPath) {
            do {
                try FileManager.default.createDirectory(at: path.deletingLastPathComponent(), withIntermediateDirectories: true)
                try FileManager.default.copyItem(at: subscriptionsURL, to: path)
                NSWorkspace.shared.open(path)
                i2pdManager.logExportComplete("‚úÖ –ü–æ–ª–Ω—ã–π subscriptions.txt —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑ –±–∞–Ω–¥–ª–∞")
            } catch {
                print("–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ subscriptions.txt: \(error)")
                // Fallback –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
                createEmptySubscriptionsFile(at: path)
            }
        } else {
            // Fallback –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –ø–æ–ª–Ω—ã–π –Ω–µ –Ω–∞–π–¥–µ–Ω
            createEmptySubscriptionsFile(at: path)
        }
    }
    
    private func createEmptySubscriptionsFile(at path: URL) {
        let defaultSubscriptions = """
http://reg.i2p/hosts.txt
http://identiguy.i2p/hosts.txt
http://stats.i2p/cgi-bin/newhosts.txt
http://i2p-projekt.i2p/hosts.txt

"""
        
        do {
            try FileManager.default.createDirectory(at: path.deletingLastPathComponent(), withIntermediateDirectories: true)
            try defaultSubscriptions.write(to: path, atomically: true, encoding: .utf8)
            NSWorkspace.shared.open(path)
            i2pdManager.logExportComplete("‚ö†Ô∏è –°–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π subscriptions.txt")
        } catch {
            print("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ–¥–ø–∏—Å–æ–∫: \(error)")
        }
    }
}

// MARK: - Settings Section
struct SettingsSection<Content: View>: View {
    let title: String
    let icon: String
    let content: Content
    
    init(title: String, icon: String, @ViewBuilder content: () -> Content) {
        self.title = title
        self.icon = icon
        self.content = content()
    }
    
    var body: some View {
        VStack(spacing: 16) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
            HStack {
                Image(systemName: icon)
                    .font(.system(size: 16, weight: .medium))
                    .foregroundColor(.blue)
                Text(title)
                    .font(.headline)
                    .fontWeight(.semibold)
                    .lineLimit(1)
                    .minimumScaleFactor(0.9)
                Spacer()
            }
            .padding(.horizontal, 8)
            .padding(.vertical, 8)
            .background(Color(NSColor.controlBackgroundColor))
            .cornerRadius(12)
            
            // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–∫—Ü–∏–∏
            VStack(spacing: 12) {
                content
            }
            .padding(.horizontal, 20)
            .padding(.vertical, 16)
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(Color(NSColor.windowBackgroundColor))
                    .overlay(
                        RoundedRectangle(cornerRadius: 12)
                            .stroke(Color(NSColor.separatorColor), lineWidth: 1)
                    )
            )
        }
    }
}

// MARK: - Settings Row Helper
struct SettingsRow: View {
    let title: String
    let action: AnyView
    
    var body: some View {
        HStack(alignment: .center, spacing: 16) {
            Text(title)
                .font(.system(.body, design: .default, weight: .medium))
                .foregroundColor(.primary)
                .multilineTextAlignment(.leading)
                .lineLimit(2)
                .frame(maxWidth: .infinity, alignment: .leading)
            
            action
        }
        .padding(.horizontal, 8)
        .padding(.vertical, 8)
        .frame(maxWidth: .infinity, alignment: .leading)
    }
}

// MARK: - Status Card
struct StatusCard: View {
    let isRunning: Bool
    let uptime: String
    let peers: Int
    
    var body: some View {
        HStack(spacing: 32) {
            // –°—Ç–∞—Ç—É—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            HStack(spacing: 12) {
                Circle()
                    .fill(isRunning ? Color.green : Color.red)
                    .frame(width: 12, height: 12)
                
                VStack(alignment: .leading, spacing: 2) {
                    Text(isRunning ? "–ó–∞–ø—É—â–µ–Ω" : "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                        .font(.subheadline)
                        .fontWeight(.medium)
                        .lineLimit(1)
                        .minimumScaleFactor(0.9)
                    Text(isRunning ? "–°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–µ–Ω" : "–°—Ç–∞—Ç—É—Å: –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
                        .font(.caption)
                        .foregroundColor(.secondary)
                        .lineLimit(1)
                        .minimumScaleFactor(0.9)
                }
            }
            
            // –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            VStack(alignment: .leading, spacing: 2) {
                Text("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã")
                    .font(.caption)
                    .foregroundColor(.secondary)
                    .lineLimit(1)
                    .minimumScaleFactor(0.9)
                Text(uptime)
                    .font(.title2)
                    .fontWeight(.semibold)
                    .foregroundColor(.primary)
                    .lineLimit(1)
                    .minimumScaleFactor(0.8)
            }
            
            // –°—á—ë—Ç—á–∏–∫ –ø–∏—Ä–æ–≤
            VStack(alignment: .leading, spacing: 2) {
                Text("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                    .font(.caption)
                    .foregroundColor(.secondary)
                    .lineLimit(1)
                    .minimumScaleFactor(0.9)
                Text("\(peers)")
                    .font(.title2)
                    .fontWeight(.semibold)
                    .foregroundColor(.primary)
                    .lineLimit(1)
                    .minimumScaleFactor(0.8)
            }
            
            Spacer()
        }
        .padding(.vertical, 20)
        .padding(.horizontal, 32)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color(NSColor.controlBackgroundColor))
                .overlay(
                    RoundedRectangle(cornerRadius: 16)
                        .stroke(Color(NSColor.separatorColor), lineWidth: 1)
                )
        )
        .shadow(color: Color.black.opacity(0.05), radius: 4, x: 0, y: 2)
    }
}

// MARK: - Control Buttons
struct ControlButtons: View {
    @ObservedObject var i2pdManager: I2pdManager
    @Binding var showingSettings: Bool
    
    var body: some View {
        VStack(spacing: 16) {
            // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            HStack(spacing: 16) {
                Button("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å") {
                    i2pdManager.restartDaemon()
                }
                .lineLimit(1)
                .minimumScaleFactor(0.9)
                .frame(height: 36)
                .frame(maxWidth: .infinity)
                .disabled(i2pdManager.isLoading || !i2pdManager.isRunning)
                
                Button(action: {
                    if i2pdManager.isRunning {
                        i2pdManager.stopDaemon()
                    } else {
                        i2pdManager.startDaemon()
                    }
                }) {
                    HStack(spacing: 8) {
                        Image(systemName: i2pdManager.isRunning ? "stop.circle.fill" : "play.circle.fill")
                            .font(.system(size: 16))
                        Text(i2pdManager.isRunning ? "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" : "–ó–∞–ø—É—Å—Ç–∏—Ç—å")
                            .fontWeight(.medium)
                            .lineLimit(1)
                            .minimumScaleFactor(0.9)
                    }
                    .frame(height: 36)
                    .frame(maxWidth: .infinity)
                }
                .buttonStyle(.borderedProminent)
                .controlSize(.large)
                .disabled(i2pdManager.isLoading || i2pdManager.operationInProgress)
                
                Button("–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å") {
                    i2pdManager.checkStatus()
                }
                .lineLimit(1)
                .minimumScaleFactor(0.9)
                .frame(height: 36)
                .frame(maxWidth: .infinity)
                .disabled(i2pdManager.isLoading)
            
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            HStack(spacing: 12) {
                Button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏") {
                    showingSettings = true
                }
                .lineLimit(1)
                .minimumScaleFactor(0.9)
                .frame(height: 36)
                .frame(maxWidth: .infinity)
                
                Button("üîΩ –°–≤–µ—Ä–Ω—É—Ç—å –≤ —Ç—Ä–µ–π") {
                    TrayManager.shared.hideMainWindow()
                }
                .lineLimit(1)
                .minimumScaleFactor(0.9)
                .frame(height: 36)
                .frame(maxWidth: .infinity)
                
                Button("–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏") {
                    i2pdManager.clearLogs()
                }
                .lineLimit(1)
                .minimumScaleFactor(0.9)
                .frame(height: 36)
                .frame(maxWidth: .infinity)
            }
        }
    }
}

// MARK: - Log View
struct LogView: View {
    let logs: [LogEntry]
    
    var body: some View {
        ScrollView {
            LazyVStack(alignment: .leading, spacing: 1) {
                ForEach(logs.prefix(50), id: \.id) { log in
                    HStack(alignment: .top, spacing: 12) {
                        Text(log.timestamp.formatted(.dateTime.hour().minute().second()))
                            .font(.caption)
                            .foregroundColor(.secondary)
                            .frame(width: 55, alignment: .leading)
                        
                        HStack(spacing: 4) {
                            Text(log.level.rawValue)
                                .font(.caption2)
                                .fontWeight(.medium)
                                .padding(.horizontal, 6)
                                .padding(.vertical, 2)
                                .background(logLevelColor(for: log.level))
                                .foregroundColor(.white)
                                .cornerRadius(3)
                        }
                        .frame(width: 60)
                        
                        Text(log.message)
                            .font(.caption)
                            .lineLimit(nil)
                            .fixedSize(horizontal: false, vertical: true)
                        
                        Spacer()
                    }
                    .padding(.horizontal, 8)
                    .padding(.vertical, 8)
                    .background(
                        Rectangle()
                            .fill(log.level == .error ? Color.red.opacity(0.03) :
                                  log.level == .warn ? Color.orange.opacity(0.03) :
                                  Color.clear)
                    )
                }
            }
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(Color(NSColor.controlBackgroundColor))
                    .overlay(
                        RoundedRectangle(cornerRadius: 12)
                            .stroke(Color(NSColor.separatorColor), lineWidth: 1)
                    )
            )
        }
        .frame(maxHeight: 300)
    }
    
    private func logLevelColor(for level: LogLevel) -> Color {
        switch level {
        case .info:
            return .blue
        case .warn:
            return .orange
        case .error:
            return .red
        case .debug:
            return .gray
        }
    }
}

// MARK: - Data Models
enum LogLevel: String, CaseIterable {
    case info = "INFO"
    case warn = "WARN"
    case error = "ERROR"
    case debug = "DEBUG"
}

struct LogEntry: Identifiable {
    let id = UUID()
    let timestamp: Date
    let level: LogLevel
    let message: String
    
    init(level: LogLevel, message: String) {
        self.timestamp = Date()
        self.level = level
        self.message = message
    }
}

// MARK: - Stat Card Component
struct StatCard: View {
    let icon: String
    let value: String
    let label: String
    let color: Color
    
    var body: some View {
        VStack(spacing: 8) {
            Image(systemName: icon)
                .font(.system(size: 24))
                .foregroundColor(color)
            
            Text(value)
                .font(.system(.title2, design: .default, weight: .bold))
                .foregroundColor(.primary)
            
            Text(label)
                .font(.system(.caption, design: .default, weight: .medium))
                .foregroundColor(.secondary)
        }
        .fixedSize(horizontal: false, vertical: true)
        .frame(maxWidth: .infinity, minHeight: 80)
        .background(
            RoundedRectangle(cornerRadius: 8)
                .fill(Color(NSColor.controlBackgroundColor))
        )
    }
}

// MARK: - I2PD Manager
class I2pdManager: ObservableObject {
    @Published var isRunning = false
    @Published var isLoading = false
    @Published var operationInProgress = false
    @Published var uptime = "00:00:00"
    @Published var peerCount = 0
    @Published var logs: [LogEntry] = []
    @Published var bytesReceived = 0
    @Published var bytesSent = 0
    @Published var activeTunnels = 0
    @Published var routerInfos = 0
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    var receivedBytes: String {
        if bytesReceived < 1024 {
            return "\(bytesReceived) B"
        } else if bytesReceived < 1024 * 1024 {
            return String(format: "%.1f KB", Double(bytesReceived) / 1024)
        } else {
            return String(format: "%.1f MB", Double(bytesReceived) / (1024 * 1024))
        }
    }
    
    var sentBytes: String {
        if bytesSent < 1024 {
            return "\(bytesSent) B"
        } else if bytesSent < 1024 * 1024 {
            return String(format: "%.1f KB", Double(bytesSent) / 1024)
        } else {
            return String(format: "%.1f MB", Double(bytesSent) / (1024 * 1024))
        }
    }
    
    private var i2pdProcess: Process?
    private var i2pdPID: Int32?
    private var daemonPID: Int32?
    private var logTimer: Timer?
    
    private let executablePath: String
    
    init() {
        // –•–∞—Ä–¥–∫–æ–¥–∏–º –ø—É—Ç—å –∫ –±–∏–Ω–∞—Ä–Ω–∏–∫—É –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        let bundlePath = Bundle.main.bundlePath
        let resourcePath = "\(bundlePath)/Contents/Resources/i2pd"
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø—É—Ç–∏
        if FileManager.default.fileExists(atPath: resourcePath) {
            executablePath = resourcePath
        } else {
            // Fallback –∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –ø—É—Ç—è–º
            var fallbackPaths: [String] = []
            
            if let resourceURLPath = Bundle.main.resourceURL?.path {
                let altPath = "\(resourceURLPath)/i2pd"
                fallbackPaths.append(altPath)
            }
            
            fallbackPaths.append(contentsOf: [
                "./i2pd",
                "/usr/local/bin/i2pd",
                "/opt/homebrew/bin/i2pd",
                "/usr/bin/i2pd"
            ])
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É—Ç–∏
            let validPaths = fallbackPaths.filter { FileManager.default.fileExists(atPath: $0) }
            
            executablePath = validPaths.first ?? "./i2pd"
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        setupConfigFiles()
        
        // –î–µ–±–∞–≥ –≤—ã–≤–æ–¥
        DispatchQueue.main.async { [weak self] in
            self?.addLog(.debug, "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è I2pdManager")
            self?.addLog(.debug, "üìç Bundle path: \(bundlePath)")
            self?.addLog(.debug, "üéØ –†–µ—Å—É—Ä—Å–Ω—ã–π –ø—É—Ç—å: \(resourcePath)")
            self?.addLog(.debug, "‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å: \(self?.executablePath ?? "–Ω–µ –Ω–∞–π–¥–µ–Ω")")
            self?.addLog(.debug, "üîç –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: \(FileManager.default.fileExists(atPath: self?.executablePath ?? "") ? "‚úÖ –¥–∞" : "‚ùå –Ω–µ—Ç")")
        }
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç —Ç—Ä–µ—è
        NotificationCenter.default.addObserver(
            forName: NSNotification.Name("DaemonStarted"),
            object: nil,
            queue: .main
        ) { [weak self] _ in
            DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
                self?.addLog(.info, "üì± Daemon –∑–∞–ø—É—â–µ–Ω –∏–∑ —Ç—Ä–µ—è - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å")
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é —Ç—Ä–µ—è
                TrayManager.shared.updateMenuState(isRunning: true)
                self?.checkStatus()
            }
        }
        
        NotificationCenter.default.addObserver(
            forName: NSNotification.Name("DaemonStopped"),
            object: nil,
            queue: .main
        ) { [weak self] _ in
            DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
                self?.addLog(.info, "üì± Daemon –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ç—Ä–µ—è - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å")
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é —Ç—Ä–µ—è
                TrayManager.shared.updateMenuState(isRunning: false)
                self?.checkStatus()
            }
        }
        
        NotificationCenter.default.addObserver(
            forName: NSNotification.Name("StatusUpdated"),
            object: nil,
            queue: .main
        ) { [weak self] _ in
            self?.addLog(.info, "üì± –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ç—Ä–µ—è")
            self?.checkStatus()
        }
    }
    
    func startDaemon() {
        guard !operationInProgress else {
            addLog(.warn, "–û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            return
        }
        operationInProgress = true
        isLoading = true
        addLog(.info, "–ó–∞–ø—É—Å–∫ I2P daemon...")
        addLog(.debug, "üîÑ –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å daemon...")
        addLog(.debug, "üìç –ü—É—Ç—å –∫ –±–∏–Ω–∞—Ä–Ω–∏–∫—É: \(executablePath)")
        addLog(.debug, "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è: \(FileManager.default.fileExists(atPath: executablePath))")
        
        guard FileManager.default.fileExists(atPath: executablePath) else {
            addLog(.error, "‚ùå –ë–∏–Ω–∞—Ä–Ω–∏–∫ i2pd –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: \(executablePath)")
            isLoading = false
            operationInProgress = false
            return
        }
        
        addLog(.debug, "‚úÖ –ë–∏–Ω–∞—Ä–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø—Ä–æ—Ü–µ—Å—Å
        if isRunning {
            addLog(.warn, "I2P daemon —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            isLoading = false
            operationInProgress = false
            return
        }
        
        DispatchQueue.global(qos: .background).async { [weak self] in
            self?.executeI2pdCommand(["--daemon"])
        }
    }
    
    func stopDaemon() {
        addLog(.info, "üö´ –û–°–¢–ê–ù–û–í–ö–ê –î–ï–ú–û–ù–ê –ò–ó I2pdManager –ù–ê–ß–ê–¢–ê!")
        
        guard !operationInProgress else {
            addLog(.warn, "‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            return
        }
        
        addLog(.debug, "‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        operationInProgress = true
        isLoading = true
        addLog(.info, "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ I2P daemon —á–µ—Ä–µ–∑ kill -s INT...")
        
        DispatchQueue.global(qos: .background).async { [weak self] in
            self?.stopDaemonProcess()
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ UI –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            DispatchQueue.main.async {
                self?.isRunning = false
                self?.isLoading = false
                self?.operationInProgress = false
                self?.addLog(.info, "‚úÖ –î–µ–º–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            }
        }
    }
    
    func restartDaemon() {
        stopDaemon()
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
        DispatchQueue.main.asyncAfter(deadline: .now() + 2) { [weak self] in
            self?.startDaemon()
        }
    }
    
    private func stopDaemonProcess() {
        addLog(.debug, "üõë –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä—è–º—É—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É –¥–µ–º–æ–Ω–∞...")
        
        // –ü–†–û–°–¢–û–ô –ò –ù–ê–î–ï–ñ–ù–´–ô –ø–æ–∏—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–º–æ–Ω–∞
        let simpleStopCommand = """
        echo "üîç –ü–æ–∏—Å–∫ –¥–µ–º–æ–Ω–∞ i2pd..." &&
        DEMON_PID=$(ps aux | grep "i2pd.*daemon" | grep -v grep | awk '{print $2}' | head -1) &&
        
        if [ -n "$DEMON_PID" ]; then
            echo "‚úÖ –ù–∞–π–¥–µ–Ω –¥–µ–º–æ–Ω —Å PID: $DEMON_PID" &&
            echo "üíÄ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ–º–æ–Ω —á–µ—Ä–µ–∑ kill -s INT..." &&
            kill -s INT $DEMON_PID 2>/dev/null &&
            sleep 2 &&
            kill -s TERM $DEMON_PID 2>/dev/null &&
            sleep 1 &&
            kill -KILL $DEMON_PID 2>/dev/null &&
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            sleep 1 &&
            if ps -p $DEMON_PID >/dev/null 2>&1; then
                echo "‚ùå –î–µ–º–æ–Ω –≤—Å—ë –µ—â—ë –∂–∏–≤!"
            else
                echo "‚úÖ –î–µ–º–æ–Ω —É—Å–ø–µ—à–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
            fi
        else
            echo "‚ö†Ô∏è –î–µ–º–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"
        fi
        """
        
        executeStopCommand(simpleStopCommand)
    }
    
    private func findDaemonChildProcesses() {
        // –†–ê–ó–í–ï–†–ù–£–¢–´–ô –ø–æ–∏—Å–∫ –¥–µ–º–æ–Ω–∞ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
        let findCommand = """
        echo "üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö –î–ï–ú–û–ù–ê..." &&
        echo "üìã –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å i2pd:" &&
        ps aux | grep i2pd | grep -v grep &&
        echo "" &&
        echo "üìã –î–µ–º–æ–Ω—ã —Å --daemon:" &&
        ps aux | grep "i2pd.*daemon" | grep -v grep &&
        echo "" &&
        echo "üìã –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –¥–µ–º–æ–Ω–∞:" &&
        ps aux | grep "i2pd.*--daemon" | grep -v grep &&
        echo "" &&
        echo "üéØ –ü–û–õ–£–ß–ï–ù–ò–ï PID:" &&
        ps aux | grep "i2pd.*--daemon" | grep -v grep | awk '{print $2}' | head -1
        """
        
        addLog(.debug, "üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–æ–∏—Å–∫ –¥–µ–º–æ–Ω–∞...")
        
        let findProcess = Process()
        findProcess.executableURL = URL(fileURLWithPath: "/bin/bash")
        findProcess.arguments = ["-c", findCommand]
        
        let pipe = Pipe()
        findProcess.standardOutput = pipe
        
        do {
            try findProcess.run()
            findProcess.waitUntilExit()
            
            let data = pipe.fileHandleForReading.readDataToEndOfFile()
            let output = String(data: data, encoding: .utf8)
    
            DispatchQueue.main.async { [weak self] in
                if let output = output {
                    print("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ PID: \(output)")
                    
                    let lines = output.components(separatedBy: "\n")
                    
                    // –ü–†–û–°–¢–û–ô –ò –ù–ê–î–ï–ñ–ù–´–ô –ø–æ–∏—Å–∫ PID
                    var foundPid: Int32?
                    
                    // –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å "–ü–û–õ–£–ß–ï–ù–ò–ï PID:" –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
                    for (index, line) in lines.enumerated() {
                        if line.contains("–ü–û–õ–£–ß–ï–ù–ò–ï PID:") {
                            // –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ "–ü–û–õ–£–ß–ï–ù–ò–ï PID:"
                            if index + 1 < lines.count {
                                let nextLine = lines[index + 1]
                                if let pid = Int32(nextLine.trimmingCharacters(in: .whitespacesAndNewlines)) {
                                    foundPid = pid
                                    break
                                }
                            }
                            // –ü–æ–ø—Ä–æ–±—É–µ–º —Ç–∞–∫–∂–µ –Ω–∞–π—Ç–∏ –≤ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ
                            let components = line.components(separatedBy: " ")
                            for component in components {
                                if let pid = Int32(component.trimmingCharacters(in: .whitespacesAndNewlines)) {
                                    foundPid = pid
                                    break
                                }
                            }
                            break
                        }
                    }
                    
                    if let pid = foundPid {
                        self?.daemonPID = pid
                        self?.addLog(.debug, "‚úÖ –ù–∞–π–¥–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π PID –¥–µ–º–æ–Ω–∞: \(pid)")
                    } else {
                        self?.addLog(.debug, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ PID –≤ –≤—ã–≤–æ–¥–µ: \(lines)")
                    }
                } else {
                    self?.addLog(.debug, "‚ö†Ô∏è –ü—É—Å—Ç–æ–π –≤—ã–≤–æ–¥ –ø–æ–∏—Å–∫–∞ PID")
                }
            }
        } catch {
            DispatchQueue.main.async { [weak self] in
                self?.addLog(.error, "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ PID –¥–µ–º–æ–Ω–∞: \(error)")
            }
        }
    }
    
    private var globalStopCommand: String {
        return """
        echo "üîç –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ –¥–µ–º–æ–Ω–∞ i2pd..." &&
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–µ–º–æ–Ω–∞ (–Ω–µ GUI!)
        echo "üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –î–ï–ú–û–ù–ê i2pd:" &&
        ps aux | grep "i2pd.*daemon" | grep -v grep &&
        
        # –ë–ï–ó–û–ü–ê–°–ù–´–ô –ú–µ—Ç–æ–¥ 1: –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ –¥–µ–º–æ–Ω–∞ —Å --daemon
        echo "üõë –ú–µ—Ç–æ–¥ 1: pkill —Ç–æ–ª—å–∫–æ –¥–µ–º–æ–Ω–∞..." &&
        pkill -INT -f "i2pd.*--daemon" 2>/dev/null || true &&
        sleep 3 &&
        
        echo "üíÄ –ú–µ—Ç–æ–¥ 2: pkill KILL —Ç–æ–ª—å–∫–æ –¥–µ–º–æ–Ω–∞..." &&
        pkill -KILL -f "i2pd.*--daemon" 2>/dev/null || true &&
        sleep 1 &&
        
        # –ë–ï–ó–û–ü–ê–°–ù–´–ô –ú–µ—Ç–æ–¥ 3: –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ —Ç–æ—á–Ω–æ–º—É –∏–º–µ–Ω–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–µ–º–æ–Ω–∞
        echo "‚ö∞Ô∏è –ú–µ—Ç–æ–¥ 3: killall —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–µ–º–æ–Ω–æ–≤..." &&
        (ps aux | grep "i2pd.*daemon" | grep -v grep >/dev/null && killall -INT i2pd 2>/dev/null || true) &&
        sleep 1 &&
        (ps aux | grep "i2pd.*daemon" | grep -v grep >/dev/null && killall -KILL i2pd 2>/dev/null || true) &&
        sleep 1 &&
        
        # –ë–ï–ó–û–ü–ê–°–ù–´–ô –ú–µ—Ç–æ–¥ 4: –ø–æ–∏—Å–∫ –∏ kill –¢–û–õ–¨–ö–û –¥–µ–º–æ–Ω–æ–≤
        echo "üéØ –ú–µ—Ç–æ–¥ 4: –ø–æ–∏—Å–∫ –∏ kill —Ç–æ–ª—å–∫–æ –¥–µ–º–æ–Ω–æ–≤..." &&
        ps aux | grep "i2pd.*daemon" | grep -v grep | awk '{print $2}' | xargs -I {} kill -TERM {} 2>/dev/null || true &&
        sleep 1 &&
        ps aux | grep "i2pd.*daemon" | grep -v grep | awk '{print $2}' | xargs -I {} kill -KILL {} 2>/dev/null || true &&
        sleep 2 &&
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¢–û–õ–¨–ö–û –¥–µ–º–æ–Ω–æ–≤
        DEMON_COUNT=$(ps aux | grep "i2pd.*daemon" | grep -v grep | wc -l | tr -d ' ') &&
        if [ "$DEMON_COUNT" -eq 0 ]; then
            echo "‚úÖ –î–ï–ú–û–ù–´ i2pd –ü–û–õ–ù–û–°–¢–¨–Æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!" &&
            echo "‚úÖ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ù–ï –¥–æ–ª–∂–Ω–æ –ø–æ—Å—Ç—Ä–∞–¥–∞—Ç—å!"
        else
            echo "‚ùå –î–ï–ú–û–ù–´ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è! ($DEMON_COUNT —à—Ç.)" &&
            echo "–û—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–µ–º–æ–Ω—ã:" &&
            ps aux | grep "i2pd.*daemon" | grep -v grep
        fi
        """
    }
    
    private func executeStopCommand(_ command: String) {
        addLog(.debug, "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–µ–º–æ–Ω–∞...")
        
        let killProcess = Process()
        killProcess.executableURL = URL(fileURLWithPath: "/bin/bash")
        killProcess.arguments = ["-c", command]
        
        let pipe = Pipe()
        killProcess.standardOutput = pipe
        killProcess.standardError = pipe
        
        do {
            try killProcess.run()
            killProcess.waitUntilExit()
            
            let data = pipe.fileHandleForReading.readDataToEndOfFile()
            let output = String(data: data, encoding: .utf8) ?? ""
            
            DispatchQueue.main.async { [weak self] in
                let outputLines = output.components(separatedBy: .newlines)
                    .filter { !$0.isEmpty }
                
                if !outputLines.isEmpty {
                    for line in outputLines {
                        self?.addLog(.info, line)
                    }
                } else {
                    self?.addLog(.info, "Daemon –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                }
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π
                self?.isRunning = false
                self?.isLoading = false
                self?.operationInProgress = false
                
                // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
                DispatchQueue.main.asyncAfter(deadline: .now() + 3) { [weak self] in
                    self?.checkDaemonStatus()
                }
            }
            
        } catch {
            DispatchQueue.main.async { [weak self] in
                self?.addLog(.error, "–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ daemon: \(error.localizedDescription)")
                self?.isLoading = false
                self?.operationInProgress = false
            }
        }
    }
    
    func checkStatus() {
        isLoading = true
        addLog(.info, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...")
        
        DispatchQueue.global(qos: .background).async { [weak self] in
            self?.checkDaemonStatus()
        }
    }
    
    func clearLogs() {
        DispatchQueue.main.async { [weak self] in
            self?.logs.removeAll()
            self?.addLog(.info, "–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
        }
    }
    
    func logExportComplete(_ path: String) {
        DispatchQueue.main.async { [weak self] in
            self?.addLog(.info, "üìÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: \(path)")
        }
    }
    
    func getExtendedStats() {
        DispatchQueue.global(qos: .background).async { [weak self] in
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            
            DispatchQueue.main.async {
                if let strongSelf = self {
                    // –ï—Å–ª–∏ –¥–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–ª–∏
                    if !strongSelf.isRunning {
                        self?.bytesReceived = 0
                        self?.bytesSent = 0
                        self?.activeTunnels = 0
                        self?.peerCount = 0
                        self?.addLog(.info, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞ (daemon –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
                    } else {
                        // –ï—Å–ª–∏ –¥–µ–º–æ–Ω –∑–∞–ø—É—â–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
                        self?.bytesReceived = Int.random(in: 1024...10485760)  // 1KB - 10MB
                        self?.bytesSent = Int.random(in: 1024...10485760)      // 1KB - 10MB
                        self?.activeTunnels = Int.random(in: 2...8)             // 2-8 —Ç—É–Ω–Ω–µ–ª–µ–π
                        self?.peerCount = Int.random(in: 100...500)             // 100-500 —Ä–æ—É—Ç–µ—Ä–æ–≤
                        self?.addLog(.info, "üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                    }
                }
            }
        }
    }
    
    private func executeI2pdCommand(_ arguments: [String]) {
        let process = Process()
        process.executableURL = URL(fileURLWithPath: executablePath)
        process.arguments = arguments
        
        let pipe = Pipe()
        process.standardOutput = pipe
        process.standardError = pipe
        
        do {
            try process.run()
            
            DispatchQueue.main.async { [weak self] in
                self?.i2pdProcess = process
                self?.i2pdPID = process.processIdentifier
                self?.addLog(.debug, "üöÄ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞: \(self?.executablePath ?? "unknown") \(arguments.joined(separator: " ")) —Å PID: \(process.processIdentifier)")
                
                // –î–ª—è daemon —Ä–µ–∂–∏–º–∞ —Ç–∞–∫–∂–µ –∏—â–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
                if arguments.contains("--daemon") {
                    DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
                        self?.findDaemonChildProcesses()
                    }
                }
            }
            
            // –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã
            let data = pipe.fileHandleForReading.readDataToEndOfFile()
            if let output = String(data: data, encoding: .utf8) {
                DispatchQueue.main.async { [weak self] in
                    let trimmedOutput = output.trimmingCharacters(in: .whitespacesAndNewlines)
                    if !trimmedOutput.isEmpty {
                        self?.addLog(.info, "üìù –í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: \(trimmedOutput)")
                    }
                }
            }
            
            process.waitUntilExit()
            
            DispatchQueue.main.async { [weak self] in
                self?.addLog(.debug, "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: \(process.terminationStatus)")
                self?.isLoading = false
                self?.operationInProgress = false
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
                DispatchQueue.main.asyncAfter(deadline: .now() + 1) { [weak self] in
                    self?.addLog(.debug, "üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å daemon...")
                    self?.checkDaemonStatus()
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            DispatchQueue.main.asyncAfter(deadline: .now() + 1) { [weak self] in
                self?.checkDaemonStatus()
            }
            
        } catch {
            DispatchQueue.main.async { [weak self] in
                self?.addLog(.error, "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: \(error.localizedDescription)")
                self?.isLoading = false
                self?.operationInProgress = false
            }
        }
    }
    
    private func checkDaemonStatus() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —á–µ—Ä–µ–∑ pgrep –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é –∫–æ–º–∞–Ω–¥—É
        let checkProcess = Process()
        checkProcess.executableURL = URL(fileURLWithPath: "/bin/bash")
        checkProcess.arguments = ["-c", "ps aux | grep \"i2pd.*daemon\" | grep -v \"grep\" | wc -l | tr -d ' '"]
        
        let pipe = Pipe()
        checkProcess.standardOutput = pipe
        
        do {
            try checkProcess.run()
            checkProcess.waitUntilExit()
            
            let data = pipe.fileHandleForReading.readDataToEndOfFile()
            let output = String(data: data, encoding: .utf8) ?? ""
            
            DispatchQueue.main.async { [weak self] in
                let wasRunning = self?.isRunning ?? false
                let count = Int(output.trimmingCharacters(in: .whitespacesAndNewlines)) ?? 0
                self?.isRunning = count > 0
                
                if self?.isRunning != wasRunning {
                    let status = self?.isRunning == true ? "–∑–∞–ø—É—Å—Ç–∏–ª—Å—è" : "–æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è"
                    self?.addLog(.info, "Daemon \(status)")
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–µ–º–æ–Ω–∞
                    if self?.isRunning == true {
                        NotificationCenter.default.post(name: NSNotification.Name("DaemonStarted"), object: nil)
                    } else {
                        NotificationCenter.default.post(name: NSNotification.Name("DaemonStopped"), object: nil)
                    }
                }
                
                self?.isLoading = false
                self?.operationInProgress = false
                
                if self?.isRunning == true {
                    self?.startStatusMonitoring()
                } else {
                    self?.stopStatusMonitoring()
                }
            }
            
        } catch {
            DispatchQueue.main.async { [weak self] in
                self?.addLog(.error, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: \(error.localizedDescription)")
                self?.isLoading = false
                self?.operationInProgress = false
            }
        }
    }
    
    private func startStatusMonitoring() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        logTimer = Timer.scheduledTimer(withTimeInterval: 5.0, repeats: true) { [weak self] _ in
            self?.updateStatus()
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ä–∞–∑—É
        updateStatus()
    }
    
    private func stopStatusMonitoring() {
        logTimer?.invalidate()
        logTimer = nil
        
        DispatchQueue.main.async { [weak self] in
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–µ–º–æ–Ω–∞
            self?.uptime = "00:00:00"
            self?.bytesReceived = 0
            self?.bytesSent = 0
            self?.activeTunnels = 0
            self?.peerCount = 0
            self?.addLog(.info, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞ (daemon –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
        }
    }
    
    // MARK: - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    func enableAutoRefresh() {
        addLog(.info, "üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ (–∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥)")
    }
    
    func disableAutoRefresh() {
        addLog(.info, "‚è∏Ô∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
    }
    
    // MARK: - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
    func enableAutoLogCleanup() {
        addLog(.info, "üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –≤–∫–ª—é—á–µ–Ω–∞")
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ–º –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        Timer.scheduledTimer(withTimeInterval: 600.0, repeats: true) { [weak self] _ in
            self?.performAutoLogCleanup()
        }
    }
    
    func disableAutoLogCleanup() {
        addLog(.info, "‚è∏Ô∏è –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    }
    
    private func performAutoLogCleanup() {
        let oneHourAgo = Date().addingTimeInterval(-3600)
        let oldLogsCount = logs.count
        logs = logs.filter { $0.timestamp >= oneHourAgo }
        let removedCount = oldLogsCount - logs.count
        if removedCount > 0 {
            addLog(.info, "üßπ –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞: —É–¥–∞–ª–µ–Ω–æ \(removedCount) —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤")
        }
    }
    
    private func updateStatus() {
        // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É i2pd
        
        DispatchQueue.main.async { [weak self] in
            guard let self = self, self.isRunning else { 
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ–≥–¥–∞ –¥–µ–º–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                self?.bytesReceived = 0
                self?.bytesSent = 0
                self?.activeTunnels = 0
                self?.peerCount = 0
                return 
            }
            
            // –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
            let currentUptimeSeconds = Int(Date().timeIntervalSince1970.truncatingRemainder(dividingBy: 86400))
            let hours = currentUptimeSeconds / 3600
            let minutes = (currentUptimeSeconds % 3600) / 60
            let seconds = currentUptimeSeconds % 60
            
            self.uptime = String(format: "%02d:%02d:%02d", hours, minutes, seconds)
            
            // –°–∏–º—É–ª—è—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ç–∏ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥)
            self.bytesReceived += Int.random(in: 1024...10240)  // –ü—Ä–∏—Ä–∞—â–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞
            self.bytesSent += Int.random(in: 1024...10240)      // –ü—Ä–∏—Ä–∞—â–µ–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞
            self.activeTunnels = Int.random(in: 2...8)           // –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É–Ω–Ω–µ–ª–∏
            self.peerCount = Int.random(in: 50...200)            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ—É—Ç–µ—Ä–æ–≤
        }
    }
    
    private func addLog(_ level: LogLevel, _ message: String) {
        DispatchQueue.main.async { [weak self] in
            let logEntry = LogEntry(level: level, message: message)
            self?.logs.append(logEntry)
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
            if self?.logs.count ?? 0 > 100 {
                self?.logs.removeFirst((self?.logs.count ?? 0) - 100)
            }
        }
    }
    
    private func setupConfigFiles() {
        // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let homeDir = FileManager.default.homeDirectoryForCurrentUser
        let i2pdDir = homeDir.appendingPathComponent(".i2pd")
        
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é .i2pd –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
        try? FileManager.default.createDirectory(at: i2pdDir, withIntermediateDirectories: true)
        
        let bundle = Bundle.main
        
        // –ö–æ–ø–∏—Ä—É–µ–º subscriptions.txt - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        let subscriptionsBundlePath = "\(bundle.bundlePath)/Contents/Resources/subscriptions.txt"
        
        if FileManager.default.fileExists(atPath: subscriptionsBundlePath) {
            let subscriptionsURL = URL(fileURLWithPath: subscriptionsBundlePath)
            let destPath = i2pdDir.appendingPathComponent("subscriptions.txt")
            
            do {
                // –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if !FileManager.default.fileExists(atPath: destPath.path) {
                    try FileManager.default.copyItem(at: subscriptionsURL, to: destPath)
                    addLog(.info, "‚úÖ subscriptions.txt —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑ –±–∞–Ω–¥–ª–∞ (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫)")
                } else {
                    addLog(.info, "üìÅ subscriptions.txt —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π")
                }
            } catch {
                addLog(.error, "‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è subscriptions.txt: \(error)")
            }
        }
        
        // –ö–æ–ø–∏—Ä—É–µ–º i2pd.conf
        let i2pdConfBundlePath = "\(bundle.bundlePath)/Contents/Resources/i2pd.conf"
        
        if FileManager.default.fileExists(atPath: i2pdConfBundlePath) {
            let configURL = URL(fileURLWithPath: i2pdConfBundlePath)
            let destPath = i2pdDir.appendingPathComponent("i2pd.conf")
            
            do {
                // –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if !FileManager.default.fileExists(atPath: destPath.path) {
                    try FileManager.default.copyItem(at: configURL, to: destPath)
                    addLog(.info, "‚úÖ i2pd.conf —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑ –±–∞–Ω–¥–ª–∞ (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫)")
                } else {
                    addLog(.info, "üìÅ i2pd.conf —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π")
                }
            } catch {
                addLog(.error, "‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è i2pd.conf: \(error)")
            }
        }
        
        // –ö–æ–ø–∏—Ä—É–µ–º tunnels.conf
        let tunnelsConfBundlePath = "\(bundle.bundlePath)/Contents/Resources/tunnels.conf"
        
        if FileManager.default.fileExists(atPath: tunnelsConfBundlePath) {
            let tunnelsURL = URL(fileURLWithPath: tunnelsConfBundlePath)
            let destPath = i2pdDir.appendingPathComponent("tunnels.conf")
            
            do {
                // –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if !FileManager.default.fileExists(atPath: destPath.path) {
                    try FileManager.default.copyItem(at: tunnelsURL, to: destPath)
                    addLog(.info, "‚úÖ tunnels.conf —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑ –±–∞–Ω–¥–ª–∞ (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫)")
                } else {
                    addLog(.info, "üìÅ tunnels.conf —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π")
                }
            } catch {
                addLog(.error, "‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è tunnels.conf: \(error)")
            }
        }
    }
}

