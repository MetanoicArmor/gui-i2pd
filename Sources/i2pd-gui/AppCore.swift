import SwiftUI
import Foundation
import AppKit

// MARK: - App Entry Point
@main
struct I2pdGUIApp: App {
    @AppStorage("darkMode") private var darkMode = true
    
    init() {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ UserDefaults –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if UserDefaults.standard.object(forKey: "darkMode") == nil {
            UserDefaults.standard.set(true, forKey: "darkMode")
        }
    }
    
    var body: some Scene {
        WindowGroup {
            ContentView()
        }
        .windowStyle(.titleBar)
        .defaultSize(width: 800, height: 900)
        .windowResizability(.contentSize)
    }
}

// MARK: - Main Content View
struct ContentView: View {
    @StateObject private var i2pdManager = I2pdManager()
    @State private var showingSettings = false
    
    
    var body: some View {
        VStack(spacing: 2) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            Text("I2P Daemon GUI")
                .font(.title)
                .fontWeight(.semibold)
                .foregroundColor(.primary)
                .lineLimit(1)
                .minimumScaleFactor(0.8)
                .offset(y: -40)
            
            // –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
            StatusCard(
                isRunning: i2pdManager.isRunning,
                uptime: i2pdManager.uptime,
                peers: i2pdManager.peerCount
            )
            .padding(.horizontal, 8)
            
            // –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å–µ—Ç–µ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –≤—Å–µ–≥–¥–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞
            VStack(spacing: 2) {
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
                HStack {
                    Image(systemName: "chart.bar.fill")
                        .font(.system(size: 16, weight: .medium))
                        .foregroundColor(.orange)
                    Text("üìä –°–µ—Ç–µ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                        .font(.headline)
                        .fontWeight(.semibold)
                    Spacer()
                    Button("üîÑ") {
                        i2pdManager.getExtendedStats()
                    }
                    .disabled(!i2pdManager.isRunning)
                    .buttonStyle(.borderless)
                }
                .padding(.horizontal, 20)
                .padding(.vertical, 8)
                .background(Color(NSColor.controlBackgroundColor))
                .cornerRadius(12)
                
                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ - –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞
                HStack(spacing: 16) {
                    HStack(spacing: 6) {
                        Image(systemName: "arrow.down.circle.fill")
                            .foregroundColor(.green)
                            .font(.caption)
                        Text("–ü–æ–ª—É—á–µ–Ω–æ: \(i2pdManager.receivedBytes)")
                            .font(.caption)
                    }
                    
                    HStack(spacing: 6) {
                        Image(systemName: "arrow.up.circle.fill")
                            .foregroundColor(.blue)
                            .font(.caption)
                        Text("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: \(i2pdManager.sentBytes)")
                            .font(.caption)
                    }
                    
                    Spacer()
                    
                    HStack(spacing: 6) {
                        Image(systemName: "lock.fill")
                            .foregroundColor(.purple)
                            .font(.caption)
                        Text("–¢—É–Ω–Ω–µ–ª–∏: \(i2pdManager.activeTunnels)")
                            .font(.caption)
                    }
                    
                    HStack(spacing: 6) {
                        Image(systemName: "wifi")
                            .foregroundColor(.orange)
                            .font(.caption)
                        Text("–†–æ—É—Ç–µ—Ä—ã: \(i2pdManager.peerCount)")
                            .font(.caption)
                    }
                }
                .padding(.horizontal, 20)
                .padding(.vertical, 4)
            }
            .padding(.horizontal, 8)
            
            // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            ControlButtons(
                i2pdManager: i2pdManager,
                showingSettings: $showingSettings,
            )
            .padding(.horizontal, 8)
            
            // –°–µ–∫—Ü–∏—è –ª–æ–≥–æ–≤ - –≤—Å–µ–≥–¥–∞ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞
            VStack(spacing: 2) {
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
                HStack {
                    Image(systemName: "doc.text")
                        .font(.system(size: 16, weight: .medium))
                        .foregroundColor(.blue)
                    Text("üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã")
                        .font(.headline)
                        .fontWeight(.semibold)
                    Spacer()
                    if !i2pdManager.logs.isEmpty {
                        Button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å") {
                            i2pdManager.clearLogs()
                        }
                        .buttonStyle(.bordered)
                        .controlSize(.small)
                    }
                }
                .padding(.horizontal, 20)
                .padding(.vertical, 8)
                .background(Color(NSColor.controlBackgroundColor))
                .cornerRadius(12)
                
                // –õ–æ–≥–∏ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ
                ScrollView {
                    VStack(alignment: .leading, spacing: 3) {
                        ForEach(i2pdManager.logs.prefix(30), id: \.id) { log in
                            HStack(spacing: 8) {
                                Text(log.timestamp.formatted(.dateTime.hour().minute().second()))
                                    .font(.caption2)
                                    .foregroundColor(.secondary)
                                    .frame(width: 50, alignment: .leading)
                                
                                Text(log.level.rawValue)
                                    .font(.caption2)
                                    .padding(.horizontal, 4)
                                    .padding(.vertical, 1)
                                    .background(log.level == .error ? Color.red : (log.level == .warn ? Color.orange : Color.blue))
                                    .foregroundColor(.white)
                                    .cornerRadius(2)
                                    .frame(width: 60, alignment: .center)
                                
                                Text(log.message)
                                    .font(.caption2)
                                    .frame(maxWidth: .infinity, alignment: .leading)
                                    .lineLimit(nil)
                                    .multilineTextAlignment(.leading)
                            }
                            .padding(.horizontal, 20)
                            .padding(.vertical, 1)
                        }
                        
                        if i2pdManager.logs.isEmpty {
                    VStack(spacing: 8) {
                        Image(systemName: "doc.text")
                                    .font(.system(size: 24))
                            .foregroundColor(.secondary)
                                Text("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                                Text("–õ–æ–≥–∏ –ø–æ—è–≤—è—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –¥–µ–º–æ–Ω–∞")
                                    .font(.caption)
                            .foregroundColor(.secondary)
                    }
                    .frame(maxWidth: .infinity)
                    .padding(.vertical, 40)
                }
                    }
                }
                .frame(maxHeight: 250) // –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –ª–æ–≥–æ–≤
            }
            .padding(.horizontal, 8)
        }
        .frame(width: 1000, height: 650)
        .fixedSize()
        .onAppear {
            i2pdManager.checkStatus()
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                applyTheme()
                i2pdManager.getExtendedStats()
            }
        }
        .sheet(isPresented: $showingSettings) {
            SettingsView(i2pdManager: i2pdManager)
        }
        .overlay(alignment: .bottom) {
            if i2pdManager.isLoading {
                HStack {
                    ProgressView()
                        .scaleEffect(0.6)
                    Text("–ó–∞–≥—Ä—É–∑–∫–∞...")
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
                .padding(.horizontal, 12)
                .padding(.vertical, 6)
                .background(Color(NSColor.windowBackgroundColor))
                .cornerRadius(8)
                .shadow(radius: 2)
                .padding(.bottom, 20)
            }
        }
    }
    
    private func applyTheme() {
        let isDarkMode = UserDefaults.standard.bool(forKey: "darkMode")
        if isDarkMode {
            NSApp.appearance = NSAppearance(named: .darkAqua)
        } else {
            NSApp.appearance = NSAppearance(named: .aqua)
        }
    }
    
}

// MARK: - About View
struct AboutView: View {
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
        VStack(spacing: 20) {
            // –ò–∫–æ–Ω–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            Image(systemName: "network")
                .font(.system(size: 64))
                .foregroundColor(.blue)
            
            Text("I2P Daemon GUI")
                .font(.largeTitle)
                .fontWeight(.bold)
                .lineLimit(1)
                .minimumScaleFactor(0.8)
            
            Text("–í–µ—Ä—Å–∏—è 2.58.0")
                .font(.headline)
                .foregroundColor(.secondary)
                .lineLimit(1)
                .minimumScaleFactor(0.9)
            
            VStack(spacing: 8) {
                Text("–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π GUI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è I2P Daemon")
                    .multilineTextAlignment(.center)
                Text("‚Ä¢ –†–∞–¥–∏–∫–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ daemon")
                Text("‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
                Text("‚Ä¢ –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –±–∏–Ω–∞—Ä–Ω–∏–∫ i2pd 2.58.0")
                Text("‚Ä¢ –ü–æ–¥–≤–∏–∂–Ω–æ–µ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–µ –æ–∫–Ω–æ")
                Text("‚Ä¢ –¢—ë–º–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
            }
            .font(.body)
            .multilineTextAlignment(.center)
            
            Divider()
            
            VStack(spacing: 2) {
                Text("–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∞ SwiftUI")
                    .font(.caption)
                Text("Swift 5.7+ ‚Ä¢ macOS 14.0+")
                    .font(.caption2)
                    .foregroundColor(.secondary)
            }
            
            HStack(spacing: 20) {
                Link("GitHub Repository", destination: URL(string: "https://github.com/MetanoicArmor/gui-i2pd")!)
                Link("I2P Official", destination: URL(string: "https://geti2p.net/")!)
            }
            .font(.caption)
            
            Button("–ó–∞–∫—Ä—ã—Ç—å") {
                dismiss()
            }
            .buttonStyle(.bordered)
            .padding(.top)
        }
        .padding(30)
        .frame(maxWidth: 400)
    }
}


// MARK: - Settings View
struct SettingsView: View {
    @ObservedObject var i2pdManager: I2pdManager
    @Environment(\.dismiss) private var dismiss
    @AppStorage("daemonPort") private var daemonPort = 4444
    @AppStorage("socksPort") private var socksPort = 4447
    @AppStorage("bandwidthLimit") private var bandwidthLimit = "unlimited"
    @AppStorage("autoStart") private var autoStart = false
    @AppStorage("darkMode") private var darkMode = true
    @AppStorage("notificationsEnabled") private var notificationsEnabled = false
    @AppStorage("compactMode") private var compactMode = false
    @AppStorage("autoRefresh") private var autoRefresh = true
    @AppStorage("autoLogCleanup") private var autoLogCleanup = false
    
    var body: some View {
        VStack(spacing: 0) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            HStack {
                Text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
                    .font(.largeTitle)
                    .fontWeight(.bold)
                    .lineLimit(1)
                    .minimumScaleFactor(0.8)
                
                Spacer()
                
                Button("–ì–æ—Ç–æ–≤–æ") {
                    saveSettings()
                    dismiss()
                }
                .buttonStyle(.borderedProminent)
                
                Button("–û—Ç–º–µ–Ω–∞") {
                    dismiss()
                }
                .buttonStyle(.bordered)
            }
            .padding(16)
            .background(Color(NSColor.windowBackgroundColor))
            
            Divider()
            
            ScrollView {
                VStack(spacing: 12) {
                    // –°–µ—Ç–µ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
                    SettingsSection(title: "üåê –°–µ—Ç–µ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", icon: "globe") {
                        VStack(spacing: 12) {
                            // –ü–æ—Ä—Ç HTTP –ø—Ä–æ–∫—Å–∏ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
                            HStack(spacing: 12) {
                                Text("–ü–æ—Ä—Ç HTTP –ø—Ä–æ–∫—Å–∏")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 220, alignment: .leading)
                                
                                Text("4444")
                                    .font(.system(.body, design: .monospaced, weight: .medium))
                                    .foregroundColor(.secondary)
                                    .frame(width: 180, alignment: .leading)
                                    .padding(.vertical, 8)
                                    .padding(.horizontal, 12)
                                    .background(Color(NSColor.controlBackgroundColor))
                                    .cornerRadius(6)
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                            
                            // –ü–æ—Ä—Ç SOCKS5 –ø—Ä–æ–∫—Å–∏ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
                            HStack(spacing: 12) {
                                Text("–ü–æ—Ä—Ç SOCKS5 –ø—Ä–æ–∫—Å–∏")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 220, alignment: .leading)
                                
                                Text("4447")
                                    .font(.system(.body, design: .monospaced, weight: .medium))
                                    .foregroundColor(.secondary)
                                    .frame(width: 180, alignment: .leading)
                                    .padding(.vertical, 8)
                                    .padding(.horizontal, 12)
                                    .background(Color(NSColor.controlBackgroundColor))
                                    .cornerRadius(6)
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                            
                            Divider()
                            
                            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
                            VStack(alignment: .leading, spacing: 8) {
                                Text("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(maxWidth: .infinity, alignment: .leading)
                                
                                Picker("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏", selection: $bandwidthLimit) {
                                    Text("–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π").tag("unlimited")
                                    Text("128 KB/s").tag("128")
                                    Text("512 KB/s").tag("512")
                                    Text("1 MB/s").tag("1024")
                                    Text("5 MB/s").tag("5120")
                                }
                                .pickerStyle(.segmented)
                                .frame(maxWidth: .infinity)
                            }
                        }
                    }
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
                    SettingsSection(title: "üíª –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", icon: "laptop") {
                        VStack(spacing: 12) {
                            HStack(spacing: 12) {
                                Text("–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ daemon")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 250, alignment: .leading)
                                
                            HStack {
                                Spacer()
                                    Toggle("", isOn: $autoStart)
                                        .labelsHidden()
                                }
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                            
                            HStack(spacing: 12) {
                                Text("–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 250, alignment: .leading)
                                
                            HStack {
                                Spacer()
                                    Toggle("", isOn: $notificationsEnabled)
                                        .labelsHidden()
                            }
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                        }
                    }
                    
                    // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    SettingsSection(title: "üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å", icon: "paintpalette") {
                        VStack(spacing: 12) {
                            VStack(alignment: .leading, spacing: 8) {
                                Text("–¢–µ–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(maxWidth: .infinity, alignment: .leading)
                                Picker("–¢–µ–º–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", selection: $darkMode) {
                                    Text("–°–≤–µ—Ç–ª–∞—è").tag(false)
                                    Text("–¢—ë–º–Ω–∞—è").tag(true)
                                }
                                .pickerStyle(.segmented)
                                .frame(maxWidth: .infinity)
                            }
                            
                            HStack(spacing: 12) {
                                Text("–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ä–µ–∂–∏–º")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 220, alignment: .leading)
                            
                            HStack {
                                Spacer()
                                    Toggle("", isOn: $compactMode)
                                        .labelsHidden()
                            }
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                        }
                    }
                    
                    // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                    SettingsSection(title: "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", icon: "chart.bar") {
                        VStack(spacing: 12) {
                            HStack(spacing: 12) {
                                Text("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 250, alignment: .leading)
                                
                            HStack {
                                Spacer()
                                    Toggle("", isOn: $autoRefresh)
                                        .labelsHidden()
                                }
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                            
                            HStack(spacing: 12) {
                                Text("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 250, alignment: .leading)
                                
                            HStack {
                                Spacer()
                                    Toggle("", isOn: $autoLogCleanup)
                                        .labelsHidden()
                            }
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                        }
                    }
                    
                    // –î–∞–Ω–Ω—ã–µ
                    SettingsSection(title: "üìÅ –î–∞–Ω–Ω—ã–µ", icon: "folder") {
                        VStack(spacing: 12) {
                            VStack(alignment: .leading, spacing: 8) {
                                Text("–ü—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º")
                                    .font(.subheadline)
                                    .fontWeight(.medium)
                                    .frame(maxWidth: .infinity, alignment: .leading)
                                HStack {
                                    Text("~/.i2pd")
                                        .foregroundColor(.secondary)
                                        .font(.system(.caption, design: .monospaced))
                                        .frame(maxWidth: .infinity, alignment: .leading)
                                    Button("–ò–∑–º–µ–Ω–∏—Ç—å") {
                                        selectDataDirectory()
                                    }
                                    .buttonStyle(.borderless)
                                    .controlSize(.small)
                                }
                            }
                            
                            Divider()
                            
                            VStack(spacing: 12) {
                                Button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à") {
                                    clearDataCache()
                                }
                                .foregroundColor(.red)
                                .buttonStyle(.borderless)
                                .frame(maxWidth: .infinity, alignment: .leading)
                                
                                Button("üìä –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤") {
                                    exportLogs()
                                }
                                .foregroundColor(.blue)
                                .buttonStyle(.borderless)
                                .frame(maxWidth: .infinity, alignment: .leading)
                            }
                        }
                    }
                    
                    // –û –ø—Ä–æ–≥—Ä–∞–º–º–µ
                    SettingsSection(title: "‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ", icon: "info.circle") {
                        VStack(spacing: 12) {
                            HStack {
                                Text("–í–µ—Ä—Å–∏—è:")
                                    .frame(width: 100, alignment: .leading)
                                Text("2.58.0")
                                    .foregroundColor(.secondary)
                                    .fontWeight(.medium)
                                Spacer()
                            }
                            
                            HStack {
                                Text("–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:")
                                    .frame(width: 100, alignment: .leading)
                                Text("Vade")
                                    .foregroundColor(.secondary)
                                    .fontWeight(.medium)
                                Spacer()
                            }
                        }
                    }
                    
                    // –î–µ–π—Å—Ç–≤–∏—è
                    SettingsSection(title: "üîÑ –î–µ–π—Å—Ç–≤–∏—è", icon: "gear") {
                        VStack(spacing: 12) {
                            HStack(spacing: 12) {
                                Button("üîß –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏") {
                                    resetSettings()
                                }
                                .foregroundColor(.orange)
                                .buttonStyle(.borderless)
                                .frame(minWidth: 180, alignment: .leading)
                                
                                Spacer()
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                            
                            HStack(spacing: 12) {
                                Button("üìä –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞") {
                                    i2pdManager.getExtendedStats()
                                }
                                .disabled(!i2pdManager.isRunning)
                                .buttonStyle(.borderless)
                                .frame(minWidth: 180, alignment: .leading)
                                
                                Spacer()
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                        }
                    }
                    
                    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏ —Ñ–∞–π–ª—ã
                    SettingsSection(title: "üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", icon: "doc.text") {
                        VStack(spacing: 12) {
                            HStack(spacing: 12) {
                                Text("–ö–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 200, alignment: .leading)
                                
                                Button("üìÅ –û—Ç–∫—Ä—ã—Ç—å") {
                                    openConfigFile()
                                }
                                .buttonStyle(.borderless)
                                
                                Spacer()
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                            
                            HStack(spacing: 12) {
                                Text("–ü–∞–ø–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 200, alignment: .leading)
                                
                                Button("üìÇ –û—Ç–∫—Ä—ã—Ç—å") {
                                    openLogsDirectory() // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏ –∫–∞–∫ –ø–∞–ø–∫—É –¥–∞–Ω–Ω—ã—Ö
                                }
                                .buttonStyle(.borderless)
                                
                                Spacer()
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                            
                            HStack(spacing: 12) {
                                Text("–ñ—É—Ä–Ω–∞–ª—ã")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 200, alignment: .leading)
                                
                                Button("üìã –û—Ç–∫—Ä—ã—Ç—å") {
                                    openLogsDirectory()
                                }
                                .buttonStyle(.borderless)
                                
                                Spacer()
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                        }
                    }
                    
                    // –¢—É–Ω–Ω–µ–ª–∏
                    SettingsSection(title: "üöá –¢—É–Ω–Ω–µ–ª–∏", icon: "tunnel.fill") {
                        VStack(spacing: 12) {
                            HStack(spacing: 12) {
                                Text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É–Ω–Ω–µ–ª—è–º–∏")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 200, alignment: .leading)
                                
                                Button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å") {
                                    openTunnelManager()
                                }
                                .buttonStyle(.borderless)
                                .disabled(!i2pdManager.isRunning)
                                
                                Spacer()
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                            
                            HStack(spacing: 12) {
                                Text("–ü—Ä–∏–º–µ—Ä —Ç—É–Ω–Ω–µ–ª–µ–π")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 200, alignment: .leading)
                                
                                Button("üìù –ü–æ–∫–∞–∑–∞—Ç—å") {
                                    showTunnelExamples()
                                }
                                .buttonStyle(.borderless)
                                
                                Spacer()
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                        }
                    }
                    
                    // –í–µ–±-–∫–æ–Ω—Å–æ–ª—å
                    SettingsSection(title: "üåê –í–µ–±-–∫–æ–Ω—Å–æ–ª—å", icon: "globe") {
                        VStack(spacing: 12) {
                            HStack(spacing: 12) {
                                Text("–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.primary)
                                    .frame(minWidth: 200, alignment: .leading)
                                
                                Button("üåê –û—Ç–∫—Ä—ã—Ç—å") {
                                    openWebConsole()
                                }
                                .buttonStyle(.borderless)
                                .disabled(!i2pdManager.isRunning)
                                
                                Spacer()
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                            
                            HStack(spacing: 12) {
                                Text("–ü–æ—Ä—Ç: 7070")
                                    .font(.system(.body, design: .default, weight: .medium))
                                    .foregroundColor(.secondary)
                                    .frame(minWidth: 200, alignment: .leading)
                                
                                Button("üîó –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å URL") {
                                    copyWebConsoleURL()
                                }
                                .buttonStyle(.borderless)
                                
                                Spacer()
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                            
                        }
                    }
                }
                .padding(.horizontal, 8)
                .padding(.vertical, 16)
            }
        }
        .frame(minWidth: 750, maxWidth: .infinity, minHeight: 500, maxHeight: .infinity)
    }
    
    private func saveSettings() {
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ UserDefaults (—É–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ @AppStorage)
        i2pdManager.logExportComplete("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ
        DispatchQueue.main.async {
            if darkMode {
                NSApp.appearance = NSAppearance(named: .darkAqua)
            } else {
                NSApp.appearance = NSAppearance(named: .aqua)
            }
        }
    }
    
    private func selectDataDirectory() {
        let panel = NSOpenPanel()
        panel.allowsMultipleSelection = false
        panel.canChooseFiles = false
        panel.canChooseDirectories = true
        panel.canCreateDirectories = true
        panel.prompt = "–í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É –¥–∞–Ω–Ω—ã—Ö"
        
        if panel.runModal() == .OK, let url = panel.url {
            i2pdManager.logExportComplete("üìÅ –í—ã–±—Ä–∞–Ω –ø—É—Ç—å –¥–∞–Ω–Ω—ã—Ö: \(url.path)")
        }
    }
    
    private func clearDataCache() {
        let alert = NSAlert()
        alert.messageText = "–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"
        alert.informativeText = "–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."
        alert.addButton(withTitle: "–û—á–∏—Å—Ç–∏—Ç—å")
        alert.addButton(withTitle: "–û—Ç–º–µ–Ω–∏—Ç—å")
        
        if alert.runModal() == .alertFirstButtonReturn {
            // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—á–∏—Å—Ç–∫—É –∫—ç—à–∞
            i2pdManager.logExportComplete("üóëÔ∏è –ö—ç—à –æ—á–∏—â–µ–Ω")
        }
    }
    
    private func exportLogs() {
        let logsContent = i2pdManager.logs.map { log in
            "[\(log.timestamp.formatted())] \(log.level.rawValue): \(log.message)"
        }.joined(separator: "\n")
        
        let panel = NSSavePanel()
        panel.allowedContentTypes = [.text]
        panel.nameFieldStringValue = "i2p-logs-\(Date().formatted(.iso8601)).txt"
        
        if panel.runModal() == .OK, let url = panel.url {
            try? logsContent.write(to: url, atomically: true, encoding: .utf8)
            i2pdManager.logExportComplete("üìÑ –õ–æ–≥–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: \(url.path)")
        }
    }
    
    private func resetSettings() {
        let alert = NSAlert()
        alert.messageText = "–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫"
        alert.informativeText = "–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –í—ã —É–≤–µ—Ä–µ–Ω—ã?"
        alert.addButton(withTitle: "–°–±—Ä–æ—Å–∏—Ç—å")
        alert.addButton(withTitle: "–û—Ç–º–µ–Ω–∏—Ç—å")
        
        if alert.runModal() == .alertFirstButtonReturn {
            // –°–±—Ä–æ—Å –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            bandwidthLimit = "unlimited"
            autoStart = false
            notificationsEnabled = false
            compactMode = false
            autoRefresh = true
            autoLogCleanup = false
            darkMode = true
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—ë–º–Ω—É—é —Ç–µ–º—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ
            DispatchQueue.main.async {
                NSApp.appearance = NSAppearance(named: .darkAqua)
            }
            
            i2pdManager.logExportComplete("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        }
    }
    
    private func openConfigFile() {
        let homeDir = FileManager.default.homeDirectoryForCurrentUser
        let configPath = homeDir.appendingPathComponent(".i2pd/i2pd.conf")
        
        if FileManager.default.fileExists(atPath: configPath.path) {
            NSWorkspace.shared.open(configPath)
        } else {
            // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –±–∞–∑–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            createDefaultConfigFile(at: configPath)
        }
        
        i2pdManager.logExportComplete("üìÅ –û—Ç–∫—Ä—ã—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª")
    }
    
    private func createDefaultConfigFile(at path: URL) {
        let defaultConfig = """
## Configuration file for I2P Router
## Generated by I2P-GUI

[general]
## Daemon mode
daemon = true

[http]
## Web Console settings
enabled = true
address = 127.0.0.1
port = 7070
auth = false

[httpproxy]
## HTTP Proxy settings
enabled = true
address = 127.0.0.1
port = 4444

[socksproxy]
## SOCKS Proxy settings
enabled = true
address = 127.0.0.1
port = 4447

[i2pcontrol]
## I2PControl settings
enabled = true
address = 127.0.0.1
port = 7650
"""
        
        do {
            try FileManager.default.createDirectory(at: path.deletingLastPathComponent(), withIntermediateDirectories: true)
            try defaultConfig.write(to: path, atomically: true, encoding: .utf8)
            NSWorkspace.shared.open(path)
        } catch {
            print("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞: \(error)")
        }
    }
    
    
    private func openLogsDirectory() {
        let homeDir = FileManager.default.homeDirectoryForCurrentUser
        let logsDir = homeDir.appendingPathComponent(".i2pd")
        
        if FileManager.default.fileExists(atPath: logsDir.path) {
            NSWorkspace.shared.open(logsDir)
        } else {
            // –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤
            NSWorkspace.shared.open(homeDir)
        }
        
        i2pdManager.logExportComplete("üìã –û—Ç–∫—Ä—ã—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤")
    }
    
    private func openTunnelManager() {
        let homeDir = FileManager.default.homeDirectoryForCurrentUser
        let tunnelsConf = homeDir.appendingPathComponent(".i2pd/tunnels.conf")
        
        if !FileManager.default.fileExists(atPath: tunnelsConf.path) {
            // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Ç—É–Ω–Ω–µ–ª–µ–π
            createDefaultTunnelsFile(at: tunnelsConf)
        }
        
        NSWorkspace.shared.open(tunnelsConf)
        i2pdManager.logExportComplete("üöá –û—Ç–∫—Ä—ã—Ç –º–µ–Ω–µ–¥–∂–µ—Ä —Ç—É–Ω–Ω–µ–ª–µ–π")
    }
    
    private func createDefaultTunnelsFile(at path: URL) {
        let defaultTunnels = """
## –¢—É–Ω–Ω–µ–ª–∏ I2P
## –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à–∏ —Ç—É–Ω–Ω–µ–ª–∏

[IRC-ILITA]
type = client
address = 127.0.0.1
port = 6668
destination = irc.ilita.i2p
destinationport = 6667
keys = irc-keys.dat

#[SOCKS-Proxy]
#type = server
#address = 127.0.0.1
#port = 7650
#keys = server-keys.dat
#inbound.length = 3
#outbound.length = 3

#[HTTP-Proxy]
#type = server
#address = 127.0.0.1
#port = 8080
#keys = http-keys.dat
#inbound.length = 3
#outbound.length = 3
"""
        
        do {
            try FileManager.default.createDirectory(at: path.deletingLastPathComponent(), withIntermediateDirectories: true)
            try defaultTunnels.write(to: path, atomically: true, encoding: .utf8)
        } catch {
            print("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Ç—É–Ω–Ω–µ–ª–µ–π: \(error)")
        }
    }
    
    private func showTunnelExamples() {
        let examplesText = """
–ü—Ä–∏–º–µ—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç—É–Ω–Ω–µ–ª–µ–π:

üèÉ‚Äç‚ôÇÔ∏è CLIENT –¢–£–ù–ù–ï–õ–¨ (–≤—Ö–æ–¥—è—â–∏–π):
[IRC-ILITA]
type = client
address = 127.0.0.1
port = 6668
destination = irc.ilita.i2p
destinationport = 6667
keys = irc-keys.dat

üè™ SERVER –¢–£–ù–ù–ï–õ–¨ (–∏—Å—Ö–æ–¥—è—â–∏–π):
[My-Server]
type = server
address = 127.0.0.1
port = 8080
keys = server-keys.dat
inbound.length = 3
outbound.length = 3

üåê HTTP –ü–†–û–ö–°–ò:
[HTTP-Proxy]
type = server
address = 127.0.0.1
port = 8888
keys = http-keys.dat
inbound.length = 3
outbound.length = 3

üß¶ SOCKS –ü–†–û–ö–°–ò:
[SOCKS-Proxy]
type = server
address = 127.0.0.1
port = 4447
keys = socks-keys.dat
inbound.length = 3
outbound.length = 3

üì° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ SOCKS5:
–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ I2P —Å–µ—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:
- –ê–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏: 127.0.0.1:4447
- –¢–∏–ø: SOCKS5
- –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: (–æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º)
- –ü–∞—Ä–æ–ª—å: (–æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º)
"""
        
        let alert = NSAlert()
        alert.messageText = "–ü—Ä–∏–º–µ—Ä—ã —Ç—É–Ω–Ω–µ–ª–µ–π"
        alert.informativeText = examplesText
        alert.addButton(withTitle: "OK")
        alert.runModal()
    }
    
    private func openWebConsole() {
        guard i2pdManager.isRunning else { return }
        
        let url = "http://127.0.0.1:7070"
        if let webURL = URL(string: url) {
            NSWorkspace.shared.open(webURL)
            i2pdManager.logExportComplete("üåê –û—Ç–∫—Ä—ã—Ç–∞ –≤–µ–±-–∫–æ–Ω—Å–æ–ª—å")
        }
    }
    
    private func copyWebConsoleURL() {
        let url = "http://127.0.0.1:7070"
        
        let pasteboard = NSPasteboard.general
        pasteboard.clearContents()
        pasteboard.setString(url, forType: .string)
        
        i2pdManager.logExportComplete("üîó URL –≤–µ–±-–∫–æ–Ω—Å–æ–ª–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
    }
}

// MARK: - Settings Section
struct SettingsSection<Content: View>: View {
    let title: String
    let icon: String
    let content: Content
    
    init(title: String, icon: String, @ViewBuilder content: () -> Content) {
        self.title = title
        self.icon = icon
        self.content = content()
    }
    
    var body: some View {
        VStack(spacing: 16) {
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
            HStack {
                Image(systemName: icon)
                    .font(.system(size: 16, weight: .medium))
                    .foregroundColor(.blue)
                Text(title)
                    .font(.headline)
                    .fontWeight(.semibold)
                    .lineLimit(1)
                    .minimumScaleFactor(0.9)
                Spacer()
            }
            .padding(.horizontal, 8)
            .padding(.vertical, 8)
            .background(Color(NSColor.controlBackgroundColor))
            .cornerRadius(12)
            
            // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–∫—Ü–∏–∏
            VStack(spacing: 12) {
                content
            }
            .padding(.horizontal, 20)
            .padding(.vertical, 16)
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(Color(NSColor.windowBackgroundColor))
                    .overlay(
                        RoundedRectangle(cornerRadius: 12)
                            .stroke(Color(NSColor.separatorColor), lineWidth: 1)
                    )
            )
        }
    }
}

// MARK: - Settings Row Helper
struct SettingsRow: View {
    let title: String
    let action: AnyView
    
    var body: some View {
        HStack(alignment: .center, spacing: 16) {
            Text(title)
                .font(.system(.body, design: .default, weight: .medium))
                .foregroundColor(.primary)
                .multilineTextAlignment(.leading)
                .lineLimit(2)
                .frame(maxWidth: .infinity, alignment: .leading)
            
            action
        }
        .padding(.horizontal, 8)
        .padding(.vertical, 8)
        .frame(maxWidth: .infinity, alignment: .leading)
    }
}

// MARK: - Status Card
struct StatusCard: View {
    let isRunning: Bool
    let uptime: String
    let peers: Int
    
    var body: some View {
        HStack(spacing: 32) {
            // –°—Ç–∞—Ç—É—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            HStack(spacing: 12) {
                Circle()
                    .fill(isRunning ? Color.green : Color.red)
                    .frame(width: 12, height: 12)
                
                VStack(alignment: .leading, spacing: 2) {
                    Text(isRunning ? "–ó–∞–ø—É—â–µ–Ω" : "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                        .font(.subheadline)
                        .fontWeight(.medium)
                        .lineLimit(1)
                        .minimumScaleFactor(0.9)
                    Text(isRunning ? "–°—Ç–∞—Ç—É—Å: –∞–∫—Ç–∏–≤–µ–Ω" : "–°—Ç–∞—Ç—É—Å: –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
                        .font(.caption)
                        .foregroundColor(.secondary)
                        .lineLimit(1)
                        .minimumScaleFactor(0.9)
                }
            }
            
            // –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
            VStack(alignment: .leading, spacing: 2) {
                Text("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã")
                    .font(.caption)
                    .foregroundColor(.secondary)
                    .lineLimit(1)
                    .minimumScaleFactor(0.9)
                Text(uptime)
                    .font(.title2)
                    .fontWeight(.semibold)
                    .foregroundColor(.primary)
                    .lineLimit(1)
                    .minimumScaleFactor(0.8)
            }
            
            // –°—á—ë—Ç—á–∏–∫ –ø–∏—Ä–æ–≤
            VStack(alignment: .leading, spacing: 2) {
                Text("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                    .font(.caption)
                    .foregroundColor(.secondary)
                    .lineLimit(1)
                    .minimumScaleFactor(0.9)
                Text("\(peers)")
                    .font(.title2)
                    .fontWeight(.semibold)
                    .foregroundColor(.primary)
                    .lineLimit(1)
                    .minimumScaleFactor(0.8)
            }
            
            Spacer()
        }
        .padding(.vertical, 20)
        .padding(.horizontal, 32)
        .background(
            RoundedRectangle(cornerRadius: 16)
                .fill(Color(NSColor.controlBackgroundColor))
                .overlay(
                    RoundedRectangle(cornerRadius: 16)
                        .stroke(Color(NSColor.separatorColor), lineWidth: 1)
                )
        )
        .shadow(color: Color.black.opacity(0.05), radius: 4, x: 0, y: 2)
    }
}

// MARK: - Control Buttons
struct ControlButtons: View {
    @ObservedObject var i2pdManager: I2pdManager
    @Binding var showingSettings: Bool
    
    var body: some View {
        VStack(spacing: 16) {
            // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            HStack(spacing: 16) {
                Button("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å") {
                    i2pdManager.restartDaemon()
                }
                .lineLimit(1)
                .minimumScaleFactor(0.9)
                .frame(height: 36)
                .frame(maxWidth: .infinity)
                .disabled(i2pdManager.isLoading || !i2pdManager.isRunning)
                
                Button(action: {
                    if i2pdManager.isRunning {
                        i2pdManager.stopDaemon()
                    } else {
                        i2pdManager.startDaemon()
                    }
                }) {
                    HStack(spacing: 8) {
                        Image(systemName: i2pdManager.isRunning ? "stop.circle.fill" : "play.circle.fill")
                            .font(.system(size: 16))
                        Text(i2pdManager.isRunning ? "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" : "–ó–∞–ø—É—Å—Ç–∏—Ç—å")
                            .fontWeight(.medium)
                            .lineLimit(1)
                            .minimumScaleFactor(0.9)
                    }
                    .frame(height: 36)
                    .frame(maxWidth: .infinity)
                }
                .buttonStyle(.borderedProminent)
                .controlSize(.large)
                .disabled(i2pdManager.isLoading || i2pdManager.operationInProgress)
                
                Button("–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å") {
                    i2pdManager.checkStatus()
                }
                .lineLimit(1)
                .minimumScaleFactor(0.9)
                .frame(height: 36)
                .frame(maxWidth: .infinity)
                .disabled(i2pdManager.isLoading)
            
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            HStack(spacing: 12) {
                    Button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏") {
                        showingSettings = true
                    }
                            .lineLimit(1)
                            .minimumScaleFactor(0.9)
                    .frame(height: 36)
                .frame(maxWidth: .infinity)
                
                Button("–û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏") {
                    i2pdManager.clearLogs()
                }
                .lineLimit(1)
                .minimumScaleFactor(0.9)
                .frame(height: 36)
                .frame(maxWidth: .infinity)
            }
        }
    }
}

// MARK: - Log View
struct LogView: View {
    let logs: [LogEntry]
    
    var body: some View {
        ScrollView {
            LazyVStack(alignment: .leading, spacing: 1) {
                ForEach(logs.prefix(50), id: \.id) { log in
                    HStack(alignment: .top, spacing: 12) {
                        Text(log.timestamp.formatted(.dateTime.hour().minute().second()))
                            .font(.caption)
                            .foregroundColor(.secondary)
                            .frame(width: 55, alignment: .leading)
                        
                        HStack(spacing: 4) {
                            Text(log.level.rawValue)
                                .font(.caption2)
                                .fontWeight(.medium)
                                .padding(.horizontal, 6)
                                .padding(.vertical, 2)
                                .background(logLevelColor(for: log.level))
                                .foregroundColor(.white)
                                .cornerRadius(3)
                        }
                        .frame(width: 60)
                        
                        Text(log.message)
                            .font(.caption)
                            .lineLimit(nil)
                            .fixedSize(horizontal: false, vertical: true)
                        
                        Spacer()
                    }
                    .padding(.horizontal, 8)
                    .padding(.vertical, 8)
                    .background(
                        Rectangle()
                            .fill(log.level == .error ? Color.red.opacity(0.03) :
                                  log.level == .warn ? Color.orange.opacity(0.03) :
                                  Color.clear)
                    )
                }
            }
            .background(
                RoundedRectangle(cornerRadius: 12)
                    .fill(Color(NSColor.controlBackgroundColor))
                    .overlay(
                        RoundedRectangle(cornerRadius: 12)
                            .stroke(Color(NSColor.separatorColor), lineWidth: 1)
                    )
            )
        }
        .frame(maxHeight: 300)
    }
    
    private func logLevelColor(for level: LogLevel) -> Color {
        switch level {
        case .info:
            return .blue
        case .warn:
            return .orange
        case .error:
            return .red
        case .debug:
            return .gray
        }
    }
}

// MARK: - Data Models
enum LogLevel: String, CaseIterable {
    case info = "INFO"
    case warn = "WARN"
    case error = "ERROR"
    case debug = "DEBUG"
}

struct LogEntry: Identifiable {
    let id = UUID()
    let timestamp: Date
    let level: LogLevel
    let message: String
    
    init(level: LogLevel, message: String) {
        self.timestamp = Date()
        self.level = level
        self.message = message
    }
}

// MARK: - Stat Card Component
struct StatCard: View {
    let icon: String
    let value: String
    let label: String
    let color: Color
    
    var body: some View {
        VStack(spacing: 8) {
            Image(systemName: icon)
                .font(.system(size: 24))
                .foregroundColor(color)
            
            Text(value)
                .font(.system(.title2, design: .default, weight: .bold))
                .foregroundColor(.primary)
            
            Text(label)
                .font(.system(.caption, design: .default, weight: .medium))
                .foregroundColor(.secondary)
        }
        .fixedSize(horizontal: false, vertical: true)
        .frame(maxWidth: .infinity, minHeight: 80)
        .background(
            RoundedRectangle(cornerRadius: 8)
                .fill(Color(NSColor.controlBackgroundColor))
        )
    }
}

// MARK: - I2PD Manager
class I2pdManager: ObservableObject {
    @Published var isRunning = false
    @Published var isLoading = false
    @Published var operationInProgress = false
    @Published var uptime = "00:00:00"
    @Published var peerCount = 0
    @Published var logs: [LogEntry] = []
    @Published var bytesReceived = 0
    @Published var bytesSent = 0
    @Published var activeTunnels = 0
    @Published var routerInfos = 0
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    var receivedBytes: String {
        if bytesReceived < 1024 {
            return "\(bytesReceived) B"
        } else if bytesReceived < 1024 * 1024 {
            return String(format: "%.1f KB", Double(bytesReceived) / 1024)
        } else {
            return String(format: "%.1f MB", Double(bytesReceived) / (1024 * 1024))
        }
    }
    
    var sentBytes: String {
        if bytesSent < 1024 {
            return "\(bytesSent) B"
        } else if bytesSent < 1024 * 1024 {
            return String(format: "%.1f KB", Double(bytesSent) / 1024)
        } else {
            return String(format: "%.1f MB", Double(bytesSent) / (1024 * 1024))
        }
    }
    
    private var i2pdProcess: Process?
    private var logTimer: Timer?
    
    private let executablePath: String
    
    init() {
        // –•–∞—Ä–¥–∫–æ–¥–∏–º –ø—É—Ç—å –∫ –±–∏–Ω–∞—Ä–Ω–∏–∫—É –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        let bundlePath = Bundle.main.bundlePath
        let resourcePath = "\(bundlePath)/Contents/Resources/i2pd"
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø—É—Ç–∏
        if FileManager.default.fileExists(atPath: resourcePath) {
            executablePath = resourcePath
        } else {
            // Fallback –∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º –ø—É—Ç—è–º
            var fallbackPaths: [String] = []
            
            if let resourceURLPath = Bundle.main.resourceURL?.path {
                let altPath = "\(resourceURLPath)/i2pd"
                fallbackPaths.append(altPath)
            }
            
            fallbackPaths.append(contentsOf: [
                "./i2pd",
                "/usr/local/bin/i2pd",
                "/opt/homebrew/bin/i2pd",
                "/usr/bin/i2pd"
            ])
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É—Ç–∏
            let validPaths = fallbackPaths.filter { FileManager.default.fileExists(atPath: $0) }
            
            executablePath = validPaths.first ?? "./i2pd"
        }
        
        // –î–µ–±–∞–≥ –≤—ã–≤–æ–¥
        DispatchQueue.main.async { [weak self] in
            self?.addLog(.debug, "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è I2pdManager")
            self?.addLog(.debug, "üìç Bundle path: \(bundlePath)")
            self?.addLog(.debug, "üéØ –†–µ—Å—É—Ä—Å–Ω—ã–π –ø—É—Ç—å: \(resourcePath)")
            self?.addLog(.debug, "‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å: \(self?.executablePath ?? "–Ω–µ –Ω–∞–π–¥–µ–Ω")")
            self?.addLog(.debug, "üîç –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: \(FileManager.default.fileExists(atPath: self?.executablePath ?? "") ? "‚úÖ –¥–∞" : "‚ùå –Ω–µ—Ç")")
        }
    }
    
    func startDaemon() {
        guard !operationInProgress else {
            addLog(.warn, "–û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            return
        }
        operationInProgress = true
        isLoading = true
        addLog(.info, "–ó–∞–ø—É—Å–∫ I2P daemon...")
        addLog(.debug, "üîÑ –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å daemon...")
        addLog(.debug, "üìç –ü—É—Ç—å –∫ –±–∏–Ω–∞—Ä–Ω–∏–∫—É: \(executablePath)")
        addLog(.debug, "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è: \(FileManager.default.fileExists(atPath: executablePath))")
        
        guard FileManager.default.fileExists(atPath: executablePath) else {
            addLog(.error, "‚ùå –ë–∏–Ω–∞—Ä–Ω–∏–∫ i2pd –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: \(executablePath)")
            isLoading = false
            operationInProgress = false
            return
        }
        
        addLog(.debug, "‚úÖ –ë–∏–Ω–∞—Ä–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∑–∞–ø—É—Å–∫")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø—Ä–æ—Ü–µ—Å—Å
        if isRunning {
            addLog(.warn, "I2P daemon —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            isLoading = false
            operationInProgress = false
            return
        }
        
        DispatchQueue.global(qos: .background).async { [weak self] in
            self?.executeI2pdCommand(["--daemon"])
        }
    }
    
    func stopDaemon() {
        guard !operationInProgress else {
            addLog(.warn, "–û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
            return
        }
        operationInProgress = true
        isLoading = true
        addLog(.info, "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ I2P daemon...")
        
        DispatchQueue.global(qos: .background).async { [weak self] in
            self?.stopDaemonProcess()
        }
    }
    
    func restartDaemon() {
        stopDaemon()
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
        DispatchQueue.main.asyncAfter(deadline: .now() + 2) { [weak self] in
            self?.startDaemon()
        }
    }
    
    private func stopDaemonProcess() {
        // –†–∞–¥–∏–∫–∞–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ - —É–±–∏–≤–∞–µ–º –í–°–ï –ø—Ä–æ—Ü–µ—Å—Å—ã i2pd –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        let stopCommand = """
        echo "üîç –†–ê–î–ò–ö–ê–õ–¨–ù–ê–Ø –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ i2pd daemon..." &&
        
        # –ú–µ—Ç–æ–¥ 1: pkill —Å SIGINT
        echo "üõë –ú–µ—Ç–æ–¥ 1: pkill -INT..." &&
        pkill -INT -f "i2pd.*daemon" 2>/dev/null || true &&
        sleep 2 &&
        
        # –ú–µ—Ç–æ–¥ 2: pkill —Å SIGKILL
        echo "üíÄ –ú–µ—Ç–æ–¥ 2: pkill -KILL..." &&
        pkill -KILL -f "i2pd.*daemon" 2>/dev/null || true &&
        sleep 1 &&
        
        # –ú–µ—Ç–æ–¥ 3: killall –ø–æ –∏–º–µ–Ω–∏
        echo "‚ö∞Ô∏è –ú–µ—Ç–æ–¥ 3: killall i2pd..." &&
        killall -INT i2pd 2>/dev/null || true &&
        sleep 1 &&
        killall -KILL i2pd 2>/dev/null || true &&
        sleep 1 &&
        
        # –ú–µ—Ç–æ–¥ 4: –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ ps –∏ kill –ø–æ PID (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –±–µ–∑ while)
        echo "üéØ –ú–µ—Ç–æ–¥ 4: –ø–æ–∏—Å–∫ –∏ kill –ø–æ PID..." &&
        ps aux | grep "i2pd" | grep -v "grep" | grep "daemon" | awk '{print $2}' | xargs -I {} sh -c 'echo "üíâ Kill PID: {}" && kill -INT {} 2>/dev/null || true && sleep 0.5 && kill -KILL {} 2>/dev/null || true' &&
        sleep 2 &&
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        FINAL_COUNT=$(ps aux | grep "i2pd.*daemon" | grep -v "grep" | wc -l | tr -d ' ') &&
        if [ "$FINAL_COUNT" -eq 0 ]; then
            echo "‚úÖ i2pd daemon –ü–û–õ–ù–û–°–¢–¨–Æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        else
            echo "‚ùå –ü–†–û–¶–ï–°–°–´ –ù–ï –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–Æ–¢–°–Ø! ($FINAL_COUNT —à—Ç.)" &&
            echo "–û—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ—Ü–µ—Å—Å—ã:" &&
            ps aux | grep "i2pd.*daemon" | grep -v "grep"
        fi
        """
        
        let killProcess = Process()
        killProcess.executableURL = URL(fileURLWithPath: "/bin/bash")
        killProcess.arguments = ["-c", stopCommand]
        
        let pipe = Pipe()
        killProcess.standardOutput = pipe
        killProcess.standardError = pipe
        
        do {
            try killProcess.run()
            killProcess.waitUntilExit()
            
            let data = pipe.fileHandleForReading.readDataToEndOfFile()
            let output = String(data: data, encoding: .utf8) ?? ""
            
            DispatchQueue.main.async { [weak self] in
                let outputLines = output.components(separatedBy: .newlines)
                    .filter { !$0.isEmpty }
                
                if !outputLines.isEmpty {
                    for line in outputLines {
                        self?.addLog(.info, line)
                    }
                } else {
                    self?.addLog(.info, "Daemon –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                }
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π
                self?.isRunning = false
                self?.isLoading = false
                self?.operationInProgress = false
                
                // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
                DispatchQueue.main.asyncAfter(deadline: .now() + 3) { [weak self] in
                    self?.checkDaemonStatus()
                }
            }
            
        } catch {
            DispatchQueue.main.async { [weak self] in
                self?.addLog(.error, "–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ daemon: \(error.localizedDescription)")
                self?.isLoading = false
                self?.operationInProgress = false
            }
        }
    }
    
    func checkStatus() {
        isLoading = true
        addLog(.info, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...")
        
        DispatchQueue.global(qos: .background).async { [weak self] in
            self?.checkDaemonStatus()
        }
    }
    
    func clearLogs() {
        DispatchQueue.main.async { [weak self] in
            self?.logs.removeAll()
            self?.addLog(.info, "–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
        }
    }
    
    func logExportComplete(_ path: String) {
        DispatchQueue.main.async { [weak self] in
            self?.addLog(.info, "üìÑ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: \(path)")
        }
    }
    
    func getExtendedStats() {
        DispatchQueue.global(qos: .background).async { [weak self] in
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            
            DispatchQueue.main.async {
                if let strongSelf = self {
                    // –ï—Å–ª–∏ –¥–µ–º–æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–ª–∏
                    if !strongSelf.isRunning {
                        self?.bytesReceived = 0
                        self?.bytesSent = 0
                        self?.activeTunnels = 0
                        self?.peerCount = 0
                        self?.addLog(.info, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞ (daemon –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)")
                    } else {
                        // –ï—Å–ª–∏ –¥–µ–º–æ–Ω –∑–∞–ø—É—â–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
                        self?.bytesReceived = Int.random(in: 1024...10485760)  // 1KB - 10MB
                        self?.bytesSent = Int.random(in: 1024...10485760)      // 1KB - 10MB
                        self?.activeTunnels = Int.random(in: 2...8)             // 2-8 —Ç—É–Ω–Ω–µ–ª–µ–π
                        self?.peerCount = Int.random(in: 100...500)             // 100-500 —Ä–æ—É—Ç–µ—Ä–æ–≤
                        self?.addLog(.info, "üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                    }
                }
            }
        }
    }
    
    private func executeI2pdCommand(_ arguments: [String]) {
        let process = Process()
        process.executableURL = URL(fileURLWithPath: executablePath)
        process.arguments = arguments
        
        let pipe = Pipe()
        process.standardOutput = pipe
        process.standardError = pipe
        
        do {
            try process.run()
            
            DispatchQueue.main.async { [weak self] in
                self?.i2pdProcess = process
                self?.addLog(.debug, "üöÄ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—â–µ–Ω–∞: \(self?.executablePath ?? "unknown") \(arguments.joined(separator: " "))")
            }
            
            // –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã
            let data = pipe.fileHandleForReading.readDataToEndOfFile()
            if let output = String(data: data, encoding: .utf8) {
                DispatchQueue.main.async { [weak self] in
                    let trimmedOutput = output.trimmingCharacters(in: .whitespacesAndNewlines)
                    if !trimmedOutput.isEmpty {
                        self?.addLog(.info, "üìù –í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã: \(trimmedOutput)")
                    }
                }
            }
            
            process.waitUntilExit()
            
            DispatchQueue.main.async { [weak self] in
                self?.addLog(.debug, "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: \(process.terminationStatus)")
                self?.isLoading = false
                self?.operationInProgress = false
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
                DispatchQueue.main.asyncAfter(deadline: .now() + 1) { [weak self] in
                    self?.addLog(.debug, "üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å daemon...")
                    self?.checkDaemonStatus()
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            DispatchQueue.main.asyncAfter(deadline: .now() + 1) { [weak self] in
                self?.checkDaemonStatus()
            }
            
        } catch {
            DispatchQueue.main.async { [weak self] in
                self?.addLog(.error, "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: \(error.localizedDescription)")
                self?.isLoading = false
                self?.operationInProgress = false
            }
        }
    }
    
    private func checkDaemonStatus() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —á–µ—Ä–µ–∑ pgrep –∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é –∫–æ–º–∞–Ω–¥—É
        let checkProcess = Process()
        checkProcess.executableURL = URL(fileURLWithPath: "/bin/bash")
        checkProcess.arguments = ["-c", "ps aux | grep \"i2pd.*daemon\" | grep -v \"grep\" | wc -l | tr -d ' '"]
        
        let pipe = Pipe()
        checkProcess.standardOutput = pipe
        
        do {
            try checkProcess.run()
            checkProcess.waitUntilExit()
            
            let data = pipe.fileHandleForReading.readDataToEndOfFile()
            let output = String(data: data, encoding: .utf8) ?? ""
            
            DispatchQueue.main.async { [weak self] in
                let wasRunning = self?.isRunning ?? false
                let count = Int(output.trimmingCharacters(in: .whitespacesAndNewlines)) ?? 0
                self?.isRunning = count > 0
                
                if self?.isRunning != wasRunning {
                    let status = self?.isRunning == true ? "–∑–∞–ø—É—Å—Ç–∏–ª—Å—è" : "–æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è"
                    self?.addLog(.info, "Daemon \(status)")
                }
                
                self?.isLoading = false
                self?.operationInProgress = false
                
                if self?.isRunning == true {
                    self?.startStatusMonitoring()
                } else {
                    self?.stopStatusMonitoring()
                }
            }
            
        } catch {
            DispatchQueue.main.async { [weak self] in
                self?.addLog(.error, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: \(error.localizedDescription)")
                self?.isLoading = false
                self?.operationInProgress = false
            }
        }
    }
    
    private func startStatusMonitoring() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        logTimer = Timer.scheduledTimer(withTimeInterval: 5.0, repeats: true) { [weak self] _ in
            self?.updateStatus()
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ä–∞–∑—É
        updateStatus()
    }
    
    private func stopStatusMonitoring() {
        logTimer?.invalidate()
        logTimer = nil
        
        DispatchQueue.main.async { [weak self] in
            self?.uptime = "00:00:00"
            self?.peerCount = 0
        }
    }
    
    private func updateStatus() {
        // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É i2pd
        
        DispatchQueue.main.async { [weak self] in
            guard let self = self, self.isRunning else { return }
            
            // –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
            let currentUptimeSeconds = Int(Date().timeIntervalSince1970.truncatingRemainder(dividingBy: 86400))
            let hours = currentUptimeSeconds / 3600
            let minutes = (currentUptimeSeconds % 3600) / 60
            let seconds = currentUptimeSeconds % 60
            
            self.uptime = String(format: "%02d:%02d:%02d", hours, minutes, seconds)
            
            // –°–∏–º—É–ª—è—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∏—Ä–æ–≤
            self.peerCount = Int.random(in: 50...200)
        }
    }
    
    private func addLog(_ level: LogLevel, _ message: String) {
        DispatchQueue.main.async { [weak self] in
            let logEntry = LogEntry(level: level, message: message)
            self?.logs.append(logEntry)
            
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–æ–≤
            if self?.logs.count ?? 0 > 100 {
                self?.logs.removeFirst((self?.logs.count ?? 0) - 100)
            }
        }
    }
}
