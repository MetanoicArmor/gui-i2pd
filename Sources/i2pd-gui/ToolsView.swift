import SwiftUI
import Foundation

// MARK: - Tools Manager
class ToolsManager: ObservableObject {
    @Published var isRunning = false
    @Published var output = ""
    @Published var currentTool = ""
    
    private var process: Process?
    
    init() {
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(applicationWillTerminate),
            name: NSNotification.Name("ApplicationWillTerminate"),
            object: nil
        )
    }
    
    @objc private func applicationWillTerminate() {
        print("üîß ToolsManager: –ø–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        stopCurrentTool()
    }
    
    // –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—É—Ç–∏
    private var bundleToolsPath: String {
        guard let bundlePath = Bundle.main.resourcePath else {
            return ""
        }
        return "\(bundlePath)/tools"
    }
    
    private var i2pdDataPath: String {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è i2pd –¥–∞–Ω–Ω—ã—Ö
        let possiblePaths = [
            "/var/lib/i2pd",  // Linux/macOS —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å
            "\(NSHomeDirectory())/.i2pd",  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—É—Ç—å
            "\(NSHomeDirectory())/Library/Application Support/i2pd"  // macOS Application Support
        ]
        
        for path in possiblePaths {
            if FileManager.default.fileExists(atPath: path) {
                return path
            }
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ–º–∞—à–Ω—é—é –ø–∞–ø–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return NSHomeDirectory()
    }
    
    func getBundledToolPath(name: String) -> String {
        return "\(bundleToolsPath)/\(name)"
    }
    
    func getI2pdDataPath() -> String {
        return i2pdDataPath
    }
    
    func getToolsInfo() -> String {
        let bundlePath = bundleToolsPath
        let i2pdPath = i2pdDataPath
        let toolsExist = FileManager.default.fileExists(atPath: bundlePath)
        
        return """
        üìÅ –ü—É—Ç–∏ –∫ —É—Ç–∏–ª–∏—Ç–∞–º:
        ‚Ä¢ Bundle tools: \(bundlePath) \(toolsExist ? "‚úÖ" : "‚ùå")
        ‚Ä¢ i2pd –¥–∞–Ω–Ω—ã–µ: \(i2pdPath)
        ‚Ä¢ –î–æ–º–∞—à–Ω—è—è –ø–∞–ø–∫–∞: \(NSHomeDirectory())
        """
    }
    
    func validateToolExists(name: String) -> Bool {
        let toolPath = getBundledToolPath(name: name)
        return FileManager.default.fileExists(atPath: toolPath)
    }
    
    func runTool(name: String, arguments: [String], stdinData: String? = nil, workingDirectory: String? = nil, completion: @escaping (String) -> Void) {
        DispatchQueue.global(qos: .userInitiated).async {
            let toolPath = self.getBundledToolPath(name: name)
            
            guard self.validateToolExists(name: name) else {
                DispatchQueue.main.async {
                    completion("‚ùå –£—Ç–∏–ª–∏—Ç–∞ '\(name)' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: \(toolPath)")
                }
                return
            }
            
            DispatchQueue.main.async {
                self.isRunning = true
                self.currentTool = name
                self.output = "üöÄ –ó–∞–ø—É—Å–∫ \(name)...\n"
            }
            
            let process = Process()
            self.process = process // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å
            process.executableURL = URL(fileURLWithPath: toolPath)
            process.arguments = arguments
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –¥–æ–º–∞—à–Ω—é—é –ø–∞–ø–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            // —á—Ç–æ–±—ã —É—Ç–∏–ª–∏—Ç—ã –º–æ–≥–ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ñ–∞–π–ª—ã
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: –ª–∏–±–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é, –ª–∏–±–æ –¥–æ–º–∞—à–Ω—é—é –ø–∞–ø–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if let workingDir = workingDirectory {
                process.currentDirectoryURL = URL(fileURLWithPath: workingDir)
            } else {
                process.currentDirectoryURL = URL(fileURLWithPath: NSHomeDirectory())
            }
            
            let outputPipe = Pipe()
            let errorPipe = Pipe()
            let inputPipe = Pipe()
            process.standardOutput = outputPipe
            process.standardError = errorPipe
            process.standardInput = inputPipe
            
            do {
                try process.run()
                
                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ stdin –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
                if let stdinData = stdinData {
                    let inputHandle = inputPipe.fileHandleForWriting
                    if let data = stdinData.data(using: .utf8) {
                        inputHandle.write(data)
                    }
                    inputHandle.closeFile()
                }
                
                // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                let timeout: TimeInterval = 300 // 5 –º–∏–Ω—É—Ç
                let startTime = Date()
                
                while process.isRunning {
                    if Date().timeIntervalSince(startTime) > timeout {
                        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ
                        process.terminate()
                        DispatchQueue.main.async {
                            self.isRunning = false
                            self.currentTool = ""
                            completion("‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à—ë–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É (5 –º–∏–Ω—É—Ç)")
                        }
                        return
                    }
                    usleep(100000) // 0.1 —Å–µ–∫—É–Ω–¥—ã
                }
                
                // –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
                let outputData = outputPipe.fileHandleForReading.readDataToEndOfFile()
                let errorData = errorPipe.fileHandleForReading.readDataToEndOfFile()
                
                let outputString = String(data: outputData, encoding: .utf8) ?? ""
                let errorString = String(data: errorData, encoding: .utf8) ?? ""
                
                DispatchQueue.main.async {
                    self.isRunning = false
                    self.currentTool = ""
                    self.process = nil // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å
                    
                    var result = ""
                    if !outputString.isEmpty {
                        result += outputString
                    }
                    if !errorString.isEmpty {
                        result += "\n‚ö†Ô∏è –û—à–∏–±–∫–∏:\n\(errorString)"
                    }
                    
                    if result.isEmpty {
                        result = "‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ"
                    }
                    
                    completion(result)
                }
                
            } catch {
                DispatchQueue.main.async {
                    self.isRunning = false
                    self.currentTool = ""
                    self.process = nil // –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å
                    completion("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: \(error.localizedDescription)")
                }
            }
        }
    }
    
    func stopCurrentTool() {
        guard let process = process else { return }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        process.terminate()
        
        // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
        let timeout: TimeInterval = 2.0
        let startTime = Date()
        
        while process.isRunning && Date().timeIntervalSince(startTime) < timeout {
            usleep(50000) // 0.05 —Å–µ–∫—É–Ω–¥—ã
        }
        
        // –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –≤—Å—ë –µ—â—ë —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º –µ–≥–æ
        if process.isRunning {
            process.terminate()
        }
        
        self.process = nil
        isRunning = false
        currentTool = ""
    }
    
    deinit {
        // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        NotificationCenter.default.removeObserver(self)
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø—Ä–∏ –¥–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        process?.terminate()
        process = nil
    }
}

// MARK: - Tool Types
enum ToolType: String, CaseIterable {
    case keygen = "keygen"
    case vain = "vain"
    case keyinfo = "keyinfo"
    case b33address = "b33address"
    case regaddr = "regaddr"
    case regaddr3ld = "regaddr_3ld"
    case regaddralias = "regaddralias"
    case offlinekeys = "offlinekeys"
    case routerinfo = "routerinfo"
    case x25519 = "x25519"
    case i2pbase64 = "i2pbase64"
    case famtool = "famtool"
    case verifyhost = "verifyhost"
    case autoconf = "autoconf"
    
    var displayName: String {
        switch self {
        case .keygen: return L("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π")
        case .vain: return L("–ú–∞–π–Ω–µ—Ä –∞–¥—Ä–µ—Å–æ–≤")
        case .keyinfo: return L("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–∞—Ö")
        case .b33address: return L("B33 –∞–¥—Ä–µ—Å")
        case .regaddr: return L("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–º–µ–Ω–∞")
        case .regaddr3ld: return L("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è 3LD")
        case .regaddralias: return L("–ê–ª–∏–∞—Å –¥–æ–º–µ–Ω–∞")
        case .offlinekeys: return L("–û—Ñ–ª–∞–π–Ω –∫–ª—é—á–∏")
        case .routerinfo: return L("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞")
        case .x25519: return L("X25519 –∫–ª—é—á–∏")
        case .i2pbase64: return L("Base64 –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ")
        case .famtool: return L("Family tool")
        case .verifyhost: return L("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–æ—Å—Ç–∞")
        case .autoconf: return L("–ê–≤—Ç–æ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        }
    }
    
    var icon: String {
        switch self {
        case .keygen: return "key.fill"
        case .vain: return "sparkles"
        case .keyinfo: return "info.circle.fill"
        case .b33address: return "link"
        case .regaddr: return "globe"
        case .regaddr3ld: return "globe.americas"
        case .regaddralias: return "arrow.triangle.2.circlepath"
        case .offlinekeys: return "key.slash.fill"
        case .routerinfo: return "network"
        case .x25519: return "lock.fill"
        case .i2pbase64: return "textformat.abc"
        case .famtool: return "person.3.fill"
        case .verifyhost: return "checkmark.shield.fill"
        case .autoconf: return "gear.circle.fill"
        }
    }
}

// MARK: - Main Tools View
struct ToolsView: View {
    @StateObject private var toolsManager = ToolsManager()
    @State private var selectedTool: ToolType = .keygen
    
    var body: some View {
        HStack(spacing: 0) {
            // Sidebar
            VStack(alignment: .leading, spacing: 0) {
                Text(L("–£—Ç–∏–ª–∏—Ç—ã"))
                    .font(.headline)
                    .padding()
                    .frame(maxWidth: .infinity, alignment: .leading)
                    .background(Color(NSColor.controlBackgroundColor))
                
                ScrollView {
                    VStack(spacing: 2) {
                        ForEach(ToolType.allCases, id: \.self) { tool in
                            Button(action: {
                                selectedTool = tool
                            }) {
                                HStack {
                                    Image(systemName: tool.icon)
                                        .foregroundColor(selectedTool == tool ? .white : .primary)
                                        .frame(width: 20)
                                    
                                    Text(tool.displayName)
                                        .foregroundColor(selectedTool == tool ? .white : .primary)
                                        .font(.system(size: 13))
                                        .lineLimit(1)
                                        .truncationMode(.tail)
                                    
                                    Spacer()
                                }
                                .padding(.horizontal, 12)
                                .padding(.vertical, 8)
                                .background(selectedTool == tool ? Color.blue : Color.clear)
                                .cornerRadius(6)
                            }
                            .buttonStyle(PlainButtonStyle())
                        }
                    }
                    .padding(.horizontal, 8)
                    .padding(.vertical, 4)
                }
            }
            .frame(width: 220)
            .background(Color(NSColor.controlBackgroundColor))
            
            Divider()
            
            // Main content
            VStack {
                // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                VStack(alignment: .leading, spacing: 8) {
                    HStack {
                        Image(systemName: selectedTool.icon)
                            .foregroundColor(.blue)
                        Text(selectedTool.displayName)
                            .font(.title2)
                            .fontWeight(.semibold)
                        
                        Spacer()
                        
                        // –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                        HStack(spacing: 8) {
                            Button(L("–û—á–∏—Å—Ç–∏—Ç—å")) {
                                toolsManager.output = ""
                            }
                            .disabled(toolsManager.isRunning)
                            
                            Button(L("–ü—É—Ç–∏")) {
                                toolsManager.output = toolsManager.getToolsInfo()
                            }
                            .disabled(toolsManager.isRunning)
                        }
                    }
                    
                    Text(getToolDescription(for: selectedTool))
                        .font(.caption)
                        .foregroundColor(.secondary)
                        .multilineTextAlignment(.leading)
                }
                .frame(maxWidth: .infinity, alignment: .leading)
                .padding()
                .background(Color(NSColor.controlBackgroundColor))
                .cornerRadius(8)
                
                // –ö–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Ç–∏–ª–∏—Ç—ã
                Group {
                    switch selectedTool {
                    case .keygen:
                        KeygenView(toolsManager: toolsManager)
                    case .vain:
                        VainView(toolsManager: toolsManager)
                    case .keyinfo:
                        KeyinfoView(toolsManager: toolsManager)
                    case .b33address:
                        B33AddressView(toolsManager: toolsManager)
                    case .regaddr:
                        RegaddrView(toolsManager: toolsManager)
                    case .regaddr3ld:
                        Regaddr3ldView(toolsManager: toolsManager)
                    case .regaddralias:
                        RegaddraliasView(toolsManager: toolsManager)
                    case .offlinekeys:
                        OfflinekeysView(toolsManager: toolsManager)
                    case .routerinfo:
                        RouterinfoView(toolsManager: toolsManager)
                    case .x25519:
                        X25519View(toolsManager: toolsManager)
                    case .i2pbase64:
                        I2pbase64View(toolsManager: toolsManager)
                    case .famtool:
                        FamtoolView(toolsManager: toolsManager)
                    case .verifyhost:
                        VerifyhostView(toolsManager: toolsManager)
                    case .autoconf:
                        AutoconfView(toolsManager: toolsManager)
                    }
                }
                .frame(maxWidth: .infinity, maxHeight: .infinity)
            }
        }
        .frame(minWidth: 800, minHeight: 600)
        .onDisappear {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞ Tools
            toolsManager.stopCurrentTool()
        }
    }
    
    private func getToolDescription(for tool: ToolType) -> String {
        switch tool {
        case .keygen:
            return L("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è I2P —Ç—É–Ω–Ω–µ–ª–µ–π")
        case .vain:
            return L("–ü–æ–∏—Å–∫ –∫—Ä–∞—Å–∏–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º")
        case .keyinfo:
            return L("–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª—é—á–∞—Ö")
        case .b33address:
            return L("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–∏–∑—Å–µ—Ç–∞")
        case .regaddr:
            return L("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –¥–æ–º–µ–Ω–∞ –≤ –∑–æ–Ω–µ .i2p")
        case .regaddr3ld:
            return L("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–º–µ–Ω–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è –≤ –∑–æ–Ω–µ .i2p")
        case .regaddralias:
            return L("–ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –¥–æ–º–µ–Ω–∞ –∫ –Ω–æ–≤—ã–º –∫–ª—é—á–∞–º")
        case .offlinekeys:
            return L("–†–∞–±–æ—Ç–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        case .routerinfo:
            return L("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ I2P —Ä–æ—É—Ç–µ—Ä–∞—Ö")
        case .x25519:
            return L("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è X25519")
        case .i2pbase64:
            return L("–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ base64")
        case .famtool:
            return L("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–º–µ–π–Ω—ã–º–∏ –≥—Ä—É–ø–ø–∞–º–∏ —Ä–æ—É—Ç–µ—Ä–æ–≤")
        case .verifyhost:
            return L("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ —Ö–æ—Å—Ç–æ–≤")
        case .autoconf:
            return L("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        }
    }
}

// MARK: - Keygen View
struct KeygenView: View {
    @ObservedObject var toolsManager: ToolsManager
    @State private var keyName = ""
    @State private var signatureType = "7" // EDDSA-SHA512-ED25519 default
    
    let signatureTypes = [
        ("7", "EDDSA-SHA512-ED25519 (default)"),
        ("10", "RSA-SHA256-2048"),
        ("11", "RSA-SHA384-3072"),
        ("12", "RSA-SHA512-4096")
    ]
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ò–º—è —Ñ–∞–π–ª–∞ –∫–ª—é—á–∞"))
                    .font(.headline)
                TextField(L("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞"), text: $keyName)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–¢–∏–ø –ø–æ–¥–ø–∏—Å–∏"))
                    .font(.headline)
                Picker(L("–¢–∏–ø –ø–æ–¥–ø–∏—Å–∏"), selection: $signatureType) {
                    ForEach(signatureTypes, id: \.0) { type in
                        Text(type.1).tag(type.0)
                    }
                }
                .pickerStyle(MenuPickerStyle())
            }
            
            HStack {
                Button(action: generateKey) {
                    HStack {
                        if toolsManager.isRunning {
                            ProgressView()
                                .scaleEffect(0.8)
                        }
                        Text(L("–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á"))
                    }
                }
                .disabled(toolsManager.isRunning || keyName.isEmpty)
                
                if toolsManager.isRunning {
                    Button(L("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")) {
                        toolsManager.stopCurrentTool()
                    }
                }
            }
            
            if !toolsManager.output.isEmpty {
                VStack(alignment: .leading, spacing: 8) {
                    Text(L("–†–µ–∑—É–ª—å—Ç–∞—Ç"))
                        .font(.headline)
                    ScrollView {
                        Text(toolsManager.output)
                            .font(.system(.body, design: .monospaced))
                            .frame(maxWidth: .infinity, alignment: .leading)
                            .padding()
                            .background(Color(NSColor.textBackgroundColor))
                            .cornerRadius(8)
                    }
                    .frame(height: 200)
                }
            }
        }
        .padding()
    }
    
    private func generateKey() {
        let arguments = [keyName, signatureType]
        toolsManager.runTool(name: "keygen", arguments: arguments) { output in
            toolsManager.output = output
        }
    }
}

// MARK: - Vain View (Address Miner)
struct VainView: View {
    @ObservedObject var toolsManager: ToolsManager
    @State private var pattern = ""
    @State private var useRegex = false
    @State private var threads = "0" // 0 = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ü–∞—Ç—Ç–µ—Ä–Ω –ø–æ–∏—Å–∫–∞"))
                    .font(.headline)
                TextField(L("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω"), text: $pattern)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                Text(L("–ü–æ–∏—Å–∫ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Å –Ω–∞—á–∞–ª–∞ –∞–¥—Ä–µ—Å–∞"))
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Toggle(L("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è"), isOn: $useRegex)
                Text(L("–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ"))
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤"))
                    .font(.headline)
                TextField(L("0 = –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–¥–µ—Ä"), text: $threads)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
            }
            
            HStack {
                Button(action: startMining) {
                    HStack {
                        if toolsManager.isRunning {
                            ProgressView()
                                .scaleEffect(0.8)
                        }
                        Text(L("–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"))
                    }
                }
                .disabled(toolsManager.isRunning || pattern.isEmpty)
                
                if toolsManager.isRunning {
                    Button(L("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")) {
                        toolsManager.stopCurrentTool()
                    }
                }
            }
            
            if !toolsManager.output.isEmpty {
                VStack(alignment: .leading, spacing: 8) {
                    Text(L("–†–µ–∑—É–ª—å—Ç–∞—Ç"))
                        .font(.headline)
                    ScrollView {
                        Text(toolsManager.output)
                            .font(.system(.body, design: .monospaced))
                            .frame(maxWidth: .infinity, alignment: .leading)
                            .padding()
                            .background(Color(NSColor.textBackgroundColor))
                            .cornerRadius(8)
                    }
                    .frame(height: 200)
                }
            }
            
        }
        .padding()
    }
    
    private func startMining() {
        var arguments = [pattern]
        if useRegex {
            arguments.append("--regex")
        }
        if threads != "0" {
            arguments.append("-t")
            arguments.append(threads)
        }
        
        toolsManager.runTool(name: "vain", arguments: arguments) { output in
            toolsManager.output = output
        }
    }
}

// MARK: - Keyinfo View
struct KeyinfoView: View {
    @ObservedObject var toolsManager: ToolsManager
    @State private var keyFilePath = ""
    @State private var showingFilePicker = false
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–§–∞–π–ª —Å –∫–ª—é—á–æ–º"))
                    .font(.headline)
                HStack {
                    TextField(L("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–ª—é—á–æ–º"), text: $keyFilePath)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                        .disabled(true)
                    
                    Button(L("–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª")) {
                        showingFilePicker = true
                    }
                }
            }
            
            HStack {
                Button(action: getKeyInfo) {
                    HStack {
                        if toolsManager.isRunning {
                            ProgressView()
                                .scaleEffect(0.8)
                        }
                        Text(L("–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"))
                    }
                }
                .disabled(toolsManager.isRunning || keyFilePath.isEmpty)
                
                if toolsManager.isRunning {
                    Button(L("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")) {
                        toolsManager.stopCurrentTool()
                    }
                }
            }
            
            if !toolsManager.output.isEmpty {
                VStack(alignment: .leading, spacing: 8) {
                    Text(L("–†–µ–∑—É–ª—å—Ç–∞—Ç"))
                        .font(.headline)
                    ScrollView {
                        Text(toolsManager.output)
                            .font(.system(.body, design: .monospaced))
                            .frame(maxWidth: .infinity, alignment: .leading)
                            .padding()
                            .background(Color(NSColor.textBackgroundColor))
                            .cornerRadius(8)
                    }
                    .frame(height: 200)
                }
            }
            
            Spacer()
        }
        .fileImporter(
            isPresented: $showingFilePicker,
            allowedContentTypes: [.data, .text, .plainText],
            allowsMultipleSelection: false
        ) { result in
            switch result {
            case .success(let urls):
                if let url = urls.first {
                    keyFilePath = url.path
                }
            case .failure(let error):
                toolsManager.output = "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞: \(error.localizedDescription)"
            }
        }
    }
    
    private func getKeyInfo() {
        toolsManager.runTool(name: "keyinfo", arguments: [keyFilePath]) { output in
            toolsManager.output = output
        }
    }
}

// MARK: - Placeholder Views –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç
struct B33AddressView: View {
    @ObservedObject var toolsManager: ToolsManager
    @State private var base64Address = ""
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –≤ Base64"))
                    .font(.headline)
                TextEditor(text: $base64Address)
                    .font(.system(.body, design: .monospaced))
                    .frame(height: 120)
                    .border(Color.gray.opacity(0.3))
                    .cornerRadius(8)
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"))
                    .font(.headline)
                Text(L("–í—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ Base64. –ü–æ–ª—É—á–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π: keyinfo -d <—Ñ–∞–π–ª_–∫–ª—é—á–∞>"))
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            Button(L("–í—ã—á–∏—Å–ª–∏—Ç—å B33 –∞–¥—Ä–µ—Å")) {
                calculateB33Address()
            }
            .disabled(base64Address.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty || toolsManager.isRunning)
            
            if toolsManager.isRunning {
                HStack {
                    ProgressView()
                        .scaleEffect(0.8)
                    Text(L("–í—ã—á–∏—Å–ª–µ–Ω–∏–µ..."))
                        .font(.caption)
                }
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–†–µ–∑—É–ª—å—Ç–∞—Ç"))
                    .font(.headline)
                ScrollView {
                    Text(toolsManager.output)
                        .font(.system(.body, design: .monospaced))
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .padding()
                        .background(Color(NSColor.textBackgroundColor))
                        .cornerRadius(8)
                }
                .frame(height: 200)
            }
            
        }
        .padding()
    }
    
    private func calculateB33Address() {
        let trimmedAddress = base64Address.trimmingCharacters(in: .whitespacesAndNewlines)
        
        if trimmedAddress.isEmpty {
            toolsManager.output = "‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –≤ Base64"
            return
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º b33address —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ stdin
        toolsManager.runTool(name: "b33address", arguments: [], stdinData: trimmedAddress) { output in
            toolsManager.output = output
        }
    }
}

struct RegaddrView: View {
    @ObservedObject var toolsManager: ToolsManager
    @State private var keyFilePath = ""
    @State private var domainName = ""
    @State private var showingFilePicker = false
    @State private var registrationString = ""
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–§–∞–π–ª —Å –∫–ª—é—á–∞–º–∏"))
                    .font(.headline)
                HStack {
                    TextField(L("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–ª—é—á–∞–º–∏"), text: $keyFilePath)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                        .disabled(true)
                    Button(L("–í—ã–±—Ä–∞—Ç—å")) {
                        showingFilePicker = true
                    }
                }
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ñ–µ–ª–∞–µ–º—ã–π –¥–æ–º–µ–Ω"))
                    .font(.headline)
                TextField(L("–ù–∞–ø—Ä–∏–º–µ—Ä: mysite.i2p"), text: $domainName)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"))
                    .font(.headline)
                Text(L("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä: mysite.i2p) –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–ª—é—á–∞–º–∏. –ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –Ω–∞ reg.i2p –∏–ª–∏ stats.i2p"))
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            Button(L("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É")) {
                generateRegistrationString()
            }
            .disabled(keyFilePath.isEmpty || domainName.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty || toolsManager.isRunning)
            
            if toolsManager.isRunning {
                HStack {
                    ProgressView()
                        .scaleEffect(0.8)
                    Text(L("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è..."))
                        .font(.caption)
                }
            }
            
            if !registrationString.isEmpty {
                VStack(alignment: .leading, spacing: 8) {
                    Text(L("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞"))
                        .font(.headline)
                    ScrollView {
                        Text(registrationString)
                            .font(.system(.body, design: .monospaced))
                            .frame(maxWidth: .infinity, alignment: .leading)
                            .padding()
                            .background(Color(NSColor.textBackgroundColor))
                            .cornerRadius(8)
                    }
                    .frame(height: 150)
                    
                    HStack {
                        Button(L("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å")) {
                            let pasteboard = NSPasteboard.general
                            pasteboard.clearContents()
                            pasteboard.setString(registrationString, forType: .string)
                        }
                        
                        Button(L("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å—å")) {
                            verifySignature()
                        }
                    }
                }
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–†–µ–∑—É–ª—å—Ç–∞—Ç"))
                    .font(.headline)
                ScrollView {
                    Text(toolsManager.output)
                        .font(.system(.body, design: .monospaced))
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .padding()
                        .background(Color(NSColor.textBackgroundColor))
                        .cornerRadius(8)
                }
                .frame(height: 200)
            }
            
            Spacer()
        }
        .fileImporter(
            isPresented: $showingFilePicker,
            allowedContentTypes: [.data, .text, .plainText],
            allowsMultipleSelection: false
        ) { result in
            switch result {
            case .success(let urls):
                if let url = urls.first {
                    keyFilePath = url.path
                }
            case .failure(let error):
                toolsManager.output = "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞: \(error.localizedDescription)"
            }
        }
    }
    
    private func generateRegistrationString() {
        let trimmedDomain = domainName.trimmingCharacters(in: .whitespacesAndNewlines)
        
        if trimmedDomain.isEmpty {
            toolsManager.output = "‚ùå –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –¥–æ–º–µ–Ω"
            return
        }
        
        if keyFilePath.isEmpty {
            toolsManager.output = "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–ª—é—á–∞–º–∏"
            return
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º regaddr —Å —Ñ–∞–π–ª–æ–º –∫–ª—é—á–µ–π –∏ –¥–æ–º–µ–Ω–æ–º
        toolsManager.runTool(name: "regaddr", arguments: [keyFilePath, trimmedDomain]) { output in
            DispatchQueue.main.async {
                if output.contains("=") && output.contains("#!sig=") {
                    // –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                    registrationString = output.trimmingCharacters(in: .whitespacesAndNewlines)
                    toolsManager.output = "‚úÖ " + L("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!") + "\n\n" + output
                } else {
                    // –û—à–∏–±–∫–∞
                    toolsManager.output = output
                    registrationString = ""
                }
            }
        }
    }
    
    private func verifySignature() {
        if registrationString.isEmpty {
            toolsManager.output = "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É"
            return
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º verifyhost –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –≤ bash
        let escapedString = registrationString.replacingOccurrences(of: "!", with: "\\!")
        
        toolsManager.runTool(name: "verifyhost", arguments: [escapedString]) { output in
            DispatchQueue.main.async {
                if output.isEmpty {
                    toolsManager.output = "‚úÖ –ü–æ–¥–ø–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ reg.i2p –∏–ª–∏ stats.i2p"
                } else {
                    toolsManager.output = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏:\n" + output
                }
            }
        }
    }
}

struct Regaddr3ldView: View {
    @ObservedObject var toolsManager: ToolsManager
    @State private var subDomainKeyPath = ""
    @State private var mainDomainKeyPath = ""
    @State private var subDomainName = ""
    @State private var mainDomainName = ""
    @State private var showingSubKeyPicker = false
    @State private var showingMainKeyPicker = false
    @State private var currentStep = 0
    @State private var step1Result = ""
    @State private var step2Result = ""
    @State private var finalResult = ""
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ö–ª—é—á —Å—É–±–¥–æ–º–µ–Ω–∞"))
                    .font(.headline)
                HStack {
                    TextField(L("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–ª—é—á–æ–º —Å—É–±–¥–æ–º–µ–Ω–∞"), text: $subDomainKeyPath)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                        .disabled(true)
                    Button(L("–í—ã–±—Ä–∞—Ç—å")) {
                        showingSubKeyPicker = true
                    }
                }
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ö–ª—é—á –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞"))
                    .font(.headline)
                HStack {
                    TextField(L("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–ª—é—á–æ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞"), text: $mainDomainKeyPath)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                        .disabled(true)
                    Button(L("–í—ã–±—Ä–∞—Ç—å")) {
                        showingMainKeyPicker = true
                    }
                }
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–î–æ–º–µ–Ω —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è"))
                    .font(.headline)
                TextField(L("–ù–∞–ø—Ä–∏–º–µ—Ä: sub.domain.i2p"), text: $subDomainName)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω"))
                    .font(.headline)
                TextField(L("–ù–∞–ø—Ä–∏–º–µ—Ä: domain.i2p"), text: $mainDomainName)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"))
                    .font(.headline)
                Text(L("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–æ–º–µ–Ω–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ 3 —à–∞–≥–∞:\n1. –ü–æ–¥–ø–∏—Å—å –¥–æ–º–µ–Ω–∞ –∫–ª—é—á–æ–º —Å—É–±–¥–æ–º–µ–Ω–∞\n2. –ü–æ–¥–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–ª—é—á–æ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞\n3. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –∫–ª—é—á–æ–º —Å—É–±–¥–æ–º–µ–Ω–∞"))
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            HStack {
                Button(L("–®–∞–≥ 1: –ü–æ–¥–ø–∏—Å–∞—Ç—å –¥–æ–º–µ–Ω")) {
                    executeStep1()
                }
                .disabled(!canExecuteStep1() || toolsManager.isRunning)
                
                Button(L("–®–∞–≥ 2: –ü–æ–¥–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")) {
                    executeStep2()
                }
                .disabled(!canExecuteStep2() || toolsManager.isRunning)
                
                Button(L("–®–∞–≥ 3: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å")) {
                    executeStep3()
                }
                .disabled(!canExecuteStep3() || toolsManager.isRunning)
            }
            
            if toolsManager.isRunning {
                HStack {
                    ProgressView()
                        .scaleEffect(0.8)
                    Text(L("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ..."))
                        .font(.caption)
                }
            }
            
            if !finalResult.isEmpty {
                VStack(alignment: .leading, spacing: 8) {
                    Text(L("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞"))
                        .font(.headline)
                    ScrollView {
                        Text(finalResult)
                            .font(.system(.body, design: .monospaced))
                            .frame(maxWidth: .infinity, alignment: .leading)
                            .padding()
                            .background(Color(NSColor.textBackgroundColor))
                            .cornerRadius(8)
                    }
                    .frame(height: 150)
                    
                    HStack {
                        Button(L("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å")) {
                            let pasteboard = NSPasteboard.general
                            pasteboard.clearContents()
                            pasteboard.setString(finalResult, forType: .string)
                        }
                        
                        Button(L("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å—å")) {
                            verifySignature()
                        }
                    }
                }
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–†–µ–∑—É–ª—å—Ç–∞—Ç"))
                    .font(.headline)
                ScrollView {
                    Text(toolsManager.output)
                        .font(.system(.body, design: .monospaced))
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .padding()
                        .background(Color(NSColor.textBackgroundColor))
                        .cornerRadius(8)
                }
                .frame(height: 200)
            }
            
            Spacer()
        }
        .fileImporter(
            isPresented: $showingSubKeyPicker,
            allowedContentTypes: [.data, .text, .plainText],
            allowsMultipleSelection: false
        ) { result in
            switch result {
            case .success(let urls):
                if let url = urls.first {
                    subDomainKeyPath = url.path
                }
            case .failure(let error):
                toolsManager.output = "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ —Å—É–±–¥–æ–º–µ–Ω–∞: \(error.localizedDescription)"
            }
        }
        .fileImporter(
            isPresented: $showingMainKeyPicker,
            allowedContentTypes: [.data, .text, .plainText],
            allowsMultipleSelection: false
        ) { result in
            switch result {
            case .success(let urls):
                if let url = urls.first {
                    mainDomainKeyPath = url.path
                }
            case .failure(let error):
                toolsManager.output = "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞: \(error.localizedDescription)"
            }
        }
    }
    
    private func canExecuteStep1() -> Bool {
        return !subDomainKeyPath.isEmpty && !subDomainName.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty
    }
    
    private func canExecuteStep2() -> Bool {
        return !mainDomainKeyPath.isEmpty && !mainDomainName.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty && !step1Result.isEmpty
    }
    
    private func canExecuteStep3() -> Bool {
        return !subDomainKeyPath.isEmpty && !step2Result.isEmpty
    }
    
    private func executeStep1() {
        let trimmedDomain = subDomainName.trimmingCharacters(in: .whitespacesAndNewlines)
        
        if trimmedDomain.isEmpty {
            toolsManager.output = "‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω —Ç—Ä–µ—Ç—å–µ–≥–æ —É—Ä–æ–≤–Ω—è"
            return
        }
        
        if subDomainKeyPath.isEmpty {
            toolsManager.output = "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–ª—é—á–æ–º —Å—É–±–¥–æ–º–µ–Ω–∞"
            return
        }
        
        // –®–∞–≥ 1: –ü–æ–¥–ø–∏—Å—å –¥–æ–º–µ–Ω–∞ –∫–ª—é—á–æ–º —Å—É–±–¥–æ–º–µ–Ω–∞
        toolsManager.runTool(name: "regaddr_3ld", arguments: ["step1", subDomainKeyPath, trimmedDomain]) { output in
            DispatchQueue.main.async {
                if !output.isEmpty && !output.contains("‚ùå") {
                    step1Result = output.trimmingCharacters(in: .whitespacesAndNewlines)
                    toolsManager.output = "‚úÖ –®–∞–≥ 1 –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n" + output
                } else {
                    toolsManager.output = output
                }
            }
        }
    }
    
    private func executeStep2() {
        let trimmedDomain = mainDomainName.trimmingCharacters(in: .whitespacesAndNewlines)
        
        if trimmedDomain.isEmpty {
            toolsManager.output = "‚ùå –í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π –¥–æ–º–µ–Ω"
            return
        }
        
        if mainDomainKeyPath.isEmpty {
            toolsManager.output = "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–ª—é—á–æ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞"
            return
        }
        
        if step1Result.isEmpty {
            toolsManager.output = "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —à–∞–≥ 1"
            return
        }
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —à–∞–≥–∞ 1
        let tempDir = FileManager.default.temporaryDirectory
        let tempFile = tempDir.appendingPathComponent("step1_temp.txt")
        
        do {
            try step1Result.write(to: tempFile, atomically: true, encoding: .utf8)
            
            // –®–∞–≥ 2: –ü–æ–¥–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–ª—é—á–æ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
            toolsManager.runTool(name: "regaddr_3ld", arguments: ["step2", tempFile.path, mainDomainKeyPath, trimmedDomain]) { output in
                // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try? FileManager.default.removeItem(at: tempFile)
                
                DispatchQueue.main.async {
                    if !output.isEmpty && !output.contains("‚ùå") {
                        step2Result = output.trimmingCharacters(in: .whitespacesAndNewlines)
                        toolsManager.output = "‚úÖ –®–∞–≥ 2 –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n" + output
                    } else {
                        toolsManager.output = output
                    }
                }
            }
        } catch {
            toolsManager.output = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: \(error.localizedDescription)"
        }
    }
    
    private func executeStep3() {
        if subDomainKeyPath.isEmpty {
            toolsManager.output = "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –∫–ª—é—á–æ–º —Å—É–±–¥–æ–º–µ–Ω–∞"
            return
        }
        
        if step2Result.isEmpty {
            toolsManager.output = "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —à–∞–≥ 2"
            return
        }
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —à–∞–≥–∞ 2
        let tempDir = FileManager.default.temporaryDirectory
        let tempFile = tempDir.appendingPathComponent("step2_temp.txt")
        
        do {
            try step2Result.write(to: tempFile, atomically: true, encoding: .utf8)
            
            // –®–∞–≥ 3: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –∫–ª—é—á–æ–º —Å—É–±–¥–æ–º–µ–Ω–∞
            toolsManager.runTool(name: "regaddr_3ld", arguments: ["step3", tempFile.path, subDomainKeyPath]) { output in
                // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try? FileManager.default.removeItem(at: tempFile)
                
                DispatchQueue.main.async {
                    if !output.isEmpty && !output.contains("‚ùå") {
                        finalResult = output.trimmingCharacters(in: .whitespacesAndNewlines)
                        toolsManager.output = "‚úÖ –®–∞–≥ 3 –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≥–æ—Ç–æ–≤–∞!\n\n" + output
                    } else {
                        toolsManager.output = output
                    }
                }
            }
        } catch {
            toolsManager.output = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: \(error.localizedDescription)"
        }
    }
    
    private func verifySignature() {
        if finalResult.isEmpty {
            toolsManager.output = "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ 3 —à–∞–≥–∞"
            return
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º verifyhost –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
        let escapedString = finalResult.replacingOccurrences(of: "!", with: "\\!")
        
        toolsManager.runTool(name: "verifyhost", arguments: [escapedString]) { output in
            DispatchQueue.main.async {
                if output.isEmpty {
                    toolsManager.output = "‚úÖ –ü–æ–¥–ø–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ reg.i2p –∏–ª–∏ stats.i2p"
                } else {
                    toolsManager.output = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏:\n" + output
                }
            }
        }
    }
}

struct RegaddraliasView: View {
    @ObservedObject var toolsManager: ToolsManager
    @State private var oldKeyPath = ""
    @State private var newKeyPath = ""
    @State private var domainName = ""
    @State private var showingOldKeyPicker = false
    @State private var showingNewKeyPicker = false
    @State private var aliasString = ""
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–°—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏"))
                    .font(.headline)
                HStack {
                    TextField(L("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∫–ª—é—á–∞–º–∏"), text: $oldKeyPath)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                        .disabled(true)
                    Button(L("–í—ã–±—Ä–∞—Ç—å")) {
                        showingOldKeyPicker = true
                    }
                }
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ù–æ–≤—ã–µ –∫–ª—é—á–∏"))
                    .font(.headline)
                HStack {
                    TextField(L("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ –∫–ª—é—á–∞–º–∏"), text: $newKeyPath)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                        .disabled(true)
                    Button(L("–í—ã–±—Ä–∞—Ç—å")) {
                        showingNewKeyPicker = true
                    }
                }
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–î–æ–º–µ–Ω –¥–ª—è –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∏"))
                    .font(.headline)
                TextField(L("–ù–∞–ø—Ä–∏–º–µ—Ä: mysite.i2p"), text: $domainName)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"))
                    .font(.headline)
                Text(L("–î–ª—è —Å–º–µ–Ω—ã –∫–ª—é—á–µ–π –¥–æ–º–µ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –∫–∞–∫ —Å—Ç–∞—Ä—ã–µ, —Ç–∞–∫ –∏ –Ω–æ–≤—ã–µ –∫–ª—é—á–∏. –£—Ç–∏–ª–∏—Ç–∞ —Å–æ–∑–¥–∞—Å—Ç –∞–ª–∏–∞—Å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤—è–∂–µ—Ç –¥–æ–º–µ–Ω –∫ –Ω–æ–≤—ã–º –∫–ª—é—á–∞–º, —É–∫–∞–∑–∞–≤ –ø—Ä–∏ —ç—Ç–æ–º —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."))
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            Button(L("–°–æ–∑–¥–∞—Ç—å –∞–ª–∏–∞—Å –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∏")) {
                createAlias()
            }
            .disabled(!canCreateAlias() || toolsManager.isRunning)
            
            if toolsManager.isRunning {
                HStack {
                    ProgressView()
                        .scaleEffect(0.8)
                    Text(L("–°–æ–∑–¥–∞–Ω–∏–µ –∞–ª–∏–∞—Å–∞..."))
                        .font(.caption)
                }
            }
            
            if !aliasString.isEmpty {
                VStack(alignment: .leading, spacing: 8) {
                    Text(L("–ê–ª–∏–∞—Å –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∏"))
                        .font(.headline)
                    ScrollView {
                        Text(aliasString)
                            .font(.system(.body, design: .monospaced))
                            .frame(maxWidth: .infinity, alignment: .leading)
                            .padding()
                            .background(Color(NSColor.textBackgroundColor))
                            .cornerRadius(8)
                    }
                    .frame(height: 200)
                    
                    HStack {
                        Button(L("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å")) {
                            let pasteboard = NSPasteboard.general
                            pasteboard.clearContents()
                            pasteboard.setString(aliasString, forType: .string)
                        }
                        
                        Button(L("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å—å")) {
                            verifySignature()
                        }
                    }
                }
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–†–µ–∑—É–ª—å—Ç–∞—Ç"))
                    .font(.headline)
                ScrollView {
                    Text(toolsManager.output)
                        .font(.system(.body, design: .monospaced))
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .padding()
                        .background(Color(NSColor.textBackgroundColor))
                        .cornerRadius(8)
                }
                .frame(height: 200)
            }
            
            Spacer()
        }
        .fileImporter(
            isPresented: $showingOldKeyPicker,
            allowedContentTypes: [.data, .text, .plainText],
            allowsMultipleSelection: false
        ) { result in
            switch result {
            case .success(let urls):
                if let url = urls.first {
                    oldKeyPath = url.path
                }
            case .failure(let error):
                toolsManager.output = "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ä—ã—Ö –∫–ª—é—á–µ–π: \(error.localizedDescription)"
            }
        }
        .fileImporter(
            isPresented: $showingNewKeyPicker,
            allowedContentTypes: [.data, .text, .plainText],
            allowsMultipleSelection: false
        ) { result in
            switch result {
            case .success(let urls):
                if let url = urls.first {
                    newKeyPath = url.path
                }
            case .failure(let error):
                toolsManager.output = "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π: \(error.localizedDescription)"
            }
        }
    }
    
    private func canCreateAlias() -> Bool {
        return !oldKeyPath.isEmpty && !newKeyPath.isEmpty && !domainName.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty
    }
    
    private func createAlias() {
        let trimmedDomain = domainName.trimmingCharacters(in: .whitespacesAndNewlines)
        
        if trimmedDomain.isEmpty {
            toolsManager.output = "‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –¥–ª—è –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∏"
            return
        }
        
        if oldKeyPath.isEmpty {
            toolsManager.output = "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –∫–ª—é—á–∞–º–∏"
            return
        }
        
        if newKeyPath.isEmpty {
            toolsManager.output = "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –Ω–æ–≤—ã–º–∏ –∫–ª—é—á–∞–º–∏"
            return
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º regaddralias —Å —Ñ–∞–π–ª–∞–º–∏ –∫–ª—é—á–µ–π –∏ –¥–æ–º–µ–Ω–æ–º
        toolsManager.runTool(name: "regaddralias", arguments: [oldKeyPath, newKeyPath, trimmedDomain]) { output in
            DispatchQueue.main.async {
                if output.contains("=") && output.contains("#!action=adddest") {
                    // –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–ª–∏–∞—Å–∞
                    aliasString = output.trimmingCharacters(in: .whitespacesAndNewlines)
                    toolsManager.output = "‚úÖ –ê–ª–∏–∞—Å –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∏ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n" + output
                } else {
                    // –û—à–∏–±–∫–∞
                    toolsManager.output = output
                    aliasString = ""
                }
            }
        }
    }
    
    private func verifySignature() {
        if aliasString.isEmpty {
            toolsManager.output = "‚ùå –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∞–ª–∏–∞—Å –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∏"
            return
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º verifyhost –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
        let escapedString = aliasString.replacingOccurrences(of: "!", with: "\\!")
        
        toolsManager.runTool(name: "verifyhost", arguments: [escapedString]) { output in
            DispatchQueue.main.async {
                if output.isEmpty {
                    toolsManager.output = "‚úÖ –ü–æ–¥–ø–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞! –ê–ª–∏–∞—Å –ø–µ—Ä–µ–ø—Ä–∏–≤—è–∑–∫–∏ –≥–æ—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ reg.i2p –∏–ª–∏ stats.i2p"
                } else {
                    toolsManager.output = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏:\n" + output
                }
            }
        }
    }
}

struct OfflinekeysView: View {
    @ObservedObject var toolsManager: ToolsManager
    @State private var masterKeyPath = ""
    @State private var outputKeyPath = ""
    @State private var days = "365"
    @State private var signatureType = "7"
    @State private var showingMasterKeyPicker = false
    @State private var showingOutputKeyPicker = false
    @State private var offlineKeyInfo = ""
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á"))
                    .font(.headline)
                HStack {
                    TextField(L("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∫–ª—é—á–æ–º"), text: $masterKeyPath)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                        .disabled(true)
                    Button(L("–í—ã–±—Ä–∞—Ç—å")) {
                        showingMasterKeyPicker = true
                    }
                }
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª"))
                    .font(.headline)
                HStack {
                    TextField(L("–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞"), text: $outputKeyPath)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                    Button(L("–í—ã–±—Ä–∞—Ç—å")) {
                        showingOutputKeyPicker = true
                    }
                }
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (–¥–Ω–∏)"))
                    .font(.headline)
                TextField(L("–ù–∞–ø—Ä–∏–º–µ—Ä: 365"), text: $days)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–¢–∏–ø –ø–æ–¥–ø–∏—Å–∏"))
                    .font(.headline)
                TextField(L("–ù–∞–ø—Ä–∏–º–µ—Ä: 7 (ED25519-SHA512)"), text: $signatureType)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"))
                    .font(.headline)
                Text(L("–û—Ñ–ª–∞–π–Ω-–∫–ª—é—á–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç —Ö—Ä–∞–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ, –∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª—é—á —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è. –í —Å–ª—É—á–∞–µ –∫–æ–º–ø—Ä–æ–º–µ—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞, –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à –∞–¥—Ä–µ—Å —Å–Ω–æ–≤–∞ –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–∞–º."))
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            Button(L("–°–æ–∑–¥–∞—Ç—å –æ—Ñ–ª–∞–π–Ω-–∫–ª—é—á")) {
                createOfflineKey()
            }
            .disabled(!canCreateOfflineKey() || toolsManager.isRunning)
            
            if toolsManager.isRunning {
                HStack {
                    ProgressView()
                        .scaleEffect(0.8)
                    Text(L("–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ–ª–∞–π–Ω-–∫–ª—é—á–∞..."))
                        .font(.caption)
                }
            }
            
            if !offlineKeyInfo.isEmpty {
                VStack(alignment: .leading, spacing: 8) {
                    Text(L("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ñ–ª–∞–π–Ω-–∫–ª—é—á–µ"))
                        .font(.headline)
                    ScrollView {
                        Text(offlineKeyInfo)
                            .font(.system(.body, design: .monospaced))
                            .frame(maxWidth: .infinity, alignment: .leading)
                            .padding()
                            .background(Color(NSColor.textBackgroundColor))
                            .cornerRadius(8)
                    }
                    .frame(height: 200)
                }
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–†–µ–∑—É–ª—å—Ç–∞—Ç"))
                    .font(.headline)
                ScrollView {
                    Text(toolsManager.output)
                        .font(.system(.body, design: .monospaced))
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .padding()
                        .background(Color(NSColor.textBackgroundColor))
                        .cornerRadius(8)
                }
                .frame(height: 200)
            }
        }
        .padding()
        .fileImporter(
            isPresented: $showingMasterKeyPicker,
            allowedContentTypes: [.data, .text, .plainText],
            allowsMultipleSelection: false
        ) { result in
            switch result {
            case .success(let urls):
                if let url = urls.first {
                    masterKeyPath = url.path
                }
            case .failure(let error):
                toolsManager.output = "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–ª—é—á–∞: \(error.localizedDescription)"
            }
        }
        .fileImporter(
            isPresented: $showingOutputKeyPicker,
            allowedContentTypes: [.data, .text, .plainText],
            allowsMultipleSelection: false
        ) { result in
            switch result {
            case .success(let urls):
                if let url = urls.first {
                    outputKeyPath = url.path
                }
            case .failure(let error):
                toolsManager.output = "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: \(error.localizedDescription)"
            }
        }
        .padding()
    }
    
    private func canCreateOfflineKey() -> Bool {
        return !masterKeyPath.isEmpty && !outputKeyPath.isEmpty && !days.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty && !signatureType.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty
    }
    
    private func createOfflineKey() {
        let trimmedDays = days.trimmingCharacters(in: .whitespacesAndNewlines)
        let trimmedSignatureType = signatureType.trimmingCharacters(in: .whitespacesAndNewlines)
        
        if trimmedDays.isEmpty {
            toolsManager.output = "‚ùå –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–Ω—è—Ö"
            return
        }
        
        if trimmedSignatureType.isEmpty {
            toolsManager.output = "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∏"
            return
        }
        
        guard let daysInt = Int(trimmedDays), daysInt > 0 else {
            toolsManager.output = "‚ùå –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"
            return
        }
        
        guard let signatureTypeInt = Int(trimmedSignatureType), signatureTypeInt > 0 else {
            toolsManager.output = "‚ùå –¢–∏–ø –ø–æ–¥–ø–∏—Å–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º"
            return
        }
        
        if masterKeyPath.isEmpty {
            toolsManager.output = "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∫–ª—é—á–æ–º"
            return
        }
        
        if outputKeyPath.isEmpty {
            toolsManager.output = "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª"
            return
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º offlinekeys —Å –æ—Å–Ω–æ–≤–Ω—ã–º –∫–ª—é—á–æ–º, –≤—ã—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–æ–º, —Ç–∏–ø–æ–º –ø–æ–¥–ø–∏—Å–∏ –∏ —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è
        toolsManager.runTool(name: "offlinekeys", arguments: [outputKeyPath, masterKeyPath, trimmedSignatureType, trimmedDays]) { output in
            DispatchQueue.main.async {
                if output.contains("Offline keys for destination") && output.contains("created") {
                    // –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ–ª–∞–π–Ω-–∫–ª—é—á–∞
                    toolsManager.output = "‚úÖ –û—Ñ–ª–∞–π–Ω-–∫–ª—é—á —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!\n\n" + output
                    
                    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∫–ª—é—á–µ
                    self.getOfflineKeyInfo()
                } else {
                    // –û—à–∏–±–∫–∞
                    toolsManager.output = output
                    offlineKeyInfo = ""
                }
            }
        }
    }
    
    private func getOfflineKeyInfo() {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –æ—Ñ–ª–∞–π–Ω-–∫–ª—é—á–µ
        toolsManager.runTool(name: "keyinfo", arguments: ["-v", outputKeyPath]) { output in
            DispatchQueue.main.async {
                if !output.isEmpty && !output.contains("‚ùå") {
                    offlineKeyInfo = output
                } else {
                    offlineKeyInfo = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ"
                }
            }
        }
    }
}

struct RouterinfoView: View {
    @ObservedObject var toolsManager: ToolsManager
    @State private var routerInfoPath = ""
    @State private var showingFilePicker = false
    @State private var showPorts = false
    @State private var showFirewallRules = false
    @State private var showIPv6 = false
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–§–∞–π–ª RouterInfo"))
                    .font(.headline)
                HStack {
                    TextField(L("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª RouterInfo"), text: $routerInfoPath)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                        .disabled(true)
                    Button(L("–í—ã–±—Ä–∞—Ç—å")) {
                        showingFilePicker = true
                    }
                }
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–û–ø—Ü–∏–∏"))
                    .font(.headline)
                
                VStack(alignment: .leading, spacing: 4) {
                    Toggle(L("–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—ã (-p)"), isOn: $showPorts)
                    Toggle(L("–ü—Ä–∞–≤–∏–ª–∞ —Ñ–∞–π–µ—Ä–≤–æ–ª–∞ (-f)"), isOn: $showFirewallRules)
                    Toggle(L("IPv6 –∞–¥—Ä–µ—Å–∞ (-6)"), isOn: $showIPv6)
                }
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"))
                    .font(.headline)
                Text(L("RouterInfo —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–∞—Ö –∏ IP-–∞–¥—Ä–µ—Å–µ —Ä–æ—É—Ç–µ—Ä–∞. –§–∞–π–ª—ã –æ–±—ã—á–Ω–æ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ netDb/ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö i2pd. –§–ª–∞–≥ -p –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Ä—Ç—ã, -f –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ iptables, -6 –¥–æ–±–∞–≤–ª—è–µ—Ç IPv6 –∞–¥—Ä–µ—Å–∞."))
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            Button(L("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å RouterInfo")) {
                analyzeRouterInfo()
            }
            .disabled(routerInfoPath.isEmpty || toolsManager.isRunning)
            
            if toolsManager.isRunning {
                HStack {
                    ProgressView()
                        .scaleEffect(0.8)
                    Text(L("–ê–Ω–∞–ª–∏–∑..."))
                        .font(.caption)
                }
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–†–µ–∑—É–ª—å—Ç–∞—Ç"))
                    .font(.headline)
                ScrollView {
                    Text(toolsManager.output)
                        .font(.system(.body, design: .monospaced))
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .padding()
                        .background(Color(NSColor.textBackgroundColor))
                        .cornerRadius(8)
                }
                .frame(height: 300)
            }
            
            Spacer()
        }
        .padding()
        .fileImporter(
            isPresented: $showingFilePicker,
            allowedContentTypes: [.data, .text, .plainText],
            allowsMultipleSelection: false
        ) { result in
            switch result {
            case .success(let urls):
                if let url = urls.first {
                    routerInfoPath = url.path
                }
            case .failure(let error):
                toolsManager.output = "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ RouterInfo: \(error.localizedDescription)"
            }
        }
    }
    
    private func analyzeRouterInfo() {
        if routerInfoPath.isEmpty {
            toolsManager.output = "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª RouterInfo"
            return
        }
        
        var arguments = [routerInfoPath]
        
        if showPorts {
            arguments.insert("-p", at: 0)
        }
        
        if showFirewallRules {
            arguments.insert("-f", at: 0)
        }
        
        if showIPv6 {
            arguments.insert("-6", at: 0)
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å RouterInfo
        toolsManager.runTool(name: "routerinfo", arguments: arguments, workingDirectory: toolsManager.getI2pdDataPath()) { output in
            DispatchQueue.main.async {
                if !output.isEmpty && !output.contains("‚ùå") {
                    toolsManager.output = "‚úÖ –ê–Ω–∞–ª–∏–∑ RouterInfo –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n" + output
                } else {
                    toolsManager.output = output
                }
            }
        }
    }
}

struct X25519View: View {
    @ObservedObject var toolsManager: ToolsManager
    @State private var publicKey = ""
    @State private var privateKey = ""
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"))
                    .font(.headline)
                Text(L("–£—Ç–∏–ª–∏—Ç–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–∞—Ä—É –∫–ª—é—á–µ–π —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è X25519 –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ Base64. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–∏–∑—Å–µ—Ç–∞—Ö —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç DDoS-–∞—Ç–∞–∫ –Ω–∞ —É—Ä–æ–≤–Ω–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ —Å–µ—Ç–∏ I2P."))
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ"))
                    .font(.headline)
                VStack(alignment: .leading, spacing: 4) {
                    Text(L("‚Ä¢ Server: i2cp.leaseSetClient.dh.NNN = User:PublicKey"))
                    Text(L("‚Ä¢ Client: i2cp.leaseSetPrivKey = PrivateKey"))
                    Text(L("‚Ä¢ signaturetype = 11, i2cp.leaseSetType = 5, i2cp.leaseSetAuthType = 1"))
                }
                .font(.system(.caption, design: .monospaced))
                .foregroundColor(.secondary)
            }
            
            Button(L("–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å X25519 –∫–ª—é—á–∏")) {
                generateX25519()
            }
            .disabled(toolsManager.isRunning)
            
            if toolsManager.isRunning {
                HStack {
                    ProgressView()
                        .scaleEffect(0.8)
                    Text(L("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è..."))
                        .font(.caption)
                }
            }
            
            if !publicKey.isEmpty && !privateKey.isEmpty {
                VStack(alignment: .leading, spacing: 12) {
                    VStack(alignment: .leading, spacing: 8) {
                        Text(L("–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á"))
                            .font(.headline)
                        HStack {
                            Text(publicKey)
                                .font(.system(.body, design: .monospaced))
                                .padding()
                                .background(Color(NSColor.textBackgroundColor))
                                .cornerRadius(8)
                                .frame(maxWidth: .infinity, alignment: .leading)
                            
                            Button(L("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å")) {
                                copyToClipboard(publicKey)
                            }
                        }
                    }
                    
                    VStack(alignment: .leading, spacing: 8) {
                        Text(L("–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á"))
                            .font(.headline)
                        HStack {
                            Text(privateKey)
                                .font(.system(.body, design: .monospaced))
                                .padding()
                                .background(Color(NSColor.textBackgroundColor))
                                .cornerRadius(8)
                                .frame(maxWidth: .infinity, alignment: .leading)
                            
                            Button(L("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å")) {
                                copyToClipboard(privateKey)
                            }
                        }
                    }
                    
                    VStack(alignment: .leading, spacing: 8) {
                        Text(L("–ì–æ—Ç–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"))
                            .font(.headline)
                        
                        HStack {
                            Button(L("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞")) {
                                copyServerConfig()
                            }
                            
                            Button(L("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞")) {
                                copyClientConfig()
                            }
                        }
                    }
                }
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–†–µ–∑—É–ª—å—Ç–∞—Ç"))
                    .font(.headline)
                ScrollView {
                    Text(toolsManager.output)
                        .font(.system(.body, design: .monospaced))
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .padding()
                        .background(Color(NSColor.textBackgroundColor))
                        .cornerRadius(8)
                }
                .frame(height: 200)
            }
            
            Spacer()
        }
        .padding()
    }
    
    private func generateX25519() {
        toolsManager.runTool(name: "x25519", arguments: []) { output in
            DispatchQueue.main.async {
                if !output.isEmpty && !output.contains("‚ùå") {
                    // –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ —É—Ç–∏–ª–∏—Ç—ã x25519
                    let lines = output.components(separatedBy: .newlines)
                    for line in lines {
                        if line.hasPrefix("PublicKey: ") {
                            publicKey = String(line.dropFirst("PublicKey: ".count))
                        } else if line.hasPrefix("PrivateKey: ") {
                            privateKey = String(line.dropFirst("PrivateKey: ".count))
                        }
                    }
                    
                    toolsManager.output = "‚úÖ X25519 –∫–ª—é—á–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n\n" + output
                } else {
                    toolsManager.output = output
                    publicKey = ""
                    privateKey = ""
                }
            }
        }
    }
    
    private func copyToClipboard(_ text: String) {
        let pasteboard = NSPasteboard.general
        pasteboard.clearContents()
        pasteboard.setString(text, forType: .string)
    }
    
    private func copyServerConfig() {
        let serverConfig = """
[SUPER-HIDDEN-SERVICE]
type = server
host = 127.0.0.1
port = 8080
inport = 80
keys = site.dat
signaturetype = 11
i2cp.leaseSetType = 5
i2cp.leaseSetAuthType = 1
i2cp.leaseSetClient.dh.123 = user:\(publicKey)
"""
        copyToClipboard(serverConfig)
    }
    
    private func copyClientConfig() {
        let clientConfig = """
[hidden-client]
type = client
address = 127.0.0.1
port = 8090
destination = your-service.b32.i2p
destinationport = 80
keys = client.dat
i2cp.leaseSetPrivKey = \(privateKey)
"""
        copyToClipboard(clientConfig)
    }
}

struct I2pbase64View: View {
    @ObservedObject var toolsManager: ToolsManager
    @State private var inputText = ""
    @State private var operation = "encode" // encode –∏–ª–∏ decode
    @State private var result = ""
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"))
                    .font(.headline)
                Text(L("I2P Base64 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–ª—Ñ–∞–≤–∏—Ç: + –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ -, / –Ω–∞ ~. –≠—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤ –≤–µ–±-–±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è addresshelper. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–π –∏ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."))
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–û–ø–µ—Ä–∞—Ü–∏—è"))
                    .font(.headline)
                Picker(L("–û–ø–µ—Ä–∞—Ü–∏—è"), selection: $operation) {
                    Text(L("–ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å")).tag("encode")
                    Text(L("–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å")).tag("decode")
                }
                .pickerStyle(SegmentedPickerStyle())
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç"))
                    .font(.headline)
                TextEditor(text: $inputText)
                    .frame(height: 100)
                    .overlay(
                        RoundedRectangle(cornerRadius: 8)
                            .stroke(Color.gray.opacity(0.3), lineWidth: 1)
                    )
            }
            
            Button(operation == "encode" ? L("–ö–æ–¥–∏—Ä–æ–≤–∞—Ç—å –≤ I2P Base64") : L("–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–∑ I2P Base64")) {
                processBase64()
            }
            .disabled(toolsManager.isRunning || inputText.isEmpty)
            
            if toolsManager.isRunning {
                HStack {
                    ProgressView()
                        .scaleEffect(0.8)
                    Text(L("–û–±—Ä–∞–±–æ—Ç–∫–∞..."))
                        .font(.caption)
                }
            }
            
            if !result.isEmpty {
                VStack(alignment: .leading, spacing: 8) {
                    Text(L("–†–µ–∑—É–ª—å—Ç–∞—Ç"))
                        .font(.headline)
                    HStack {
                        Text(result)
                            .font(.system(.body, design: .monospaced))
                            .padding()
                            .background(Color(NSColor.textBackgroundColor))
                            .cornerRadius(8)
                            .frame(maxWidth: .infinity, alignment: .leading)
                        
                        Button(L("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å")) {
                            copyToClipboard(result)
                        }
                    }
                }
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥"))
                    .font(.headline)
                ScrollView {
                    Text(toolsManager.output)
                        .font(.system(.body, design: .monospaced))
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .padding()
                        .background(Color(NSColor.textBackgroundColor))
                        .cornerRadius(8)
                }
                .frame(height: 150)
            }
            
            Spacer()
        }
        .padding()
    }
    
    private func processBase64() {
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        let tempDir = FileManager.default.temporaryDirectory
        let tempFile = tempDir.appendingPathComponent("i2pbase64_input.txt")
        
        do {
            try inputText.write(to: tempFile, atomically: true, encoding: .utf8)
            
            let arguments = operation == "encode" ? ["-e", tempFile.path] : ["-d", tempFile.path]
            
            toolsManager.runTool(name: "i2pbase64", arguments: arguments) { output in
                DispatchQueue.main.async {
                    if !output.isEmpty && !output.contains("‚ùå") {
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (—É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã)
                        let cleanOutput = output.trimmingCharacters(in: .whitespacesAndNewlines)
                        result = cleanOutput
                        toolsManager.output = "‚úÖ \(operation == "encode" ? "–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ" : "–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ") –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n" + output
                    } else {
                        toolsManager.output = output
                        result = ""
                    }
                }
            }
        } catch {
            toolsManager.output = "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: \(error.localizedDescription)"
        }
    }
    
    private func copyToClipboard(_ text: String) {
        let pasteboard = NSPasteboard.general
        pasteboard.clearContents()
        pasteboard.setString(text, forType: .string)
    }
}

struct FamtoolView: View {
    @ObservedObject var toolsManager: ToolsManager
    @State private var familyName = ""
    @State private var operation = "generate" // generate, sign, verify
    @State private var routerKeysPath = ""
    @State private var routerInfoPath = ""
    @State private var familyCertPath = ""
    @State private var familyKeyPath = ""
    @State private var showingRouterKeysPicker = false
    @State private var showingRouterInfoPicker = false
    @State private var showingFamilyCertPicker = false
    @State private var showingFamilyKeyPicker = false
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"))
                    .font(.headline)
                Text(L("Family - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–∑–Ω–∞–∫ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤ –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –≤ –æ–¥–Ω–æ–º —Ç—É–Ω–Ω–µ–ª–µ. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ä–æ—É—Ç–µ—Ä–æ–≤."))
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–û–ø–µ—Ä–∞—Ü–∏—è"))
                    .font(.headline)
                Picker(L("–û–ø–µ—Ä–∞—Ü–∏—è"), selection: $operation) {
                    Text(L("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞")).tag("generate")
                    Text(L("–ü–æ–¥–ø–∏—Å—å —Ä–æ—É—Ç–µ—Ä–∞")).tag("sign")
                    Text(L("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏")).tag("verify")
                }
                .pickerStyle(SegmentedPickerStyle())
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ù–∞–∑–≤–∞–Ω–∏–µ family"))
                    .font(.headline)
                TextField(L("–ù–∞–ø—Ä–∏–º–µ—Ä: myfamily"), text: $familyName)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
            }
            
            if operation == "generate" {
                VStack(alignment: .leading, spacing: 8) {
                    Text(L("–í—ã—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã"))
                        .font(.headline)
                    HStack {
                        TextField(L("family.crt"), text: $familyCertPath)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                        Button(L("–í—ã–±—Ä–∞—Ç—å")) {
                            showingFamilyCertPicker = true
                        }
                    }
                    HStack {
                        TextField(L("family.pem"), text: $familyKeyPath)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                        Button(L("–í—ã–±—Ä–∞—Ç—å")) {
                            showingFamilyKeyPicker = true
                        }
                    }
                }
            }
            
            if operation == "sign" {
                VStack(alignment: .leading, spacing: 8) {
                    Text(L("–§–∞–π–ª—ã —Ä–æ—É—Ç–µ—Ä–∞"))
                        .font(.headline)
                    HStack {
                        TextField(L("router.keys"), text: $routerKeysPath)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                        Button(L("–í—ã–±—Ä–∞—Ç—å")) {
                            showingRouterKeysPicker = true
                        }
                    }
                    HStack {
                        TextField(L("router.info"), text: $routerInfoPath)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                        Button(L("–í—ã–±—Ä–∞—Ç—å")) {
                            showingRouterInfoPicker = true
                        }
                    }
                    HStack {
                        TextField(L("family.pem"), text: $familyKeyPath)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                        Button(L("–í—ã–±—Ä–∞—Ç—å")) {
                            showingFamilyKeyPicker = true
                        }
                    }
                }
            }
            
            if operation == "verify" {
                VStack(alignment: .leading, spacing: 8) {
                    Text(L("–§–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"))
                        .font(.headline)
                    HStack {
                        TextField(L("family.crt"), text: $familyCertPath)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                        Button(L("–í—ã–±—Ä–∞—Ç—å")) {
                            showingFamilyCertPicker = true
                        }
                    }
                    HStack {
                        TextField(L("router.info"), text: $routerInfoPath)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                        Button(L("–í—ã–±—Ä–∞—Ç—å")) {
                            showingRouterInfoPicker = true
                        }
                    }
                }
            }
            
            Button(getButtonTitle()) {
                executeFamtool()
            }
            .disabled(!canExecute() || toolsManager.isRunning)
            
            if toolsManager.isRunning {
                HStack {
                    ProgressView()
                        .scaleEffect(0.8)
                    Text(L("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ..."))
                        .font(.caption)
                }
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–†–µ–∑—É–ª—å—Ç–∞—Ç"))
                    .font(.headline)
                ScrollView {
                    Text(toolsManager.output)
                        .font(.system(.body, design: .monospaced))
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .padding()
                        .background(Color(NSColor.textBackgroundColor))
                        .cornerRadius(8)
                }
                .frame(height: 300)
            }
            
            Spacer()
        }
        .padding()
        .fileImporter(
            isPresented: $showingRouterKeysPicker,
            allowedContentTypes: [.data, .text],
            allowsMultipleSelection: false
        ) { result in
            handleFileSelection(result: result, path: $routerKeysPath)
        }
        .fileImporter(
            isPresented: $showingRouterInfoPicker,
            allowedContentTypes: [.data, .text],
            allowsMultipleSelection: false
        ) { result in
            handleFileSelection(result: result, path: $routerInfoPath)
        }
        .fileImporter(
            isPresented: $showingFamilyCertPicker,
            allowedContentTypes: [.data, .text, .plainText],
            allowsMultipleSelection: false
        ) { result in
            handleFileSelection(result: result, path: $familyCertPath)
        }
        .fileImporter(
            isPresented: $showingFamilyKeyPicker,
            allowedContentTypes: [.data, .text, .plainText],
            allowsMultipleSelection: false
        ) { result in
            handleFileSelection(result: result, path: $familyKeyPath)
        }
    }
    
    private func getButtonTitle() -> String {
        switch operation {
        case "generate":
            return L("–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç family")
        case "sign":
            return L("–ü–æ–¥–ø–∏—Å–∞—Ç—å —Ä–æ—É—Ç–µ—Ä")
        case "verify":
            return L("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å—å")
        default:
            return L("–í—ã–ø–æ–ª–Ω–∏—Ç—å")
        }
    }
    
    private func canExecute() -> Bool {
        if familyName.isEmpty {
            return false
        }
        
        switch operation {
        case "generate":
            return !familyCertPath.isEmpty && !familyKeyPath.isEmpty
        case "sign":
            return !routerKeysPath.isEmpty && !routerInfoPath.isEmpty && !familyKeyPath.isEmpty
        case "verify":
            return !familyCertPath.isEmpty && !routerInfoPath.isEmpty
        default:
            return false
        }
    }
    
    private func executeFamtool() {
        var arguments: [String] = []
        
        switch operation {
        case "generate":
            arguments = ["-g", "-n", familyName, "-c", familyCertPath, "-k", familyKeyPath]
        case "sign":
            arguments = ["-s", "-n", familyName, "-k", familyKeyPath, "-i", routerKeysPath, "-f", routerInfoPath]
        case "verify":
            arguments = ["-V", "-c", familyCertPath, "-f", routerInfoPath]
        default:
            return
        }
        
        toolsManager.runTool(name: "famtool", arguments: arguments) { output in
            DispatchQueue.main.async {
                if !output.isEmpty && !output.contains("‚ùå") {
                    toolsManager.output = "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è famtool –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n" + output
                } else {
                    toolsManager.output = output
                }
            }
        }
    }
    
    private func handleFileSelection(result: Result<[URL], Error>, path: Binding<String>) {
        switch result {
        case .success(let urls):
            if let url = urls.first {
                path.wrappedValue = url.path
            }
        case .failure(let error):
            toolsManager.output = "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞: \(error.localizedDescription)"
        }
    }
}

struct VerifyhostView: View {
    @ObservedObject var toolsManager: ToolsManager
    @State private var hostRecord = ""
    @State private var verificationResult = ""
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"))
                    .font(.headline)
                Text(L("–£—Ç–∏–ª–∏—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å —Ö–æ—Å—Ç–æ–≤ –ø–æ –∏—Ö –∑–∞–ø–∏—Å—è–º. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–æ–º–µ–Ω–æ–≤ .i2p –∏ –¥—Ä—É–≥–∏—Ö –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π."))
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ó–∞–ø–∏—Å—å —Ö–æ—Å—Ç–∞"))
                    .font(.headline)
                TextEditor(text: $hostRecord)
                    .frame(height: 120)
                    .overlay(
                        RoundedRectangle(cornerRadius: 8)
                            .stroke(Color.gray.opacity(0.3), lineWidth: 1)
                    )
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π"))
                    .font(.headline)
                VStack(alignment: .leading, spacing: 4) {
                    Text(L("‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–æ–º–µ–Ω–∞ .i2p"))
                    Text(L("‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å RouterInfo"))
                    Text(L("‚Ä¢ –õ—é–±–∞—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å —Å –ø–æ–¥–ø–∏—Å—å—é"))
                }
                .font(.caption)
                .foregroundColor(.secondary)
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"))
                    .font(.headline)
                VStack(alignment: .leading, spacing: 4) {
                    Text(L("‚Ä¢ 'Valid destination' - –ø–æ–¥–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞"))
                    Text(L("‚Ä¢ 'Destination signature not found' - –ø–æ–¥–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"))
                    Text(L("‚Ä¢ 'Invalid destination signature' - –ø–æ–¥–ø–∏—Å—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞"))
                }
                .font(.caption)
                .foregroundColor(.secondary)
            }
            
            Button(L("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å—å")) {
                verifyHost()
            }
            .disabled(hostRecord.isEmpty || toolsManager.isRunning)
            
            if toolsManager.isRunning {
                HStack {
                    ProgressView()
                        .scaleEffect(0.8)
                    Text(L("–ü—Ä–æ–≤–µ—Ä–∫–∞..."))
                        .font(.caption)
                }
            }
            
            if !verificationResult.isEmpty {
                VStack(alignment: .leading, spacing: 8) {
                    Text(L("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏"))
                        .font(.headline)
                    HStack {
                        Text(verificationResult)
                            .font(.system(.body, design: .monospaced))
                            .padding()
                            .background(Color(NSColor.textBackgroundColor))
                            .cornerRadius(8)
                            .frame(maxWidth: .infinity, alignment: .leading)
                        
                        Button(L("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å")) {
                            copyToClipboard(verificationResult)
                        }
                    }
                }
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ü–æ–ª–Ω—ã–π –≤—ã–≤–æ–¥"))
                    .font(.headline)
                ScrollView {
                    Text(toolsManager.output)
                        .font(.system(.body, design: .monospaced))
                        .frame(maxWidth: .infinity, alignment: .leading)
                        .padding()
                        .background(Color(NSColor.textBackgroundColor))
                        .cornerRadius(8)
                }
                .frame(height: 200)
            }
            
            Spacer()
        }
        .padding()
    }
    
    private func verifyHost() {
        if hostRecord.isEmpty {
            toolsManager.output = "‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å —Ö–æ—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
            return
        }
        
        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –∑–∞–ø–∏—Å–∏ —Ö–æ—Å—Ç–∞
        let escapedRecord = hostRecord.replacingOccurrences(of: "'", with: "\\'")
        
        toolsManager.runTool(name: "verifyhost", arguments: ["'\(escapedRecord)'"]) { output in
            DispatchQueue.main.async {
                if !output.isEmpty && !output.contains("‚ùå") {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –≤—ã–≤–æ–¥—É
                    if output.contains("Valid destination") {
                        verificationResult = "‚úÖ –ü–æ–¥–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ (Valid destination)"
                    } else if output.contains("Invalid destination signature") {
                        verificationResult = "‚ùå –ü–æ–¥–ø–∏—Å—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ (Invalid destination signature)"
                    } else if output.contains("Destination signature not found") {
                        verificationResult = "‚ö†Ô∏è –ü–æ–¥–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (Destination signature not found)"
                    } else {
                        verificationResult = "‚ÑπÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—É—á–µ–Ω"
                    }
                    
                    toolsManager.output = "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n" + output
                } else {
                    toolsManager.output = output
                    verificationResult = ""
                }
            }
        }
    }
    
    private func copyToClipboard(_ text: String) {
        let pasteboard = NSPasteboard.general
        pasteboard.clearContents()
        pasteboard.setString(text, forType: .string)
    }
}

struct AutoconfView: View {
    @ObservedObject var toolsManager: ToolsManager
    @State private var terminalOutput = ""
    @State private var isProcessRunning = false
    @State private var process: Process?
    @State private var inputText = ""
    
    var body: some View {
        VStack(alignment: .leading, spacing: 16) {
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"))
                    .font(.headline)
                Text(L("–£—Ç–∏–ª–∏—Ç–∞ autoconf –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ i2pd. –û–Ω–∞ –∑–∞–¥–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ä–æ—É—Ç–µ—Ä–∞ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–æ—Ç–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª."))
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏"))
                    .font(.headline)
                VStack(alignment: .leading, spacing: 4) {
                    Text(L("‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏"))
                    Text(L("‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"))
                    Text(L("‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"))
                    Text(L("‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ i2pd.conf"))
                }
                .font(.caption)
                .foregroundColor(.secondary)
            }
            
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–¢–∏–ø—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"))
                    .font(.headline)
                VStack(alignment: .leading, spacing: 4) {
                    Text(L("‚Ä¢ Clearnet - –æ–±—ã—á–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"))
                    Text(L("‚Ä¢ Only Yggdrasil - —Ç–æ–ª—å–∫–æ —Å–µ—Ç—å Yggdrasil"))
                }
                .font(.caption)
                .foregroundColor(.secondary)
            }
            
            // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª
            VStack(alignment: .leading, spacing: 8) {
                Text(L("–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª"))
                    .font(.headline)
                
                VStack(spacing: 8) {
                    // –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
                    ScrollViewReader { proxy in
                        ScrollView {
                            Text(terminalOutput.isEmpty ? L("–ù–∞–∂–º–∏—Ç–µ '–ó–∞–ø—É—Å—Ç–∏—Ç—å autoconf' –¥–ª—è –Ω–∞—á–∞–ª–∞") : terminalOutput)
                                .font(.system(.caption, design: .monospaced))
                                .frame(maxWidth: .infinity, alignment: .leading)
                                .padding(8)
                                .background(Color.black)
                                .foregroundColor(.green)
                                .cornerRadius(4)
                                .id("terminal-output") // ID –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                        }
                        .frame(height: 200)
                        .overlay(
                            RoundedRectangle(cornerRadius: 4)
                                .stroke(Color.gray.opacity(0.3), lineWidth: 1)
                        )
                        .onChange(of: terminalOutput) {
                            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                            withAnimation(.easeInOut(duration: 0.3)) {
                                proxy.scrollTo("terminal-output", anchor: .bottom)
                            }
                        }
                    }
                    
                    // –ü–æ–ª–µ –≤–≤–æ–¥–∞
                    HStack {
                        Text(">")
                            .foregroundColor(.green)
                        TextField(L("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç..."), text: $inputText)
                            .textFieldStyle(RoundedBorderTextFieldStyle())
                            .onSubmit {
                                sendInput()
                            }
                    }
                    .font(.system(.caption, design: .monospaced))
                }
            }
            
            HStack(spacing: 12) {
                Button(L("–ó–∞–ø—É—Å—Ç–∏—Ç—å autoconf")) {
                    startAutoconf()
                }
                .disabled(isProcessRunning)
                
                Button(L("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")) {
                    stopProcess()
                }
                .disabled(!isProcessRunning)
                
                Button(L("–û—á–∏—Å—Ç–∏—Ç—å")) {
                    terminalOutput = ""
                }
                .disabled(isProcessRunning)
            }
            
            if isProcessRunning {
                HStack {
                    ProgressView()
                        .scaleEffect(0.8)
                    Text(L("–ü—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è..."))
                        .font(.caption)
                        .foregroundColor(.secondary)
                }
            }
        }
        .padding()
        .onDisappear {
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ AutoconfView
            stopProcess()
        }
    }
    
    private func startAutoconf() {
        guard !isProcessRunning else { return }
        
        terminalOutput = ""
        isProcessRunning = true
        
        DispatchQueue.global(qos: .userInitiated).async {
            let process = Process()
            self.process = process
            
            // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —É—Ç–∏–ª–∏—Ç–µ autoconf
            let autoconfPath = toolsManager.getBundledToolPath(name: "autoconf")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç—ã
            guard FileManager.default.fileExists(atPath: autoconfPath) else {
                DispatchQueue.main.async {
                    self.terminalOutput += "‚ùå –£—Ç–∏–ª–∏—Ç–∞ 'autoconf' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: \(autoconfPath)\n"
                    self.isProcessRunning = false
                }
                return
            }
            
            process.executableURL = URL(fileURLWithPath: autoconfPath)
            process.currentDirectoryURL = URL(fileURLWithPath: NSHomeDirectory())
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º pipes –¥–ª—è –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞
            let inputPipe = Pipe()
            let outputPipe = Pipe()
            let errorPipe = Pipe()
            
            process.standardInput = inputPipe
            process.standardOutput = outputPipe
            process.standardError = errorPipe
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞
            outputPipe.fileHandleForReading.readabilityHandler = { handle in
                let data = handle.availableData
                if !data.isEmpty {
                    let output = String(data: data, encoding: .utf8) ?? ""
                    DispatchQueue.main.async {
                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –Ω–æ–≤—ã–º –≤—ã–≤–æ–¥–æ–º, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
                        if !output.isEmpty {
                            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –≤—ã–≤–æ–¥ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
                            if !self.terminalOutput.isEmpty && !self.terminalOutput.hasSuffix("\n") {
                                self.terminalOutput += "\n"
                            }
                            self.terminalOutput += output
                        }
                    }
                }
            }
            
            errorPipe.fileHandleForReading.readabilityHandler = { handle in
                let data = handle.availableData
                if !data.isEmpty {
                    let error = String(data: data, encoding: .utf8) ?? ""
                    DispatchQueue.main.async {
                        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –Ω–æ–≤—ã–º –≤—ã–≤–æ–¥–æ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
                        if !error.isEmpty {
                            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –≤—ã–≤–æ–¥ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
                            if !self.terminalOutput.isEmpty && !self.terminalOutput.hasSuffix("\n") {
                                self.terminalOutput += "\n"
                            }
                            self.terminalOutput += error
                        }
                    }
                }
            }
            
            do {
                try process.run()
                
                // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
                process.waitUntilExit()
                
                DispatchQueue.main.async {
                    self.isProcessRunning = false
                    self.process = nil
                }
            } catch {
                DispatchQueue.main.async {
                    self.terminalOutput += "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: \(error.localizedDescription)\n"
                    self.isProcessRunning = false
                    self.process = nil
                }
            }
        }
    }
    
    private func sendInput() {
        guard isProcessRunning, let process = process, !inputText.isEmpty else { return }
        
        let command = inputText
        let inputData = (command + "\n").data(using: .utf8)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        DispatchQueue.main.async {
            // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –≤—ã–≤–æ–¥ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–æ–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
            if !self.terminalOutput.isEmpty && !self.terminalOutput.hasSuffix("\n") {
                self.terminalOutput += "\n"
            }
            self.terminalOutput += "> " + command + "\n"
            self.inputText = ""
        }
        
        DispatchQueue.global(qos: .userInitiated).async {
            if let inputPipe = process.standardInput as? Pipe {
                inputPipe.fileHandleForWriting.write(inputData ?? Data())
            }
        }
    }
    
    private func stopProcess() {
        process?.terminate()
        process?.waitUntilExit() // –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        isProcessRunning = false
        process = nil
    }
}
