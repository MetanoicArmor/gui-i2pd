#!/usr/bin/env swift

import Foundation

// –ü—Ä–æ—Å—Ç–æ–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è i2pd
print("üîß I2PD GUI - –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–µ—Ä—Å–∏—è")
print("=====================================")

// –ü–æ–∏—Å–∫ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞ i2pd
func findI2pdBinary() -> String? {
    let possiblePaths = [
        "./i2pd",
        "./i2pd-gui/i2pd",
        "/usr/local/bin/i2pd",
        "/opt/homebrew/bin/i2pd",
        "/usr/bin/i2pd"
    ]
    
    for path in possiblePaths {
        if FileManager.default.fileExists(atPath: path) {
            return path
        }
    }
    return nil
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ daemon
func checkDaemonStatus() -> Bool {
    defer { print("") }
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ I2P daemon...")
    
    let process = Process()
    process.executableURL = URL(fileURLWithPath: "/bin/bash")
    process.arguments = ["-c", "pgrep -f i2pd"]
    
    let pipe = Pipe()
    process.standardOutput = pipe
    
    do {
        try process.run()
        process.waitUntilExit()
        
        let data = pipe.fileHandleForReading.readDataToEndOfFile()
        let output = String(data: data, encoding: .utf8) ?? ""
        
        if output.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty {
            print("üìä –°—Ç–∞—Ç—É—Å: –û–°–¢–ê–ù–û–í–õ–ï–ù ‚ùå")
            return false
        } else {
            print("üìä –°—Ç–∞—Ç—É—Å: –ó–ê–ü–£–©–ï–ù ‚úÖ")
            return true
        }
    } catch {
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: \(error.localizedDescription)")
        return false
    }
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã i2pd
func executeI2pdCommand(_ arguments: [String]) -> Bool {
    guard let binaryPath = findI2pdBinary() else {
        print("‚ùå –ë–∏–Ω–∞—Ä–Ω–∏–∫ i2pd –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç–∏:")
        print("   ./i2pd, ./i2pd-gui/i2pd, /usr/local/bin/i2pd")
        return false
    }
    
    print("üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–Ω–∞—Ä–Ω–∏–∫: \(binaryPath)")
    print("‚ö° –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: \(arguments.joined(separator: " "))")
    
    let process = Process()
    process.executableURL = URL(fileURLWithPath: binaryPath)
    process.arguments = arguments
    
    let pipe = Pipe()
    process.standardOutput = pipe
    process.standardError = pipe
    
    do {
        try process.run()
        process.waitUntilExit()
        
        let data = pipe.fileHandleForReading.readDataToEndOfFile()
        if let output = String(data: data, encoding: .utf8), !output.isEmpty {
            print("üìÑ –í—ã–≤–æ–¥: \(output)")
        }
        
        print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        return true
    } catch {
        print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: \(error.localizedDescription)")
        return false
    }
}

// –ü–æ–∫–∞–∑ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
func showMenu() {
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("   1 - –°—Ç–∞—Ç—É—Å daemon")
    print("   2 - –ó–∞–ø—É—Å—Ç–∏—Ç—å daemon")
    print("   3 - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å daemon")
    print("   4 - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å daemon")
    print("   5 - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
    print("   0 - –í—ã—Ö–æ–¥")
    print("\nüí° –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã:")
}

// –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func main() {
    print("\nüéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ I2PD CLI Manager!")
    print("üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å...")
    
    let isRunning = checkDaemonStatus()
    
    while true {
        showMenu()
        
        if let input = readLine(), let choice = Int(input) {
            switch choice {
            case 1:
                print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ daemon...")
                _ = checkDaemonStatus()
                
            case 2:
                if !checkDaemonStatus() {
                    print("\nüöÄ –ó–∞–ø—É—Å–∫ I2P daemon...")
                    if executeI2pdCommand(["--daemon"]) {
                        Thread.sleep(forTimeInterval: 2)
                        _ = checkDaemonStatus()
                    }
                } else {
                    print("‚ö†Ô∏è Daemon —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
                }
                
            case 3:
                if checkDaemonStatus() {
                    print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ I2P daemon...")
                    if executeI2pdCommand(["--kill"]) {
                        Thread.sleep(forTimeInterval: 2)
                        _ = checkDaemonStatus()
                    }
                } else {
                    print("‚ö†Ô∏è Daemon —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                }
                
            case 4:
                print("\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ I2P daemon...")
                if checkDaemonStatus() {
                    _ = executeI2pdCommand(["--kill"])
                    Thread.sleep(forTimeInterval: 2)
                }
                _ = executeI2pdCommand(["--daemon"])
                Thread.sleep(forTimeInterval: 2)
                _ = checkDaemonStatus()
                
            case 5:
                print("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:")
                print("   –ù–∞–∑–≤–∞–Ω–∏–µ: I2PD GUI Manager")
                print("   –í–µ—Ä—Å–∏—è: 1.0")
                print("   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: macOS")
                print("   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ARM64")
                print("   –¢–∏–ø: CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
                print("\nüîß –î–ª—è –ø–æ–ª–Ω–æ–≥–æ GUI –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
                print("   swift build && swift run (Swift Package Manager)")
                
            case 0:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                exit(0)
                
            default:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            }
        } else {
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥—ã.")
        }
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
main()
